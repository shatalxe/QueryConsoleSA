#Область ОписаниеПеременных	
Перем МассивТиповДляРасшифровки;
Перем ХранилищеНеотображаемыхЗначений;
Перем ВыводЗначений;
Перем ВыводКоллекции;
#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ВыполнитьЗадание() Экспорт
		
	Возврат Вычислить(ТекущееЗадание.ИмяМетода+"()");
	
КонецФункции

Функция ВыполнитьЗапрос() Экспорт
	
	ТекстЗапроса 			= ТекущееЗадание.ТекстЗапроса;
	Параметры				= ТекущееЗадание.Параметры;
	МассивВременныхТаблиц 	= ТекущееЗадание.МассивВременныхТаблиц;
	ИмяВременнойТаблицы 	= ТекущееЗадание.ИмяВременнойТаблицы;
	Отказ					= Ложь;
	МассивОшибок			= Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Заполняем параметры с проверкой
	Для Каждого ОписаниеПараметра Из Запрос.НайтиПараметры() Цикл

		Параметр = ОписаниеПараметра.Имя;
		Значение = Неопределено;
		
		Если Не Параметры.Свойство(Параметр, Значение) Тогда
			Отказ = Истина;
			МассивОшибок.Добавить(БСППодставитьПараметрыВСтроку(НСтр("ru = 'Не задано значение параметра %1'"),Параметр));
			ТекущееЗадание.Форма.Элементы.ГруппаПараметры.Показать();
			Продолжить;
		КонецЕсли;
		
		Запрос.Параметры.Вставить(Параметр, Значение);
		
	КонецЦикла;

	Если Отказ Тогда
		Возврат МассивОшибок;
	КонецЕсли;
	
	НачатьЗамер(ТекстЗапроса);
	Если ТекущееЗадание.Пакет = Истина Тогда 
		Результат = Запрос.ВыполнитьПакет();
	Иначе
		Результат = Запрос.Выполнить();
	КонецЕсли;
	ЗакончитьЗамер();
		
	Для Каждого Таблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		МассивВременныхТаблиц.Добавить(Таблица.ПолноеИмя);	
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		Возврат Запрос.МенеджерВременныхТаблиц.Таблицы[ИмяВременнойТаблицы].ПолучитьДанные()
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ВыполнитьКод() Экспорт
	
	Параметры = ТекущееЗадание.Параметры; 	Parameters = Параметры;	
	Результат = Неопределено; 				Result = Неопределено;
	
	Код = ТекущееЗадание.ТекстКода;
	
	НачатьЗамер(Код);
	Выполнить Код;
	ЗакончитьЗамер();
	
	Если Результат = Неопределено И Result <> Неопределено Тогда
		Возврат Result;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДиаграммуЗамеров(Диаграмма)Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Результаты.СтрокаВыполнения КАК СТРОКА(1000)) КАК СтрокаВыполнения,
		|	Результаты.ВремяВыполнения КАК ВремяВыполнения
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТЗ КАК Результаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СтрокаВыполнения КАК СтрокаВыполнения,
		|	ВТ.ВремяВыполнения КАК ВремяВыполнения,
		|	1 КАК КоличествоВыполнений
		|ИЗ
		|	ВТ КАК ВТ
		|ИТОГИ
		|	КОЛИЧЕСТВО(КоличествоВыполнений)
		|ПО
		|	СтрокаВыполнения";
	
	Запрос.УстановитьПараметр("ТЗ",Результаты.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСтрокаВыполнения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтрокаВыполнения.Следующий() Цикл
		
		Серия = Диаграмма.Серии.Добавить(Лев(ВыборкаСтрокаВыполнения.СтрокаВыполнения, 50));
		
		Диаграмма.КоличествоТочек = Макс(Диаграмма.КоличествоТочек, ВыборкаСтрокаВыполнения.КоличествоВыполнений);
		
		ВыборкаДетальныеЗаписи = ВыборкаСтрокаВыполнения.Выбрать();
		
		НомерТочки = 0; 
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Точка = Диаграмма.Точки[НомерТочки];
		    Диаграмма.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.ВремяВыполнения); 
			
			НомерТочки = НомерТочки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ВыводРезультатов

#Область ВыводВТабличныйДокумент
Функция ЗначениеВТабличныйДокумент(Значение) Экспорт
	
	ВыводВТабличныйДокумент = НовыйВыводВТабличныйДокумент();
			
	Если ЭтоКоллекция(Значение) Тогда // Результат запроса, таблица значений, дерево значений		
		
		ВыводВТабличныйДокумент.ТабличныйДокумент.Вывести(ВыводВТабличныйДокументКонвертироватьКоллекцию(ВыводВТабличныйДокумент, Значение)
			,ВыводВТабличныйДокумент.УровеньГруппировки);		
		
	ИначеЕсли ЭтоСписок(Значение) Тогда // Массив, список значений		
		
		ВыводВТабличныйДокумент.ТабличныйДокумент.Вывести(ВыводВТабличныйДокументКонвертироватьСписок(ВыводВТабличныйДокумент, Значение));	
		
	ИначеЕсли ЭтоСтруктураСоответствие(Значение) Тогда // Структура, соответствие, фиксированные структура и соответствие
		
		ВыводВТабличныйДокумент.ТабличныйДокумент.Вывести(ВыводВТабличныйДокументКонвертироватьСтруктуруСоответствие(ВыводВТабличныйДокумент, Значение));	
		
	ИначеЕсли ЭтоПримитивыныйТип(Значение) // Строка, число, дата, булево
		Или ЭтоСсылочныйТип(Значение) Тогда 	
		
		ЯчейкаЗначения = ЯчейкаЗначения(); 

		ЯчейкаЗначения.Параметры.Значение = Строка(Значение);
		ЯчейкаЗначения.Параметры.Расшифровка = Значение;
		
		ВыводВТабличныйДокумент.ТабличныйДокумент.Вывести(ЯчейкаЗначения);
		
	Иначе
		
		ПерваяЯчейка = ВыводВТабличныйДокумент.ТабличныйДокумент.Область("R1C1");
		ПерваяЯчейка.Текст = ПредставлениеЗначения(Значение);	
		
	КонецЕсли;
	
	ВыводВТабличныйДокумент.ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();

	Возврат ВыводВТабличныйДокумент.ТабличныйДокумент;
	
КонецФункции

Функция НовыйВыводВТабличныйДокумент()

	ВыводВТабличныйДокумент = Новый Структура;	
	ВыводВТабличныйДокумент.Вставить("УровеньГруппировки", 0);
	ВыводВТабличныйДокумент.Вставить("ЦветТекстаЯчейкиСТабДокументом", WebЦвета.Синий);
	ВыводВТабличныйДокумент.Вставить("ЦветТекстаЯчейкиНеопределено", WebЦвета.СеребристоСерый);
	ВыводВТабличныйДокумент.Вставить("ЦветТекста", WebЦвета.Черный);
	ВыводВТабличныйДокумент.Вставить("ЦветОтрицательныхЗначений",  WebЦвета.Красный);
	ВыводВТабличныйДокумент.Вставить("СтрокаЗначений", Новый ТабличныйДокумент);
	ВыводВТабличныйДокумент.Вставить("ТекущаяКоллекцияСодержитМультабельныеЗначения",Ложь);
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ФиксацияСверху = 1;
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	ВыводВТабличныйДокумент.Вставить("ТабличныйДокумент", ТабличныйДокумент);

	Возврат ВыводВТабличныйДокумент;
	
КонецФункции 

Функция ВыводВТабличныйДокументКонвертироватьКоллекцию(ВыводВТабличныйДокумент, Значение)
	
	ТабличныйДокумент = ВыводВТабличныйДокументНовыйТабличныйДокументКоллекции(ВыводВТабличныйДокумент, Значение.Колонки);

	Если ТипЗнч(Значение) = Тип("РезультатЗапроса") Тогда 
		Коллекция = Значение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИначеЕсли ТипЗнч(Значение) = Тип("ДеревоЗначений") Тогда
		Коллекция = Значение.Строки;
	Иначе
		Коллекция = Значение;
	КонецЕсли;
	
	Уровень = ВыводВТабличныйДокумент.УровеньГруппировки-1;
	
	ВыводВТабличныйДокументЗаполнитьТабличныйДокументКоллекциейРекурсивно(ВыводВТабличныйДокумент, ТабличныйДокумент, Значение.Колонки, Коллекция, Уровень);		
		
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВыводВТабличныйДокументКонвертироватьСписок(ВыводВТабличныйДокумент, Значение)
	
	ЭтоСписокЗначений = (ТипЗнч(Значение) = Тип("СписокЗначений"));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	// Перед циклом увеличим счетчик уровней, после - убавим
	ВыводВТабличныйДокумент.УровеньГруппировки = ВыводВТабличныйДокумент.УровеньГруппировки+1;
	
	Для Каждого ТекущийЭлемент Из Значение Цикл
		
		Если ЭтоСписокЗначений Тогда
			ТекущееЗначение = ТекущийЭлемент.Значение;
		Иначе
			ТекущееЗначение = ТекущийЭлемент;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ЗначениеВТабличныйДокумент(ТекущееЗначение),ВыводВТабличныйДокумент.УровеньГруппировки-1);	
		
	КонецЦикла;
	
	ВыводВТабличныйДокумент.УровеньГруппировки = ВыводВТабличныйДокумент.УровеньГруппировки-1;

	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВыводВТабличныйДокументКонвертироватьСтруктуруСоответствие(ВыводВТабличныйДокумент, Значение)
	
	Колонки = Новый Массив;
	Колонки.Добавить(Новый Структура("Имя,ТипЗначения","Ключ",Новый ОписаниеТипов()));
	Колонки.Добавить(Новый Структура("Имя,ТипЗначения","Значение",Новый ОписаниеТипов()));
	
	ТабличныйДокумент = ВыводВТабличныйДокументНовыйТабличныйДокументКоллекции(ВыводВТабличныйДокумент, Колонки);

	ЯчейкаКлюча = ВыводВТабличныйДокумент.СтрокаЗначений.Область("R1C1");
	ЯчейкаЗначения = ВыводВТабличныйДокумент.СтрокаЗначений.Область("R1C2");	
			
	Для Каждого КлючИЗначение Из Значение Цикл
		
		ВыводВТабличныйДокументФорматироватьЯчейку(ВыводВТабличныйДокумент, ЯчейкаКлюча, "Ключ", КлючИЗначение.Ключ);
		ВыводВТабличныйДокументФорматироватьЯчейку(ВыводВТабличныйДокумент, ЯчейкаЗначения, "Значение", КлючИЗначение.Значение);
		
		ТабличныйДокумент.Вывести(ВыводВТабличныйДокумент.СтрокаЗначений);	
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВыводВТабличныйДокументНовыйТабличныйДокументКоллекции(ВыводВТабличныйДокумент, Колонки)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();	
		
	СтрокаЗаголовка = Новый ТабличныйДокумент;
	ЯчейкаЗаголовка = ЯчейкаЗаголовка();

	ВыводВТабличныйДокумент.СтрокаЗначений = Новый ТабличныйДокумент;
		
	НомерКолонки = 1;
	ВыводВТабличныйДокумент.ТекущаяКоллекцияСодержитМультабельныеЗначения = Ложь;
	
	Для Каждого ТекСвойство Из Колонки Цикл
		
		ФорматироватьЗаголовок(ЯчейкаЗаголовка,ТекСвойство);
		ЯчейкаЗаголовка.Параметры.Заголовок = ТекСвойство.Имя;
		СтрокаЗаголовка.Присоединить(ЯчейкаЗаголовка);
		
		Ячейка = ВыводВТабличныйДокумент.СтрокаЗначений.Область("R1C" + НомерКолонки);
		Ячейка.ЦветРамки = ЦветаСтиля.ЦветЛинииОтчета;
		Ячейка.ГраницаСверху 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		Ячейка.ГраницаСнизу 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		Ячейка.ГраницаСлева 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		Ячейка.ГраницаСправа 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		
		Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		Ячейка.Параметр = ТекСвойство.Имя;
		
		РезультатАнализа = АнализМассиваТипов(ТекСвойство.ТипЗначения.Типы());
		Если РезультатАнализа.ЕстьМультабельныеТипы Тогда
			ВыводВТабличныйДокумент.ТекущаяКоллекцияСодержитМультабельныеЗначения = Истина;
		КонецЕсли;
		
		Если РезультатАнализа.ЕстьСсылки Или РезультатАнализа.ЕстьМультабельныеТипы  Тогда
			Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
		Иначе
			Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
		КонецЕсли;

		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;  
	
	ТабличныйДокумент.Вывести(СтрокаЗаголовка,ВыводВТабличныйДокумент.УровеньГруппировки);

	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВыводВТабличныйДокументЗаполнитьТабличныйДокументКоллекциейРекурсивно(ВыводВТабличныйДокумент, ТабличныйДокумент, Колонки, ТекущаяСтрока, Уровень)
	
	Уровень = Уровень+1;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Пока ТекущаяСтрока.Следующий() Цикл
			
			ВыводВТабличныйДокументВывестиСтрокуВТабличныйДокумент(ВыводВТабличныйДокумент, ТабличныйДокумент, Колонки, ТекущаяСтрока, Уровень);
						
			ВыборкаДетали = ТекущаяСтрока.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ВыводВТабличныйДокументЗаполнитьТабличныйДокументКоллекциейРекурсивно(ВыводВТабличныйДокумент, ТабличныйДокумент, Колонки, ВыборкаДетали, Уровень);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементКоллекции Из ИтераторТаблицы(ТекущаяСтрока) Цикл
			
			ВыводВТабличныйДокументВывестиСтрокуВТабличныйДокумент(ВыводВТабличныйДокумент, ТабличныйДокумент, Колонки, ЭлементКоллекции, Уровень);
			
			Если ТипЗнч(ЭлементКоллекции) = Тип("СтрокаДереваЗначений") Тогда
				ВыводВТабличныйДокументЗаполнитьТабличныйДокументКоллекциейРекурсивно(ВыводВТабличныйДокумент, ТабличныйДокумент, Колонки, ЭлементКоллекции, Уровень);
			КонецЕсли;
					
		КонецЦикла;
		
	КонецЕсли;
	
	Уровень = Уровень-1;
	
КонецФункции

Процедура ВыводВТабличныйДокументВывестиСтрокуВТабличныйДокумент(ВыводВТабличныйДокумент, ТабличныйДокумент, Колонки, ТекущаяСтрока, Уровень);
	
	Для НомерКолонки = 1 По Колонки.Количество() Цикл
		
		Свойство = Колонки[НомерКолонки-1].Имя;
		Значение = ТекущаяСтрока[Свойство];

		Ячейка = ВыводВТабличныйДокумент.СтрокаЗначений.Область("R1C"+НомерКолонки);
		
		Если ВыводВТабличныйДокумент.ТекущаяКоллекцияСодержитМультабельныеЗначения Тогда // Медленное заполнение, с форматированием мультабельных значений
			ВыводВТабличныйДокументФорматироватьЯчейку(ВыводВТабличныйДокумент, Ячейка, Свойство, Значение);	
		Иначе // Быстрый вариант заполнения
			ВыводВТабличныйДокумент.СтрокаЗначений.Параметры[Свойство] = Значение;
			Ячейка.Расшифровка = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ВыводВТабличныйДокумент.СтрокаЗначений,Уровень);

КонецПроцедуры

Процедура ВыводВТабличныйДокументФорматироватьЯчейку(ВыводВТабличныйДокумент, Ячейка, Свойство, Значение)
	
	Ячейка.ЦветТекста = ВыводВТабличныйДокумент.ЦветТекста;
	ПредставлениеДляЯчейкиСТабДокументом = "<"+ТипЗнч(Значение)+">";
	
	Если ЭтоКоллекция(Значение)
		Или ЭтоСписок(Значение) 
		Или ТипЗнч(Значение) = Тип("Структура") Тогда
		
		ВыводВТабличныйДокумент.СтрокаЗначений.Параметры[Свойство] 	= ПредставлениеДляЯчейкиСТабДокументом;
		
		Ячейка.ЦветТекста = ВыводВТабличныйДокумент.ЦветТекстаЯчейкиСТабДокументом;
		
		ТекущаяСтрокаЗначений = ВыводВТабличныйДокумент.СтрокаЗначений;
		Ячейка.Расшифровка = ЗначениеВТабличныйДокумент(Значение);
		ВыводВТабличныйДокумент.СтрокаЗначений = ТекущаяСтрокаЗначений;
		
		ВыводВТабличныйДокумент.ТекущаяКоллекцияСодержитМультабельныеЗначения = Истина; 
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
		
		Возврат;
		
	КонецЕсли;
	
	Если Значение = Null Тогда
		ВыводВТабличныйДокумент.СтрокаЗначений.Параметры[Свойство] = "NULL";
		Ячейка.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Ячейка.ЦветТекста               = ВыводВТабличныйДокумент.ЦветТекстаЯчейкиНеопределено;
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
		Возврат;
	КонецЕсли;

	Ячейка.Расшифровка = Значение;
	ВыводВТабличныйДокумент.СтрокаЗначений.Параметры[Свойство]	= Значение;
	
	Если ЭтоПримитивыныйТип(Значение) Тогда
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	Иначе
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
	КонецЕсли;
		
КонецПроцедуры

#Область ФорматированиеТабличногоДокумента

Процедура ФорматироватьЗаголовок(Ячейка, Колонка)
	
	Типы = Колонка.ТипЗначения.Типы();
	ТекстЗаголовка = Колонка.Имя;
	
	ШиринаКолонки = МинимальнаяШиринаКолонки();
	// Сравним с длиной заголовка
	ШиринаКолонки = Макс(ШиринаКолонки,СтрДлина(ТекстЗаголовка)+1);
	
	Для Каждого ТекущийТип Из Типы Цикл
		ШиринаТипа = ШиринаКолонкиПоТипу(ТекущийТип);
		ШиринаКолонки = Макс(ШиринаКолонки,ШиринаТипа);
	КонецЦикла;
	
	ШиринаКолонки = Мин(ШиринаКолонки,МаксимальнаяШиринаКолонки());
	
	Ячейка.Области.ЯчейкаЗаголовка.ШиринаКолонки = ШиринаКолонки;			
			
КонецПроцедуры

Функция МинимальнаяШиринаКолонки()
	Возврат 9;
КонецФункции

Функция МаксимальнаяШиринаКолонки()
	Возврат 100;
КонецФункции

Функция ШиринаКолонкиПоТипу(Тип)
	
	Ширина = МинимальнаяШиринаКолонки(); 
	
	Если Тип = Тип("Дата") Тогда
		Ширина = 15;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Ширина = 40;
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Ширина = 25;
	ИначеЕсли Тип = Тип("ТаблицаЗначений") Тогда
		Ширина = 15;
	ИначеЕсли Тип = Тип("РезультатЗапроса") Тогда
		Ширина = 16;
	КонецЕсли;
	
	Возврат Ширина;
	
КонецФункции

Функция ЯчейкаЗаголовка()
	Возврат ПолучитьМакет("ОформлениеРезультата").ПолучитьОбласть("ЯчейкаЗаголовка");
КонецФункции

Функция ЯчейкаЗначения()
	Возврат ПолучитьМакет("ОформлениеРезультата").ПолучитьОбласть("ЯчейкаЗначения");
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Конвертация

Функция ЗначениеВПроизвольнуюКоллекцию(Значение, Массив = Неопределено, ТекущаяКоллекция = Неопределено) Экспорт
	
	Если Массив = Неопределено Тогда
		Массив = Новый Массив;
	КонецЕсли;

	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("ХранилищеЗначения") Тогда
		Значение = Значение.Получить();
	КонецЕсли;
	
	Если ТипЗначения = Тип("ТаблицаЗначений")
		Или ТипЗнч(Значение) = Тип("ДеревоЗначений") Тогда		
		
		Массив.Добавить(Значение);	
		
	ИначеЕсли ТипЗначения = Тип("РезультатЗапроса") Тогда 
		
		Массив.Добавить(Значение.Выгрузить());
		
	ИначеЕсли ЭтоСписок(Значение) Тогда // Массив, список значений, РолиПользователя		
		
		СписокВТаблицуЗначений(Массив, Значение);
		
	ИначеЕсли ЭтоЗначениеПеречисления(Значение) Тогда
		
		Массив.Добавить(ПолучитьПолноеИмяПредопределенногоЗначения(Значение));
		
	ИначеЕсли ЭтоПримитивыныйТип(Значение)
		Или ЭтоСсылочныйТип(Значение)
		Или ЭтоСтруктураСоответствие(Значение)
		Или ТипЗначения = Тип("ДвоичныеДанные") 
		Или ТипЗначения = Тип("ТабличныйДокумент") 
		Или ТипЗначения = Тип("МоментВремени")
		Или ТипЗначения = Тип("РасписаниеРегламентногоЗадания")
		Или ТипЗначения = Тип("УникальныйИдентификатор")
		Или ТипЗначения = Тип("Цвет") 
		Или ТипЗначения = Тип("ПользовательИнформационнойБазы") Тогда
		
		Массив.Добавить(Значение);
			
	ИначеЕсли ТипЗначения = Тип("ОписаниеТипов") 
		Или ТипЗначения = Тип("Тип") Тогда
		
		Массив.Добавить(ПредставлениеЗначения(Значение));
			
	Иначе
		
		Массив.Добавить("Не поддерживается вывод значения типа <" + ТипЗначения + ">");
		
	КонецЕсли; 
	
	Возврат Массив;
	
КонецФункции

Функция ЗначениеВТаблицуЗначений(Значение, Массив = Неопределено, ТекущаяКоллекция = Неопределено) Экспорт
	
	Если Массив = Неопределено Тогда
		Массив = Новый Массив;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
		Значение = Значение.Получить();
	КонецЕсли;
		
	Если ЭтоКоллекция(Значение) Тогда // Результат запроса, таблица значений, дерево значений		
		
		Массив.Добавить(КоллекциюВТаблицуЗначений(Значение));		

	Иначе
		
		ЗначениеВПроизвольнуюКоллекцию(Значение, Массив);
		
	КонецЕсли; 
	
	Возврат Массив;
	
КонецФункции

Функция ЗначениеВДеревоЗначений(Значение, Массив = Неопределено, ТекущаяКоллекция = Неопределено) Экспорт
	
	Если Массив = Неопределено Тогда
		Массив = Новый Массив;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
		Значение = Значение.Получить();
	КонецЕсли;
		
	Если ЭтоКоллекция(Значение) Тогда // Результат запроса, таблица значений, дерево значений		
		
		Массив.Добавить(КоллекциюВДерево(Значение));		
		
	Иначе	
		
		ЗначениеВПроизвольнуюКоллекцию(Значение, Массив);
		
	КонецЕсли; 
	
	Возврат Массив;
	
КонецФункции

Функция КоллекциюВДерево(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("РезультатЗапроса") Тогда 
		Возврат Значение.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		Возврат Значение;		
	КонецЕсли;
	
КонецФункции

Функция КоллекциюВТаблицуЗначений(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("РезультатЗапроса") Тогда 
		Возврат Значение.Выгрузить();
	ИначеЕсли ТипЗнч(Значение) = Тип("ДеревоЗначений") Тогда
		
		ТаблицаЗначений = Новый ТаблицаЗначений;
		
		Для Каждого Колонка Из Значение.Колонки Цикл
			ТаблицаЗначений.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
		КонецЦикла;
		
		ДополнитьКоллекцию(ТаблицаЗначений, Значение);

		Возврат ТаблицаЗначений;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция СписокВТаблицуЗначений(МассивКВыводу, Значение) Экспорт
	
	// Примитивные типы поместим в ТЗ с одной колонкой, осталное - в общий массив.
	ЭтоСписокЗначений = (ТипЗнч(Значение) = Тип("СписокЗначений"));
	
	Таблица = Новый ТаблицаЗначений;
	ИмяКолонки = СтрЗаменить(ТРег(ТипЗнч(Значение)), " ", "");
	ОписаниеТипаКолонки = Неопределено;
	
	// Укажем тип значений. Пригодится, если значение нужно будет расшифровывать.
	Если КоличествоЗначенийКоллекции(Значение) > 0 Тогда
		
		Если ЭтоСписокЗначений Тогда
			ТекущееЗначение = Значение[0].Значение;
		ИначеЕсли (ТипЗнч(Значение) = Тип("РолиПользователя")) Тогда
			ТекущееЗначение = Метаданные.Роли[0];	
		Иначе
			ТекущееЗначение = Значение[0];
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТекущееЗначение));
		
		ОписаниеТипаКолонки = Новый ОписаниеТипов();
		ОписаниеТипаКолонки = Новый ОписаниеТипов(ОписаниеТипаКолонки, МассивТипов);
		
	КонецЕсли;
	
	Таблица.Колонки.Добавить(ИмяКолонки, ОписаниеТипаКолонки);
	
	Для Каждого ТекущийЭлемент Из Значение Цикл
		
		Если ЭтоСписокЗначений Тогда
			ТекущееЗначение = ТекущийЭлемент.Значение;
		Иначе
			ТекущееЗначение = ТекущийЭлемент;
		КонецЕсли;
		
		Если ЭтоКоллекция(ТекущееЗначение) Или ЭтоСписок(ТекущееЗначение) Тогда	
			ЗначениеВТаблицуЗначений(ТекущееЗначение, МассивКВыводу);
		Иначе				
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока[ИмяКолонки] = ТекущееЗначение;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Таблица.Количество() > 0 Тогда
		МассивКВыводу.Добавить(Таблица);
	КонецЕсли;

КонецФункции

Функция СтруктуруВТаблицуЗначений(МассивКВыводу, Значение) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ключ");
	Таблица.Колонки.Добавить("Значение");
	//МассивТипов = Новый Массив;
	
	Для Каждого КлючИЗначение Из Значение Цикл
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(),КлючИЗначение);	
		
		//Если МассивТипов.Найти(ТипЗнч(КлючИЗначение.Значение)) = Неопределено Тогда 
		//	МассивТипов.Добавить(ТипЗнч(КлючИЗначение.Значение));
		//КонецЕсли;
		
	КонецЦикла;
	
	//Таблица.Колонки.Значение.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
	
	МассивКВыводу.Добавить(Таблица);

КонецФункции

Функция ДанныеФормыВЗначениеБезТипа(Данные) Экспорт
	
	Если ТипЗнч(Данные) = Тип("ДанныеФормыДерево") Тогда
		Тип = Тип("ДеревоЗначений"); 	
	Иначе
		Тип = Тип("ТаблицаЗначений");
	КонецЕсли;
	
	Возврат ДанныеФормыВЗначение(Данные, Тип);
	
КонецФункции

#КонецОбласти

#Область ВыводРеквизитовФормы
Процедура ДобавитьМассивЗначенийНаФому(Форма, ГруппаФормы, МассивЗначений, ДекорацияНетДанных = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
		
	Если ДекорацияНетДанных <> Неопределено Тогда
		ДекорацияНетДанных.Видимость = МассивЗначений.Количество() = 0;
	КонецЕсли;

	// Удалим предыдущие данные
	УдалитьДобавленныеРеквизитыФормы(Форма, ГруппаФормы);
	 
	// Добавляем реквизиты
	МассивНовыхРеквизитов = Новый Массив;
	
	МассивТиповДляРасшифровки = Новый Массив;	
	МассивТиповДляРасшифровки.Добавить(Тип("ХранилищеЗначения"));
	МассивТиповДляРасшифровки.Добавить(Тип("ТаблицаЗначений"));
	МассивТиповДляРасшифровки.Добавить(Тип("ДеревоЗначений"));
	МассивТиповДляРасшифровки.Добавить(Тип("ДвоичныеДанные"));
	МассивТиповДляРасшифровки.Добавить(Тип("Структура"));
	МассивТиповДляРасшифровки.Добавить(Тип("Массив"));
	МассивТиповДляРасшифровки.Добавить(Тип("Соответствие"));
	МассивТиповДляРасшифровки.Добавить(Тип("ФиксированнаяСтруктура"));	
	МассивТиповДляРасшифровки.Добавить(Тип("ФиксированныйМассив"));
	МассивТиповДляРасшифровки.Добавить(Тип("ФиксированноеСоответствие"));
	МассивТиповДляРасшифровки.Добавить(Тип("МоментВремени"));
	МассивТиповДляРасшифровки.Добавить(Тип("Тип"));		
	МассивТиповДляРасшифровки.Добавить(Тип("РасписаниеРегламентногоЗадания"));		
	МассивТиповДляРасшифровки.Добавить(Тип("ПользовательИнформационнойБазы"));		
	МассивТиповДляРасшифровки.Добавить(Тип("РолиПользователя"));		
	МассивТиповДляРасшифровки.Добавить(Тип("ОбъектМетаданных"));		
		
	СчетчикТаблиц = 0; СчетчикПолей = 0;
	
	Для Каждого Элемент Из МассивЗначений Цикл	
		ДобавитьРеквизитыЗначенияНаФорму(Форма, ГруппаФормы, МассивНовыхРеквизитов, Элемент, СчетчикТаблиц, СчетчикПолей);	
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивНовыхРеквизитов);

	ХранилищеНеотображаемыхЗначений = Новый Соответствие;
	
	// Загружаем таблицы и создаем элементы
	СчетчикТаблиц = 0; СчетчикПолей = 0;
	Для Каждого Значение Из МассивЗначений Цикл	
		ДобавитьЭлементРезультатаНаФорму(Форма, ГруппаФормы, МассивЗначений, Значение, СчетчикТаблиц, СчетчикПолей);	
	КонецЦикла;
	
	Форма.АдресХранилищаЗначений = ПоместитьВоВременноеХранилище(ХранилищеНеотображаемыхЗначений, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Процедура УдалитьДобавленныеРеквизитыФормы(Форма, ГруппаФормы) Экспорт
	
	Элементы = Форма.Элементы;

	// Удалим предыдущие данные
	МассивЭлементовКУдалению = Новый Массив;
	
	Для Каждого Элемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		МассивЭлементовКУдалению.Добавить(Элемент.ПутьКДанным);
	КонецЦикла;
	
	Для Каждого Элемент Из МассивЭлементовКУдалению Цикл
		Элементы.Удалить(Элементы[Элемент]);
	КонецЦикла;

	Форма.ИзменитьРеквизиты(,МассивЭлементовКУдалению);

КонецПроцедуры

Процедура ДобавитьРеквизитыЗначенияНаФорму(Форма, ГруппаФормы, МассивНовыхРеквизитов, Значение, СчетчикТаблиц = 0, СчетчикПолей = 0);
		
	Если ПоддерживаетсяВыводКоллекции(Значение) Тогда
		
		ИмяРеквизита = ПолучитьИмяРеквизита(ГруппаФормы, "Таблица", СчетчикТаблиц);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Значение));
		
		РеквизитТаблица = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов(МассивТипов));
		МассивНовыхРеквизитов.Добавить(РеквизитТаблица);
			
		Для Каждого Колонка Из Значение.Колонки Цикл	
			ДобавитьРеквизитНаФорму(МассивНовыхРеквизитов, Колонка.ТипЗначения.Типы(), Колонка.Имя, ИмяРеквизита);
		КонецЦикла;	
		
	ИначеЕсли ПоддерживаетсяВыводЗначенийСвойств(Значение) Тогда
		
		ВыводЗначений = НовыйВыводЗначенийСвойств(); 
		ВыводЗначенийСвойствЗаполнитьДеревоСвойств(Форма, ВыводЗначений.Дерево, Значение);
		ДобавитьРеквизитыЗначенияНаФорму(Форма, ГруппаФормы, МассивНовыхРеквизитов, ВыводЗначений.Дерево);

	ИначеЕсли ТипЗнч(Значение) = Тип("ТабличныйДокумент")
		Или ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда 
		
		ИмяРеквизита = ПолучитьИмяРеквизита(ГруппаФормы, "Реквизит", СчетчикПолей);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Значение));
		
		ДобавитьРеквизитНаФорму(МассивНовыхРеквизитов, МассивТипов, ИмяРеквизита);

	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитНаФорму(МассивНовыхРеквизитов, ИсходныйМассивТипов, ИмяРеквизита, Родитель = "");
	
	МассивТипов = Новый Массив;
	
	Если ИсходныйМассивТипов.Количество() = 0 Тогда
		// Если внутри окажется неотображаемый тип, то не удастся передать на клиент.
		МассивТипов.Добавить(Тип("Строка"));
	КонецЕсли;
	
	Для Каждого Тип Из ИсходныйМассивТипов Цикл
		
		Если МассивТиповДляРасшифровки.Найти(Тип) <> Неопределено Тогда
			
			РеквизитПредставления = Новый РеквизитФормы(ПолучитьУникальноеИмяПоляПредставление(ИмяРеквизита), Новый ОписаниеТипов("Строка"), Родитель, ИмяРеквизита);
			МассивНовыхРеквизитов.Добавить(РеквизитПредставления);
			МассивТипов.Добавить(Тип("УникальныйИдентификатор"));
			Прервать;
			
		Иначе
			МассивТипов.Добавить(Тип);
		КонецЕсли;	
		
	КонецЦикла;
	
	Реквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов(МассивТипов), Родитель, ИмяРеквизита);
	МассивНовыхРеквизитов.Добавить(Реквизит);	

КонецПроцедуры

#Область ЭлементыФормы
Функция ДобавитьЭлементРезультатаНаФорму(Форма, ГруппаФормы, МассивЗначений, Значение, СчетчикТаблиц = 0, СчетчикПолей = 0)
	
	Элементы = Форма.Элементы;
	ТипЗначения = ТипЗнч(Значение);
	
	Если ПоддерживаетсяВыводКоллекции(Значение) Тогда
		
		ИмяРеквизита = ПолучитьИмяРеквизита(ГруппаФормы, "Таблица", СчетчикТаблиц);
		
		// Запомним исходные колонки и добавим колонки представлений для корректной работы метода ЗначениеВРеквизитФормы
		ОписанияКолонок = Новый Массив;
		ДобавленныеКолонки = Новый Массив; 
		КолонкиФормы = Форма.РеквизитФормыВЗначение(ИмяРеквизита).Колонки;
		
		Для Каждого Колонка Из КолонкиФормы Цикл	
			КолонкаИсходная = Значение.Колонки.Найти(Колонка.Имя);	
			Если КолонкаИсходная = Неопределено Тогда
				ДобавленныеКолонки.Добавить(Колонка);
			Иначе 
				ОписанияКолонок.Добавить(Новый Структура("Имя, Типы", КолонкаИсходная.Имя, КолонкаИсходная.ТипЗначения.Типы()));
			КонецЕсли;	
		КонецЦикла;

		Для Каждого Колонка Из ДобавленныеКолонки Цикл 
			Значение.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		
		// Помещаем данные на форму. 
		Форма.ЗначениеВРеквизитФормы(Значение, ИмяРеквизита);
		
		// Элемент таблицы
		ЭлементТаблица = Элементы.Добавить(ИмяРеквизита,Тип("ТаблицаФормы"), ГруппаФормы);
		ЭлементТаблица.ПутьКДанным = ИмяРеквизита;
		ЭлементТаблица.Отображение = ОтображениеТаблицы.Список;
		ЭлементТаблица.ИзменятьСоставСтрок = Ложь;
		ЭлементТаблица.ИзменятьПорядокСтрок = Ложь;
		ЭлементТаблица.УстановитьДействие("Выбор", "Подключаемый_ВыборРезультата");

		Если ТипЗначения = Тип("ДеревоЗначений") Тогда
			ЭлементТаблица.Отображение = ОтображениеТаблицы.Дерево;	
			ЭлементТаблица.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		КонецЕсли;
		
		// Команды таблицы
		ДобавитьКомандуФормы(Форма, ИмяРеквизита, "Подключаемый_ВыборРезультатаКоманда", ЭлементТаблица);
		
		Элемент = Элементы.Добавить(ИмяРеквизита + "ПоказатьСведенияТаблицы", 
			Тип("КнопкаФормы"), 
			ЭлементТаблица.КоманднаяПанель);
		
		Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Элемент.ИмяКоманды = ИмяРеквизита;
		Элемент.Заголовок = ПредставлениеЗначения(Значение);
		
		// Команда ПоказатьЗначениеВОтдельномОкне
		ИмяКоманды = ИмяРеквизита + "ПоказатьЗначениеВОтдельномОкне";
		ДобавитьКомандуФормы(Форма, ИмяКоманды, "Подключаемый_ПоказатьЗначениеВОтдельномОкне", ЭлементТаблица);

		Элемент = Элементы.Добавить(ИмяКоманды, 
			Тип("КнопкаФормы"), 
			ЭлементТаблица.КоманднаяПанель);
		
		Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Элемент.ИмяКоманды = ИмяКоманды;
		Элемент.Заголовок = "Показать значение в отдельном окне"; 
		Элемент.Картинка = БиблиотекаКартинок.Свойства;
		Элемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
		// Колонки таблицы
		Для Каждого Колонка Из ОписанияКолонок Цикл
			ДобавитьЭлементНаФорму(Форма, ЭлементТаблица, МассивЗначений, Значение, Колонка.Типы, Колонка.Имя, ИмяРеквизита);			
		КонецЦикла;
		
		Возврат ЭлементТаблица;
		
	ИначеЕсли ПоддерживаетсяВыводЗначенийСвойств(Значение) Тогда
		 
		ЭлементДеревоСвойствРезультата = ДобавитьЭлементРезультатаНаФорму(Форма, ГруппаФормы, МассивЗначений, ВыводЗначений.Дерево, СчетчикТаблиц);
		ЭлементДеревоСвойствРезультата.КоманднаяПанель.ПодчиненныеЭлементы[ЭлементДеревоСвойствРезультата.Имя + "ПоказатьЗначениеВОтдельномОкне"].Видимость = Ложь;
	    ЭлементДеревоСвойствРезультата.УстановитьДействие("ПередРазворачиванием", "Подключаемый_РезультатПередРазворачиванием");
		ЭлементДеревоСвойствРезультата.ПодчиненныеЭлементы[ЭлементДеревоСвойствРезультата.Имя + "ГиперссылкаЯчейки"].Видимость = Ложь;
		// TODO Добавить на форму условное оформление для значения по колонке ГиперссылкаЯчейки
		Возврат ЭлементДеревоСвойствРезультата;
		
	ИначеЕсли ТипЗначения = Тип("ДвоичныеДанные") Тогда 
			
		ИмяРеквизита = ПолучитьИмяРеквизита(ГруппаФормы, "Реквизит", СчетчикПолей);
		Форма[ИмяРеквизита] = Значение;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗначения);
		
		Возврат ДобавитьЭлементНаФорму(Форма, ГруппаФормы, МассивЗначений, Значение, МассивТипов, ИмяРеквизита);

	ИначеЕсли ТипЗначения = Тип("ТабличныйДокумент") Тогда 
		
		ИмяРеквизита = ПолучитьИмяРеквизита(ГруппаФормы, "Реквизит", СчетчикПолей);
		Форма[ИмяРеквизита] = Значение;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗначения);
		
		НовыйЭлемент = ДобавитьЭлементНаФорму(Форма, ГруппаФормы, МассивЗначений, Значение, МассивТипов, ИмяРеквизита);	
	    НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
		
		Возврат НовыйЭлемент;

	КонецЕсли;

КонецФункции

Функция ДобавитьЭлементНаФорму(Форма, ГруппаФормы, МассивЗначений, ТекущееЗначение, МассивТипов, ИмяЭлемента, ИмяТаблицы = "")

	Элементы = Форма.Элементы;
	
	НовыйЭлемент = Элементы.Добавить(ИмяТаблицы+ИмяЭлемента,Тип("ПолеФормы"),ГруппаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	Если МассивЗначений.Количество() = 1 И ПустаяСтрока(ИмяТаблицы) Тогда
		НовыйЭлемент.Заголовок = "Результат";
	КонецЕсли;
		
	ЕстьНеотображаемые = МассивТиповСодержитНеотображаемыеТипы(МассивТипов);
		
	Если ЕстьНеотображаемые Тогда		
		// Заполним представления
		НовыйЭлемент.ТолькоПросмотр = Истина;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
				
		Если ПустаяСтрока(ИмяТаблицы) Тогда
			
			НовыйЭлемент.Гиперссылка = Истина;
			НовыйЭлемент.ПутьКДанным = ПолучитьУникальноеИмяПоляПредставление(ИмяЭлемента);	
			ДобавитьНеотображаемыйЭлементФормы(ХранилищеНеотображаемыхЗначений, Форма, ИмяЭлемента, ТекущееЗначение)
				
		Иначе
			
			НовыйЭлемент.ГиперссылкаЯчейки = Истина;
			НовыйЭлемент.ПутьКДанным = ИмяТаблицы + "." + ПолучитьУникальноеИмяПоляПредставление(ИмяЭлемента);
			ДобавитьНеотображаемыеКолонкиКоллекцииФормыРекурсивно(Форма[ИмяТаблицы], ТекущееЗначение, ИмяЭлемента);
			НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_ВыборРезультата");
		
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(ИмяТаблицы) Тогда
			НовыйЭлемент.ПутьКДанным = ИмяЭлемента;
		Иначе
			НовыйЭлемент.ПутьКДанным = ИмяТаблицы + "." + ИмяЭлемента;
		КонецЕсли;
	
	КонецЕсли;

	Возврат НовыйЭлемент;
	
КонецФункции

Процедура ДобавитьНеотображаемыеКолонкиКоллекцииФормыРекурсивно(КоллекцияФормы, ИсходноеЗначение, ИмяЭлемента)
	
	ИндексСтроки = 0;
	
	Для Каждого СтрокаФормы Из ИтераторТаблицы(КоллекцияФормы) Цикл
		
		ЗначениеПоля = ИтераторТаблицы(ИсходноеЗначение)[ИндексСтроки][ИмяЭлемента];
		
		ДобавитьНеотображаемыйЭлементФормы(ХранилищеНеотображаемыхЗначений, СтрокаФормы, ИмяЭлемента, ЗначениеПоля);
		
		ДочерняяСтрока = ИтераторТаблицы(ИсходноеЗначение)[ИндексСтроки]; // Строка исходного дерева
		ДобавитьНеотображаемыеКолонкиКоллекцииФормыРекурсивно(СтрокаФормы, ДочерняяСтрока, ИмяЭлемента);			
		
		ИндексСтроки = ИндексСтроки+1;				
		
	КонецЦикла;

КонецПроцедуры	
	
Процедура ДобавитьНеотображаемыйЭлементФормы(Хранилище, ВладелецПоля, ИмяЭлемента, Значение)
	
	ВладелецПоля[ПолучитьУникальноеИмяПоляПредставление(ИмяЭлемента)] = ПредставлениеЗначения(Значение);
	ИдентификаторЗначения = Новый УникальныйИдентификатор;
	ВладелецПоля[ИмяЭлемента] = ИдентификаторЗначения;
	
	Если ТипЗнч(Значение) = Тип("ОбъектМетаданных") Тогда
		НовоеЗначение = Новый ТаблицаЗначений;
		НовоеЗначение.Колонки.Добавить("Свойство");
		НовоеЗначение.Колонки.Добавить("Значение");
		НовоеЗначение.Колонки.Добавить("Тип");
		НоваяСтрока = НовоеЗначение.Добавить();
		НоваяСтрока.Свойство = "Имя";
		НоваяСтрока.Значение = Значение.Имя;
		НоваяСтрока.Тип = "Строка";
		НоваяСтрока = НовоеЗначение.Добавить();
		НоваяСтрока.Свойство = "Синоним";
		НоваяСтрока.Значение = Значение.Синоним;
		НоваяСтрока.Тип = "Строка";
		Значение = НовоеЗначение; 
	КонецЕсли;
	
	Хранилище.Вставить(ИдентификаторЗначения, НовоеЗначение);
		
КонецПроцедуры

Функция ДобавитьКомандуФормы(Форма, ИмяРеквизита, Действие, ИспользуемаяТаблица = Неопределено);
	
	Команда = Форма.Команды.Найти(ИмяРеквизита); 
	Если Команда = Неопределено Тогда
		Команда = Форма.Команды.Добавить(ИмяРеквизита);
		Команда.Действие = Действие;
	КонецЕсли;
	
	ВерсияПлатформы = ВерсияПлатформы();
		
	Если ВерсияПлатформы.Редакция = 83
		И ВерсияПлатформы.Версия > 11 Тогда
		Команда.ИспользуемаяТаблица = ИспользуемаяТаблица;
	КонецЕсли;

	Возврат Команда;
	
КонецФункции
#КонецОбласти

Функция ПолучитьИмяРеквизита(ГруппаФормы, ВидРеквизита, Счетчик);
	
	Счетчик = Счетчик + 1;
	ИмяРеквизита = ГруппаФормы.Имя + ВидРеквизита + Счетчик;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция МассивТиповСодержитНеотображаемыеТипы(МассивТипов);
	
	Для Каждого Тип Из МассивТипов Цикл
		Если МассивТиповДляРасшифровки.Найти(Тип) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ВыводЗначенийСвойств
Функция ПоддерживаетсяВыводЗначенийСвойств(Значение) Экспорт
	Возврат ЭтоСсылочныйТип(Значение)
	Или ЭтоСтруктураСоответствие(Значение)
	Или ТипЗнч(Значение) = Тип("МоментВремени")
	Или ЭтоПримитивыныйТип(Значение)
	Или ТипЗнч(Значение) = Тип("РасписаниеРегламентногоЗадания")
	Или ТипЗнч(Значение) = Тип("УникальныйИдентификатор")
	Или ТипЗнч(Значение) = Тип("Цвет")
	Или ТипЗнч(Значение) = Тип("ПользовательИнформационнойБазы");
КонецФункции

Функция НовыйВыводЗначенийСвойств()
	
	ВыводЗначений = Новый Структура;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("ТаблицаЗначений"));
	МассивТипов.Добавить(Тип("РасписаниеРегламентногоЗадания"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("РолиПользователя"));

	ТипВсеСсылки = Справочники.ТипВсеСсылки();
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Документы.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыОбмена.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, ПланыСчетов.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Перечисления.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, БизнесПроцессы.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Новый ОписаниеТипов(ТипВсеСсылки, Задачи.ТипВсеСсылки().Типы());

	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Свойство", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Значение", Новый ОписаниеТипов(ТипВсеСсылки, МассивТипов));
	Дерево.Колонки.Добавить("ГиперссылкаЯчейки", Новый ОписаниеТипов("Булево"));

	ВыводЗначений.Вставить("Дерево", Дерево);
	ВыводЗначений.Вставить("МассивНовыхРеквизитов", Новый Массив);
	
	Возврат ВыводЗначений;
	
КонецФункции

Процедура ВыводЗначенийСвойствЗаполнитьДеревоСвойств(Форма, Узел, Значение, ВыводитьПредставления = Ложь)
	
	Если ИтераторТаблицы(Узел).Количество() > 0 Тогда // Узел уже развернут
		Возврат
	КонецЕсли;
		
	Если ЭтоКореньДерева(Узел) Тогда
		СтрокаЗначения = ВыводЗначенийСвойствВывестиЗначение(Форма, Узел, "Значение", Значение, , ВыводитьПредставления);
		НовыйУзел = СтрокаЗначения;
	Иначе
		НовыйУзел = Узел; 
	КонецЕсли;

	Если ЭтоСсылочныйТип(Значение) Тогда
		
		Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы().Найти(ТипЗнч(Значение)) <> Неопределено Тогда
			Возврат; // TODO нет метода Метаданные
		КонецЕсли;
		
		МетаданныеОбъекта = Значение.Метаданные();
		
		Если Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда
			Возврат
		КонецЕсли;
		
		ИсточникРеквизитов = Новый Массив;
		ИсточникРеквизитов.Добавить(МетаданныеОбъекта.Реквизиты);
		ИсточникРеквизитов.Добавить(МетаданныеОбъекта.СтандартныеРеквизиты);
		
		ВыводЗначенийСвойствВывестиЗначение(Форма, НовыйУзел, "УникальныйИдентификатор", Значение.УникальныйИдентификатор(), , ВыводитьПредставления);

		Для Каждого Реквизиты Из ИсточникРеквизитов Цикл
			Для Каждого Реквизит Из Реквизиты Цикл			
				ВыводЗначенийСвойствВывестиЗначение(Форма, НовыйУзел,  Реквизит.Имя, Значение[Реквизит.Имя], Реквизит.Тип, ВыводитьПредставления);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл	
			Таблица = Значение[ТабличнаяЧасть.Имя].Выгрузить();
			ВыводЗначенийСвойствВывестиЗначение(Форма, НовыйУзел, ТабличнаяЧасть.Имя, Таблица, , ВыводитьПредставления);
		КонецЦикла;
		
	ИначеЕсли ЭтоСтруктураСоответствие(Значение) Тогда
		
		Для Каждого КлючИЗначение Из Значение Цикл
			ВыводЗначенийСвойствВывестиЗначение(Форма, НовыйУзел, КлючИЗначение.Ключ, КлючИЗначение.Значение, , ВыводитьПредставления);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда
		
		ВыводЗначенийСвойствВывестиЗначение(Форма, НовыйУзел, "Дата", Значение.Дата, , ВыводитьПредставления);
		ВыводЗначенийСвойствВывестиЗначение(Форма, НовыйУзел, "Ссылка", Значение.Ссылка, , ВыводитьПредставления);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("РасписаниеРегламентногоЗадания") Тогда
		
		СписокСвойств = "ВремяЗавершения,ВремяКонца,ВремяНачала,ДатаКонца,ДатаНачала,ДеньВМесяце,ДеньНеделиВМесяце,ДетальныеРасписанияДня,ДниНедели,ИнтервалЗавершения,Месяцы,ПаузаПовтора,ПериодНедель,ПериодПовтораВТечениеДня,ПериодПовтораДней";
		Для Каждого Свойство Из Вычислить("СтрРазделить(СписокСвойств,"","")") Цикл
			ВыводЗначенийСвойствВывестиЗначение(Форма, НовыйУзел, Свойство, Значение[Свойство], , ВыводитьПредставления);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ПользовательИнформационнойБазы") Тогда
		
		СписокСвойств = "АутентификацияOpenID,АутентификацияОС,АутентификацияСтандартная,ЗапрещеноИзменятьПароль,ЗащитаОтОпасныхДействий,Имя,ОсновнойИнтерфейс,ПарольУстановлен,ПоказыватьВСпискеВыбора,ПолноеИмя,ПользовательОС,РазделениеДанных,РежимЗапуска,Роли,СохраняемоеЗначениеПароля,УникальныйИдентификатор,Язык";
		Для Каждого Свойство Из Вычислить("СтрРазделить(СписокСвойств,"","")") Цикл
			ВыводЗначенийСвойствВывестиЗначение(Форма, НовыйУзел, Свойство, Значение[Свойство], , ВыводитьПредставления);
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Функция ВыводЗначенийСвойствВывестиЗначение(Форма, Узел, Свойство, Значение, ОписаниеТипа = Неопределено, ВыводитьПредставления = Ложь)
	
	Строки = ИтераторТаблицы(Узел);
	
	НоваяСтрока = Строки.Добавить();
	НоваяСтрока.Свойство = Свойство;
	
	Если ОписаниеТипа = Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(ТипЗнч(Значение));
		ОписаниеТипа = Новый ОписаниеТипов(Массив);
	КонецЕсли;
	
	НоваяСтрока.Тип = ПредставлениеТипов(ОписаниеТипа);	
		
	Если ВыводитьПредставления Тогда	
		ДобавитьНеотображаемыйЭлементФормы(ХранилищеНеотображаемыхЗначений, НоваяСтрока, "Значение", Значение);
	Иначе		
		НоваяСтрока.Значение = Значение;	
	КонецЕсли;
	
	НоваяСтрока.ГиперСсылкаЯчейки = ПоддерживаетсяВыводЗначенийСвойств(Значение) Или ПоддерживаетсяВыводКоллекции(Значение);
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ВыводЗначенийСвойствРазвернутьЗначениеДерева(Форма, ДеревоЗначений, ИдентификаторСтроки, Отказ) Экспорт
	
	ТекущаяСтрока = ДеревоЗначений.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ХранилищеНеотображаемыхЗначений = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаЗначений);
	
	Для Каждого ПодчиненнаяСтрока Из ИтераторТаблицы(ТекущаяСтрока) Цикл
		
		Значение = ХранилищеНеотображаемыхЗначений.Получить(ПодчиненнаяСтрока.Значение);
		
		Если ПоддерживаетсяВыводЗначенийСвойств(Значение) Тогда		
			ВыводЗначенийСвойствЗаполнитьДеревоСвойств(Форма, ПодчиненнаяСтрока, Значение, Истина);	
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.АдресХранилищаЗначений = ПоместитьВоВременноеХранилище(ХранилищеНеотображаемыхЗначений, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ВыводКоллекции
Функция ПоддерживаетсяВыводКоллекции(Значение) Экспорт
	Возврат ТипЗнч(Значение) = Тип("ТаблицаЗначений")
		Или ТипЗнч(Значение) = Тип("ДеревоЗначений")
		Или ТипЗнч(Значение) = Тип("РолиПользователя");
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеЗначения(Значение)
	
	Представление = "";
	ТипЗначения = ТипЗнч(Значение);
	
	Если ЭтоКоллекция(Значение) Тогда
		Представление = Строка(ТипЗнч(Значение)) + " ("+ИтераторТаблицы(Значение).Количество()+")";	
	ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
		Представление = "Хранилище значения ("+ТипЗнч(Значение.Получить())+")";
	ИначеЕсли ТипЗначения = Тип("ДвоичныеДанные") Тогда
		Представление = "Двоичные данные (" + Значение.Размер() + ")";
	ИначеЕсли ТипЗначения = Тип("ОписаниеТипов") Тогда
		Представление = "Описание типов: " + ПредставлениеТипов(Значение);
	ИначеЕсли ТипЗначения = Тип("Массив") Тогда
		Представление = "Массив: " + Значение.Количество();
	ИначеЕсли ТипЗначения = Тип("РолиПользователя") Тогда
		Представление = "Роли пользователя: " + КоличествоЗначенийКоллекции(Значение);
	ИначеЕсли ТипЗначения = Тип("МоментВремени")   
		Или ЭтоПримитивыныйТип(Значение) 
		Или ЭтоСсылочныйТип(Значение) 
		Или ТипЗначения = Тип("УникальныйИдентификатор") 
		Или ТипЗначения = Тип("РасписаниеРегламентногоЗадания") 
		Или ТипЗначения = Тип("ПользовательИнформационнойБазы")
		Или ТипЗначения = Тип("ОбъектМетаданных") Тогда
		Представление = Строка(Значение);
	ИначеЕсли ТипЗначения = Тип("Тип") Тогда
		
		Если ЭтоТипПримитивыный(Значение) Тогда			
			Массив = Новый Массив;
			Массив.Добавить(Значение);
			Описание = Новый ОписаниеТипов(Массив);
			Представление = "Тип: " + ПредставлениеТипов(Описание);
		Иначе 	
			МетаданныеТипа = Метаданные.НайтиПоТипу(Значение);
			Если МетаданныеТипа = Неопределено Тогда
				Представление = Значение;	
			Иначе
				Представление = МетаданныеТипа.ПолноеИмя();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
	Иначе
		Представление = "Не поддерживается вывод представления типа <" + ТипЗнч(Значение)+">"
	КонецЕсли;
		
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеТипов(ОписаниеТипов)
	
	МассивПредставлений = Новый Массив;
	
	Для Каждого Тип ИЗ ОписаниеТипов.Типы() Цикл
		
		Если Тип = Тип("Число") Тогда
			МассивПредставлений.Добавить("Число("+ОписаниеТипов.КвалификаторыЧисла.Разрядность+","+ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти+")");		
		ИначеЕсли Тип = Тип("Строка") Тогда
			МассивПредставлений.Добавить("Строка("+ОписаниеТипов.КвалификаторыСтроки.Длина+")");	
		ИначеЕсли Тип = Тип("Дата") Тогда
			МассивПредставлений.Добавить("Дата("+ОписаниеТипов.КвалификаторыДаты.ЧастиДаты+")");
		Иначе
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если МетаданныеТипа = Неопределено Тогда
				МассивПредставлений.Добавить(Строка(Тип));	
			Иначе
				МассивПредставлений.Добавить(МетаданныеТипа.ПолноеИмя());
			КонецЕсли;
		КонецЕсли;		
		
	КонецЦикла;
	
	Представление = "";
	
	Для Каждого ЭлементМассива Из МассивПредставлений Цикл
		Представление = ЭлементМассива + ";";
	КонецЦикла;
	
	Возврат Представление; //Вычислить("СтрСоединить(МассивПредставлений,"";"")");
	
КонецФункции

Функция ИтераторТаблицы(Значение)
	
	Если ТипЗнч(Значение) = Тип("ДеревоЗначений") Или ТипЗнч(Значение) = Тип("СтрокаДереваЗначений") Тогда 
		Возврат Значение.Строки;
	ИначеЕсли ТипЗнч(Значение) = Тип("ДанныеФормыДерево") Или ТипЗнч(Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат Значение.ПолучитьЭлементы();
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Или ТипЗнч(Значение) = Тип("ДанныеФормыКоллекция") Или ТипЗнч(Значение) = Тип("КоллекцияСтрокДереваЗначений") Тогда
		Возврат Значение;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ЭтоКореньДерева(Значение)
	Возврат ТипЗнч(Значение) = Тип("ДеревоЗначений");
КонецФункции

Функция ДополнитьКоллекцию(Приемник, Источник)
	
	Для Каждого СтрокаИсточника Из ИтераторТаблицы(Источник) Цикл
		
		СтрокаПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);	
		
		Если ЭтоДерево(Приемник) Тогда
			ДополнитьКоллекцию(ИтераторТаблицы(СтрокаПриемника), СтрокаИсточника);
		Иначе // Для случая заполнения из дерева.
			ДополнитьКоллекцию(Приемник, СтрокаИсточника);
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

Функция КоличествоЗначенийКоллекции(Значение)
	
	Количество = 0;
	Если ТипЗнч(Значение) = Тип("РолиПользователя") Тогда
		Для Каждого Роль Из Значение Цикл
			Количество = Количество + 1;
		КонецЦикла;
	Иначе
		Количество = Значение.Количество();
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

Функция ПолучитьУникальноеИмяПоляПредставление(ИмяПоля)
	
	// Обеспечение уникальности имен служебных полей представления. 
	Если ИдентификаторПредставлений = Неопределено Тогда
		ИдентификаторПредставлений = СтрЗаменить(Новый УникальныйИдентификатор,"-","");
	КонецЕсли;
	
	Возврат ИмяПоля + "Представление" + ИдентификаторПредставлений;	
	
КонецФункции

Процедура НачатьЗамер(СтрокаВыполнения);
	
	СтрокаРезультата = Результаты[ТекущееЗадание.НомерСтрокиРезультата-1];
	
	СтрокаРезультата.СтрокаВыполнения = СтрокаВыполнения;
	СтрокаРезультата.ВремяНачала = ТекущаяДатаСеанса();
	СтрокаРезультата.ВремяНачалаЧисло = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецПроцедуры

Процедура ЗакончитьЗамер();
	
	СтрокаРезультата = Результаты[ТекущееЗадание.НомерСтрокиРезультата-1];
	
	СтрокаРезультата.ВремяОкончания = ТекущаяДатаСеанса();
	СтрокаРезультата.ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - СтрокаРезультата.ВремяНачалаЧисло;
	
КонецПроцедуры

Функция ТекстЯчейкиТабличногоДокумента(ТабличныйДокумент, НомерСтроки, НомерКолонки) Экспорт
	Возврат ТабличныйДокумент.Область(НомерСтроки, НомерКолонки).Текст;
КонецФункции

Функция ВерсияПлатформы() Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	ВерсияМассив = РазложитьСтрокуВМассивПодстрок(ВерсияПлатформы,".");
	Описание = Новый ОписаниеТипов("Число");
	
	ВерсияСтруктура = Новый Структура();
	ВерсияСтруктура.Вставить("Редакция", Описание.ПривестиЗначение(ВерсияМассив[0] + ВерсияМассив[1])); 
	ВерсияСтруктура.Вставить("Версия", Описание.ПривестиЗначение(ВерсияМассив[2]));
	ВерсияСтруктура.Вставить("Сборка", Описание.ПривестиЗначение(ВерсияМассив[3]));
	
	Возврат ВерсияСтруктура;

КонецФункции // ВерсияПлатформы()

#Область ВнешнееСоединение
Функция ПолучитьПодключениеКБазе(ПараметрыПодключения) Экспорт
	
	Если ПараметрыПодключения.ВнешняяБазаФайловая Тогда
		
		Шаблон = "File=""%1"";Usr=""%2"";Pwd=""%3"";";
		СтрокаПодключения = Вычислить("СтрШаблон(Шаблон
			|,ПараметрыПодключения.ПутьКБазе
			|,ПараметрыПодключения.Пользователь
			|,ПараметрыПодключения.Пароль)");
		
	Иначе
		
		Шаблон = "Srvr=""%1"";Ref=""%2"";Usr=""%3"";Pwd=""%4"";";
		СтрокаПодключения = Вычислить("СтрШаблон(Шаблон
			|,ПараметрыПодключения.ИмяСервера
			|,ПараметрыПодключения.ИмяБазы
			|,ПараметрыПодключения.Пользователь
			|,ПараметрыПодключения.Пароль)");
		
	КонецЕсли;

	V82COMConnector = Новый COMОбъект("V83.COMConnector");
	
	Возврат V82COMConnector.Connect(СтрокаПодключения);
	
КонецФункции

Функция ВыполнитьЗапросВоВнешнейБазеНаСервере(Соединение, ТекстЗапроса, ПараметрыЗапроса, Пакет = Ложь)
	
	Запрос = Соединение.NewObject("Запрос");
	
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;

	Если Пакет Тогда
		Результат = Запрос.ВыполнитьПакет();
	Иначе
		Результат = Запрос.Выполнить();
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ОтладкаСоединения()
	
	Результат = Неопределено;
	
	Параметры = ТекущееЗадание.Параметры;
	
	// +

	// - 
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСТипами
Функция АнализМассиваТипов(МассивТипов)

	Результат = Новый Структура("ЕстьСсылки,ЕстьМультабельныеТипы",Ложь,Ложь);

	Для Каждого Тип Из МассивТипов Цикл
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли ЭтоТипКоллекция(Тип)
			Или ЭтоТипСписок(Тип) Тогда
			Результат.ЕстьМультабельныеТипы = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ЭтоПримитивыныйТип(Значение) Экспорт
		
	ТипЗнч = ТипЗнч(Значение);
	
	Возврат ЭтоТипПримитивыный(ТипЗнч);
	
КонецФункции

Функция ЭтоСсылочныйТип(Значение) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Значение));

	Возврат ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта)
	
КонецФункции

Функция ЭтоЗначениеПеречисления(Значение)
	
	МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если МетаданныеЗначения = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Метаданные.Перечисления.Содержит(МетаданныеЗначения);	
	КонецЕсли;

КонецФункции

Функция ЭтоСписок(Значение) Экспорт
	
	ТипЗнч = ТипЗнч(Значение);
	
	Возврат ЭтоТипСписок(ТипЗнч);
	
КонецФункции

Функция ЭтоКоллекция(Значение) Экспорт
			
	ТипЗнч = ТипЗнч(Значение);
		
	Возврат ЭтоТипКоллекция(ТипЗнч);
	
КонецФункции

Функция ЭтоДерево(Значение) Экспорт
	
	ТипЗнч = ТипЗнч(Значение);
	
	Возврат ЭтоТипДерево(ТипЗнч);
	
КонецФункции

Функция ЭтоСтруктураСоответствие(Значение)
	
	
	ТипЗнч = ТипЗнч(Значение);
		
	Возврат ЭтоТипСтруктураСоответствие(ТипЗнч);

КонецФункции

Функция ЭтоТипКоллекция(Тип) Экспорт
			
	Возврат (Тип = Тип("РезультатЗапроса") Или Тип = Тип("ТаблицаЗначений") Или Тип = Тип("ДеревоЗначений"));
	
КонецФункции

Функция ЭтоТипДерево(Тип) Экспорт
			
	Возврат (Тип = Тип("ДанныеФормыДерево") Или Тип = Тип("ДеревоЗначений"));
	
КонецФункции

Функция ЭтоТипСписок(Тип) Экспорт
	
	Возврат (Тип = Тип("Массив") 
	Или Тип = Тип("ФиксированныйМассив") 
	Или Тип = Тип("СписокЗначений")
	Или Тип = Тип("РолиПользователя"));
	
КонецФункции

Функция ЭтоТипПримитивыный(Тип) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("Число"));
	Массив.Добавить(Тип("Дата"));
	Массив.Добавить(Тип("Булево"));
	
	Возврат Массив.Найти(Тип) <> Неопределено;
	
КонецФункции

Функция ЭтоТипСтруктураСоответствие(Тип) Экспорт
	
	Возврат Тип = Тип("Структура") 
		Или Тип = Тип("Соответствие")
		Или Тип = Тип("ФиксированнаяСтруктура") 
		Или Тип = Тип("ФиксированноеСоответствие");
	
КонецФункции

#КонецОбласти

#Область БСП

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция БСППодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
КонецФункции

// Определяет принадлежность объекта метаданных к ссылочному типу.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект ссылочного типа.
//
Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Позиция = Вычислить("СтрНайти(ИмяОбъектаМетаданных, ""."")");
	Если Позиция > 0 Тогда 
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		Возврат ИмяБазовогоТипа = "Справочник"
			Или ИмяБазовогоТипа = "Документ"
			Или ИмяБазовогоТипа = "БизнесПроцесс"
			Или ИмяБазовогоТипа = "Задача"
			Или ИмяБазовогоТипа = "ПланСчетов"
			Или ИмяБазовогоТипа = "ПланОбмена"
			Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
			Или ИмяБазовогоТипа = "ПланВидовРасчета"
			Или ИмяБазовогоТипа = "Перечисление";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Преобразует таблицу значений в массив структур.
// Может использоваться для передачи на клиент данных в том случае, если таблица
// значений содержит только такие значения, которые могут
// быть переданы с сервера на клиент.
//
// Полученный массив содержит структуры, каждая из которых повторяет
// структуру колонок таблицы значений.
//
// Не рекомендуется использовать для преобразования таблиц значений
// с большим количеством строк.
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - исходная таблица значений.
//
// Возвращаемое значение:
//  Массив - коллекция строк таблицы в виде структур.
//
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

	
КонецФункции

// Преобразует таблицу значений в список структур.
// Может использоваться для передачи на клиент данных в том случае, если таблица
// значений содержит только такие значения, которые могут
// быть переданы с сервера на клиент.
//
// Полученный массив содержит структуры, каждая из которых повторяет
// структуру колонок таблицы значений.
//
// Не рекомендуется использовать для преобразования таблиц значений
// с большим количеством строк.
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - исходная таблица значений.
//
// Возвращаемое значение:
//  Массив - коллекция строк таблицы в виде структур.
//
Функция ТаблицаЗначенийВСписокЗначений(ТаблицаЗначений) Экспорт
	
	Список = Новый СписокЗначений;
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Список.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Список;

КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
    Знач ПропускатьПустыеСтроки = Неопределено)
 
    Результат = Новый Массив;
 
    // для обеспечения обратной совместимости
    Если ПропускатьПустыеСтроки = Неопределено Тогда
        ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
        Если ПустаяСтрока(Строка) Тогда 
            Если Разделитель = " " Тогда
                Результат.Добавить("");
            КонецЕсли;
            Возврат Результат;
        КонецЕсли;
    КонецЕсли;
    //
 
    Позиция = Найти(Строка, Разделитель);
    Пока Позиция > 0 Цикл
        Подстрока = Лев(Строка, Позиция - 1);
        Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
            Результат.Добавить(Подстрока);
        КонецЕсли;
        Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
        Позиция = Найти(Строка, Разделитель);
    КонецЦикла;
 
    Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
        Результат.Добавить(Строка);
    КонецЕсли;
 
    Возврат Результат;
 
КонецФункции

#КонецОбласти

#КонецОбласти

