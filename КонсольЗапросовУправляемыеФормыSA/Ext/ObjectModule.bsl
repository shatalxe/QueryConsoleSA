#Область ОписаниеПеременных	
Перем МакетОформления;
Перем НомерСтрокиРезультата;
Перем УровеньГруппировки;
Перем ЦветТекстаЯчейкиСТабДокументом;
Перем ЦветТекстаЯчейкиНеопределено;
Перем ЦветТекста;
Перем ЦветОтрицательныхЗначений;
Перем СтрокаЗначений;
Перем ТекущаяКоллекцияСодержитМультабельныеЗначения;

Перем МассивНеотображаемыхТипов;
Перем МассивТиповДляРасшифровки;
Перем ХранилищеНеотображаемыхЗначений;
#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ВыполнитьЗадание() Экспорт
	
	//НомерСтрокиРезультата = Результаты.Добавить().НомерСтроки;
	НомерСтрокиРезультата = КонтекстЗадания.НомерСтрокиРезультата;
	
	Возврат Вычислить(КонтекстЗадания.ИмяМетода+"()");
	
КонецФункции

Функция ВыполнитьЗапрос() Экспорт
	
	ТекстЗапроса 			= КонтекстЗадания.ТекстЗапроса;
	Параметры				= КонтекстЗадания.Параметры;
	МассивВременныхТаблиц 	= КонтекстЗадания.МассивВременныхТаблиц;
	ИмяВременнойТаблицы 	= КонтекстЗадания.ИмяВременнойТаблицы;
	Отказ					= Ложь;
	МассивОшибок			= Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Заполняем параметры с проверкой, все ли есть в таблице параметров.
	Для Каждого ОписаниеПараметра Из Запрос.НайтиПараметры() Цикл

		Параметр = ОписаниеПараметра.Имя;
		Значение = Неопределено;
		
		Если Не Параметры.Свойство(Параметр,Значение) Тогда
			Отказ = Истина;
			Сообщение = БСП_ПодставитьПараметрыВСтроку(НСтр("ru = 'Не задано значение параметра %1'"),Параметр);
			//СообщитьПользователю(Сообщение,,"Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров",,Отказ);	
			МассивОшибок.Добавить(Сообщение);
			КонтекстЗадания.Форма.Элементы.ГруппаПараметры.Показать();
			Продолжить;
		КонецЕсли;
		
		Запрос.Параметры.Вставить(Параметр,Значение);
		
	КонецЦикла;

	Если Отказ Тогда
		Возврат МассивОшибок;
	КонецЕсли;
	
	НачатьЗамер(ТекстЗапроса);
	Если КонтекстЗадания.Пакет = Истина Тогда 
		Результат = Запрос.ВыполнитьПакет();
	Иначе
		Результат = Запрос.Выполнить();
	КонецЕсли;
	ЗакончитьЗамер();
		
	Для Каждого Таблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		МассивВременныхТаблиц.Добавить(Таблица.ПолноеИмя);	
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		Возврат Запрос.МенеджерВременныхТаблиц.Таблицы[ИмяВременнойТаблицы].ПолучитьДанные()
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ВыполнитьКод() Экспорт
	
	Параметры = КонтекстЗадания.Параметры;
	Parameters = Параметры;
	
	Код = КонтекстЗадания.ТекстКода;
		
	Результат = Неопределено;
	Result = Неопределено;
	
	НачатьЗамер(Код);
	Выполнить Код;
	ЗакончитьЗамер();
	
	Если Результат = Неопределено И Result <> Неопределено Тогда
		Возврат Result;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

#Область ВыводРезультатов

Функция РезультатВТабличныйДокумент(Результат) Экспорт
	
	МакетОформления = ПолучитьМакет("ОформлениеРезультата");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ФиксацияСверху = 1;
	
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
			
	Если ЭтоКоллекция(Результат) Тогда // Результат запроса, таблица значений, дерево значений		
		
		ТабличныйДокумент.Вывести(КоллекциюВТабличныйДокумент(Результат),УровеньГруппировки);		
		
	ИначеЕсли ЭтоСписок(Результат) Тогда // Массив, список значений		
		
		ТабличныйДокумент.Вывести(СписокВТабличныйДокумент(Результат));	
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда // Структура
		
		ТабличныйДокумент.Вывести(СтруктуруВТабличныйДокумент(Результат));	
		
	ИначеЕсли ЭтоПримитивыныйТип(Результат) // Строка, число, дата, булево
		Или ЭтоСсылочныйТип(Результат) Тогда 	
		
		ЯчейкаСРасшифровкой = МакетОформления.ПолучитьОбласть("R2C1"); 

		ЯчейкаСРасшифровкой.Параметры.Содержание = Строка(Результат);
		ЯчейкаСРасшифровкой.Параметры.Расшифровка = Результат;
		
		ТабличныйДокумент.Вывести(ЯчейкаСРасшифровкой);
		
	Иначе
		
		ПерваяЯчейка = ТабличныйДокумент.Область("R1C1");
		ПерваяЯчейка.Текст = ПредставлениеРезультатаНетДанных();	
		
	КонецЕсли;
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();

	Возврат ТабличныйДокумент;
	
КонецФункции

Функция КоллекциюВТабличныйДокумент(Результат) Экспорт
	
	ТабличныйДокумент = ПодготовитьНовыйТабличныйДокументКоллекции(Результат.Колонки);

	Если ТипЗнч(Результат) = Тип("РезультатЗапроса") Тогда 
		Коллекция = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИначеЕсли ТипЗнч(Результат) = Тип("ДеревоЗначений") Тогда
		Коллекция = Результат.Строки;
	Иначе
		Коллекция = Результат;
	КонецЕсли;
	
	Уровень = УровеньГруппировки-1;
	
	СтрокаЗначений.ПолучитьОбласть("R1C1");
	
	ЗаполнитьТабличныйДокументКоллекциейРекурсивно(Результат.Колонки, ТабличныйДокумент, Коллекция, Уровень);		
		
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СписокВТабличныйДокумент(Список) Экспорт
	
	ЭтоСписокЗначений = (ТипЗнч(Список) = Тип("СписокЗначений"));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	// Перед циклом увеличим счетчик уровней, после - убавим
	УровеньГруппировки = УровеньГруппировки+1;
	
	Для Каждого ТекущийЭлемент Из Список Цикл
		
		Если ЭтоСписокЗначений Тогда
			Значение = ТекущийЭлемент.Значение;
		Иначе
			Значение = ТекущийЭлемент;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(РезультатВТабличныйДокумент(Значение),УровеньГруппировки-1);	
		
	КонецЦикла;
	
	УровеньГруппировки = УровеньГруппировки-1;

	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СтруктуруВТабличныйДокумент(Результат) Экспорт
	
	Колонки = Новый Массив;
	Колонки.Добавить(Новый Структура("Имя,ТипЗначения","Ключ",Новый ОписаниеТипов()));
	Колонки.Добавить(Новый Структура("Имя,ТипЗначения","Значение",Новый ОписаниеТипов()));
	
	ТабличныйДокумент = ПодготовитьНовыйТабличныйДокументКоллекции(Колонки);

	//ТабличныйДокумент = Новый ТабличныйДокумент;
	//
	//ОбластьСтрока = Новый ТабличныйДокумент;
	
	ЯчейкаКлюча = СтрокаЗначений.Область("R1C1");
	ЯчейкаЗначения = СтрокаЗначений.Область("R1C2");	
			
	Для Каждого КлючИЗначение Из Результат Цикл
		
		//ЯчейкаКлюча.Параметры.Заголовок = КлючИЗначение.Ключ;
		ФорматироватьЯчейку(ЯчейкаКлюча,"Ключ",КлючИЗначение.Ключ);
		ФорматироватьЯчейку(ЯчейкаЗначения,"Значение",КлючИЗначение.Значение);
		
		//ОбластьСтрока.Присоединить(ЯчейкаКлюча);
		//ОбластьСтрока.Присоединить(ЯчейкаЗначения);

		ТабличныйДокумент.Вывести(СтрокаЗначений);	
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции


Функция РезультатВПроизвольнуюКоллекцию(Результат,Массив = Неопределено,ТекущаяКоллекция = Неопределено) Экспорт
	
	Если Массив = Неопределено Тогда
		Массив = Новый Массив;
	КонецЕсли;

	Если ТипЗнч(Результат) = Тип("ХранилищеЗначения") Тогда
		Результат = Результат.Получить();
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений")
		Или ТипЗнч(Результат) = Тип("ДеревоЗначений") Тогда		
		
		Массив.Добавить(Результат);	
		
	ИначеЕсли ТипЗнч(Результат) = Тип("РезультатЗапроса") Тогда 
		
		Массив.Добавить(Результат.Выгрузить()); // ОбходРезультатаЗапроса.ПоГруппировкам
		
	ИначеЕсли ЭтоСписок(Результат) Тогда // Массив, список значений		
		
		СписокВТаблицуЗначений(Массив,Результат);
						
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
		Или ТипЗнч(Результат) = Тип("ФиксированнаяСтруктура") 
		Или ТипЗнч(Результат) = Тип("ФиксированноеСоответствие") Тогда	
		
		СтруктуруВТаблицуЗначений(Массив, Результат);	
				
	ИначеЕсли ЭтоПримитивыныйТип(Результат)
		Или ЭтоСсылочныйТип(Результат) 
		Или ТипЗнч(Результат) = Тип("ДвоичныеДанные") 
		Или ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
		
		Массив.Добавить(Результат);
			
	ИначеЕсли ТипЗнч(Результат) = Тип("ОписаниеТипов") Тогда
		
		Массив.Добавить(ПредставлениеОписанияТипов(Результат));

	Иначе
		
		Массив.Добавить("Не поддерживается вывод значения типа <" + ТипЗнч(Результат)+">");
		
	КонецЕсли; 
	
	Возврат Массив;
	
КонецФункции

Функция РезультатВТаблицуЗначений(Результат,Массив = Неопределено,ТекущаяКоллекция = Неопределено) Экспорт
	
	Если Массив = Неопределено Тогда
		Массив = Новый Массив;
	КонецЕсли;

	Если ТипЗнч(Результат) = Тип("ХранилищеЗначения") Тогда
		Результат = Результат.Получить();
	КонецЕсли;
		
	Если ЭтоКоллекция(Результат) Тогда // Результат запроса, таблица значений, дерево значений		
		
		Массив.Добавить(КоллекциюВТаблицуЗначений(Результат));		
		
	ИначеЕсли ЭтоСписок(Результат) Тогда // Массив, список значений		
		
		СписокВТаблицуЗначений(Массив,Результат);
						
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
		Или ТипЗнч(Результат) = Тип("ФиксированнаяСтруктура") 
		Или ТипЗнч(Результат) = Тип("ФиксированноеСоответствие") Тогда	
		
		СтруктуруВТаблицуЗначений(Массив, Результат);
		
	Иначе
		
		РезультатВПроизвольнуюКоллекцию(Результат, Массив);
		
	КонецЕсли; 
	
	Возврат Массив;
	
КонецФункции

Функция КоллекциюВТаблицуЗначений(Результат) Экспорт
	
	Если ТипЗнч(Результат) = Тип("РезультатЗапроса") Тогда 
		Возврат Результат.Выгрузить();
	ИначеЕсли ТипЗнч(Результат) = Тип("ДеревоЗначений") Тогда
		
		ТаблицаЗначений = Новый ТаблицаЗначений;
		
		Для Каждого Колонка Из Результат.Колонки Цикл
			ТаблицаЗначений.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
		КонецЦикла;
		
		ДополнитьКоллекцию(ТаблицаЗначений,Результат);

		//Для Каждого ТекущаяСтрока Из Результат.Строки Цикл
		//	ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(),ТекущаяСтрока);
		//КонецЦикла;
		
		Возврат ТаблицаЗначений;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция СписокВТаблицуЗначений(МассивКВыводу, Результат) Экспорт
	
	// Примитивные типы поместим в ТЗ с одной колонкой, осталное - в общий массив.
	ЭтоСписокЗначений = (ТипЗнч(Результат) = Тип("СписокЗначений"));
	
	Таблица = Новый ТаблицаЗначений;
	ИмяКолонки = Строка(ТипЗнч(Результат));
	Таблица.Колонки.Добавить(ИмяКолонки);
	
	Для Каждого ТекущийЭлемент Из Результат Цикл
		
		Если ЭтоСписокЗначений Тогда
			Значение = ТекущийЭлемент.Значение;
		Иначе
			Значение = ТекущийЭлемент;
		КонецЕсли;
		
		Если ЭтоКоллекция(Значение) Или ЭтоСписок(Значение) Тогда	
			РезультатВТаблицуЗначений(Значение,МассивКВыводу);
		Иначе				
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока[ИмяКолонки] = Значение;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Таблица.Количество() > 0 Тогда
		МассивКВыводу.Добавить(Таблица);
	КонецЕсли;

КонецФункции

Функция СтруктуруВТаблицуЗначений(МассивКВыводу, Результат) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ключ");
	Таблица.Колонки.Добавить("Значение");
	МассивТипов = Новый Массив;
	
	Для Каждого КлючИЗначение Из Результат Цикл
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(),КлючИЗначение);	
		
		Если МассивТипов.Найти(ТипЗнч(КлючИЗначение.Значение)) = Неопределено Тогда 
			МассивТипов.Добавить(ТипЗнч(КлючИЗначение.Значение));
		КонецЕсли;
		
	КонецЦикла;
	
	Таблица.Колонки.Значение.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
	
	МассивКВыводу.Добавить(Таблица);

КонецФункции

#КонецОбласти

Процедура ЗаполнитьДиаграммуЗамеров(Диаграмма)Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Результаты.СтрокаВыполнения КАК СТРОКА(1000)) КАК СтрокаВыполнения,
		|	Результаты.ВремяВыполнения КАК ВремяВыполнения
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТЗ КАК Результаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СтрокаВыполнения КАК СтрокаВыполнения,
		|	ВТ.ВремяВыполнения КАК ВремяВыполнения,
		|	1 КАК КоличествоВыполнений
		|ИЗ
		|	ВТ КАК ВТ
		|ИТОГИ
		|	КОЛИЧЕСТВО(КоличествоВыполнений)
		|ПО
		|	СтрокаВыполнения";
	
	Запрос.УстановитьПараметр("ТЗ",Результаты.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСтрокаВыполнения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//Диаграмма.КоличествоТочек = Результаты.Количество();

	Пока ВыборкаСтрокаВыполнения.Следующий() Цикл
		
		Серия = Диаграмма.Серии.Добавить(Лев(ВыборкаСтрокаВыполнения.СтрокаВыполнения,50));
		
		Диаграмма.КоличествоТочек = Макс(Диаграмма.КоличествоТочек,ВыборкаСтрокаВыполнения.КоличествоВыполнений);
		
		ВыборкаДетальныеЗаписи = ВыборкаСтрокаВыполнения.Выбрать();
		
		НомерТочки = 0; 
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Точка = Диаграмма.Точки[НомерТочки];
		    Диаграмма.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.ВремяВыполнения); 
			
			НомерТочки = НомерТочки+1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеРезультатаНетДанных() Экспорт

	Возврат "<Нет данных для отображения>";	

КонецФункции

Функция ПредставлениеОписанияТипов(Значение)
	
	Результат = "Описание типов: ";
	
	МассивТипов = Значение.Типы();
	МассивПредставлений = Новый Массив;
	
	Для Каждого Тип ИЗ МассивТипов Цикл
		
		Если Тип = Тип("Число") Тогда
			МассивПредставлений.Добавить("Число("+Значение.КвалификаторыЧисла.Разрядность+","+Значение.КвалификаторыЧисла.РазрядностьДробнойЧасти+")");		
		ИначеЕсли Тип = Тип("Строка") Тогда
			МассивПредставлений.Добавить("Строка("+Значение.КвалификаторыСтроки.Длина+")");	
		ИначеЕсли Тип = Тип("Дата") Тогда
			МассивПредставлений.Добавить("Дата("+Значение.КвалификаторыДаты.ЧастиДаты+")");
		Иначе
			МассивПредставлений.Добавить(Строка(Тип));	
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат Результат + Вычислить("СтрСоединить(МассивПредставлений,"";"")");
	
КонецФункции

Процедура НачатьЗамер(СтрокаВыполнения);
	
	СтрокаРезультата = Результаты[НомерСтрокиРезультата-1];
	
	СтрокаРезультата.СтрокаВыполнения = СтрокаВыполнения;
	СтрокаРезультата.ВремяНачала = ТекущаяДатаСеанса();
	СтрокаРезультата.ВремяНачалаЧисло = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецПроцедуры

Процедура ЗакончитьЗамер();
	
	СтрокаРезультата = Результаты[НомерСтрокиРезультата-1];
	
	СтрокаРезультата.ВремяОкончания = ТекущаяДатаСеанса();
	СтрокаРезультата.ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - СтрокаРезультата.ВремяНачалаЧисло;
	
КонецПроцедуры

Функция ИтераторТаблицы(Результат)
	
	Если ТипЗнч(Результат) = Тип("ДеревоЗначений") Или ТипЗнч(Результат) = Тип("СтрокаДереваЗначений") Тогда 
		Возврат Результат.Строки;
	ИначеЕсли ТипЗнч(Результат) = Тип("ДанныеФормыДерево") Или ТипЗнч(Результат) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат Результат.ПолучитьЭлементы();
	ИначеЕсли ТипЗнч(Результат) = Тип("ТаблицаЗначений") Или ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Возврат Результат;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ДополнитьКоллекцию(Приемник,Источник)
	
	Для Каждого СтрокаИсточника Из ИтераторТаблицы(Источник) Цикл
		СтрокаПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника,СтрокаИсточника);	
		ДополнитьКоллекцию(ИтераторТаблицы(СтрокаПриемника),СтрокаИсточника)
	КонецЦикла;
		
КонецФункции

#Область ФормированиеТабличногоДокумента
Функция ПодготовитьНовыйТабличныйДокументКоллекции(Колонки)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();	
		
	СтрокаЗаголовка = Новый ТабличныйДокумент;
	ЯчейкаЗаголовка = ЯчейкаЗаголовка();

	СтрокаЗначений = Новый ТабличныйДокумент;
		
	НомерКолонки = 1;
	ТекущаяКоллекцияСодержитМультабельныеЗначения = Ложь;
	
	Для Каждого ТекСвойство Из Колонки Цикл
		
		ФорматироватьЗаголовок(ЯчейкаЗаголовка,ТекСвойство);
		ЯчейкаЗаголовка.Параметры.Заголовок = ТекСвойство.Имя;
		СтрокаЗаголовка.Присоединить(ЯчейкаЗаголовка);
		
		Ячейка = СтрокаЗначений.Область("R1C"+НомерКолонки);
		Ячейка.ЦветРамки = ЦветаСтиля.ЦветЛинииОтчета;
		Ячейка.ГраницаСверху 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		Ячейка.ГраницаСнизу 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		Ячейка.ГраницаСлева 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		Ячейка.ГраницаСправа 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		
		Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		Ячейка.Параметр = ТекСвойство.Имя;
		
		РезультатАнализа = АнализМассиваТипов(ТекСвойство.ТипЗначения.Типы());
		Если РезультатАнализа.ЕстьМультабельныеТипы Тогда
			ТекущаяКоллекцияСодержитМультабельныеЗначения = Истина;
		КонецЕсли;
		
		Если РезультатАнализа.ЕстьСсылки Или РезультатАнализа.ЕстьМультабельныеТипы  Тогда
			Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
		Иначе
			Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
		КонецЕсли;

		НомерКолонки = НомерКолонки+1;
		
	КонецЦикла;  
	
	ТабличныйДокумент.Вывести(СтрокаЗаголовка,УровеньГруппировки);

	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ЗаполнитьТабличныйДокументКоллекциейРекурсивно(Колонки, ТабличныйДокумент, ТекущаяСтрока, Уровень)
	
	Уровень = Уровень+1;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Пока ТекущаяСтрока.Следующий() Цикл
			
			ВывестиСтрокуВТабличныйДокумент(Колонки,ТабличныйДокумент,ТекущаяСтрока,Уровень);
						
			ВыборкаДетали = ТекущаяСтрока.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ЗаполнитьТабличныйДокументКоллекциейРекурсивно(Колонки, ТабличныйДокумент, ВыборкаДетали, Уровень);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементКоллекции Из ИтераторТаблицы(ТекущаяСтрока) Цикл
			
			ВывестиСтрокуВТабличныйДокумент(Колонки,ТабличныйДокумент,ЭлементКоллекции,Уровень);
			
			Если ТипЗнч(ЭлементКоллекции) = Тип("СтрокаДереваЗначений") Тогда
				ЗаполнитьТабличныйДокументКоллекциейРекурсивно(Колонки, ТабличныйДокумент, ЭлементКоллекции, Уровень);
			КонецЕсли;
					
		КонецЦикла;
		
	КонецЕсли;
	
	Уровень = Уровень-1;
	
КонецФункции

Процедура ВывестиСтрокуВТабличныйДокумент(Колонки,ТабличныйДокумент,ТекущаяСтрока,Уровень);
	
//	ЗаполнитьЗначенияСвойств(СтрокаЗначений.Параметры,ТекущаяСтрока);

	Для НомерКолонки = 1 По Колонки.Количество() Цикл
		
		Свойство = Колонки[НомерКолонки-1].Имя;
		Значение = ТекущаяСтрока[Свойство];

		Ячейка = СтрокаЗначений.Область("R1C"+НомерКолонки);
		
		Если ТекущаяКоллекцияСодержитМультабельныеЗначения Тогда // Медленное заполнение, с форматированием мультабельных значений
			ФорматироватьЯчейку(Ячейка, Свойство, Значение);	
		Иначе // Быстрый вариант заполнения
			СтрокаЗначений.Параметры[Свойство] = Значение;
			Ячейка.Расшифровка = Значение;
		КонецЕсли;
		
		//Если Значение = Null Тогда
		//	Ячейка.ЦветТекста = ЦветТекстаЯчейкиНеопределено;
		//	СтрокаЗначений.Параметры[НомерКолонки-1] = "<Null>";
		//	Продолжить;
		//КонецЕсли;	
		//
		//Если ТипЗнч(Значение) = Тип("резу Тогда
		//	Ячейка.ЦветТекста = ЦветТекстаЯчейкиНеопределено;
		//	СтрокаЗначений.Параметры[НомерКолонки-1] = "<Null>";
		//	Продолжить;
		//КонецЕсли;
		//
		//Ячейка.ЦветТекста = ЦветТекста;
			
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(СтрокаЗначений,Уровень);

КонецПроцедуры

Процедура ФорматироватьЗаголовок(Ячейка, Колонка)
	
	Типы = Колонка.ТипЗначения.Типы();
	ТекстЗаголовка = Колонка.Имя;
	
	ШиринаКолонки = МинимальнаяШиринаКолонки();
	// Сравним с длиной заголовка
	ШиринаКолонки = Макс(ШиринаКолонки,СтрДлина(ТекстЗаголовка)+1);
	
	Для Каждого ТекущийТип Из Типы Цикл
		ШиринаТипа = ШиринаКолонкиПоТипу(ТекущийТип);
		ШиринаКолонки = Макс(ШиринаКолонки,ШиринаТипа);
	КонецЦикла;
	
	ШиринаКолонки = Мин(ШиринаКолонки,МаксимальнаяШиринаКолонки());
	
	Ячейка.Области.ЯчейкаЗаголовка.ШиринаКолонки = ШиринаКолонки;			
			
КонецПроцедуры

Процедура ФорматироватьЯчейку(Ячейка, Свойство, Значение)
	
	ПредставлениеДляЯчейкиСТабДокументом = "<"+ТипЗнч(Значение)+">";//СтрШаблон("<%1>",ТипЗнч(Значение));
	
	Если ЭтоКоллекция(Значение)
		Или ЭтоСписок(Значение) 
		Или ТипЗнч(Значение) = Тип("Структура") Тогда
		
		СтрокаЗначений.Параметры[Свойство] 	= ПредставлениеДляЯчейкиСТабДокументом;
		Ячейка.ЦветТекста               	= ЦветТекстаЯчейкиСТабДокументом;
		ТекущаяСтрокаЗначений               = СтрокаЗначений;
		Ячейка.Расшифровка 					= РезультатВТабличныйДокумент(Значение);
		СтрокаЗначений						= ТекущаяСтрокаЗначений;
		ТекущаяКоллекцияСодержитМультабельныеЗначения = Истина; 
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
		
		Возврат;
		
	КонецЕсли;
	
	Если Значение = Null Тогда
		СтрокаЗначений.Параметры[Свойство] = "NULL";
		Ячейка.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Ячейка.ЦветТекста               = ЦветТекстаЯчейкиНеопределено;
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
		Возврат;
	КонецЕсли;

	Ячейка.Расшифровка = Значение;
	СтрокаЗначений.Параметры[Свойство]	= Значение;
	
	Если ЭтоПримитивыныйТип(Значение) Тогда
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	Иначе
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
	КонецЕсли;
		
КонецПроцедуры

Процедура УДАЛИТЬФорматироватьЯчейку(Ячейка, Значение)
	
	Если ТипЗнч(Ячейка) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Область = Ячейка;
	Иначе
		Область = Ячейка.Область();
	КонецЕсли;

	ПредставлениеДляЯчейкиСТабДокументом = "<"+ТипЗнч(Значение)+">";//СтрШаблон("<%1>",ТипЗнч(Значение));
	
	Если Значение = Null Тогда
		Ячейка.Параметры.Содержание      = "NULL";
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Область.ЦветТекста               = ЦветТекстаЯчейкиНеопределено;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда 
		Ячейка.Параметры.Содержание      = Значение;
		Область.ЦветТекста 				 = ?(Значение >=0, ЦветТекста, ЦветОтрицательныхЗначений);
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Право;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Ячейка.Параметры.Содержание      = Значение;
		Область.ЦветТекста 				 = ЦветТекста;
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Лево;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Ячейка.Параметры.Содержание      = Значение;
		Область.ЦветТекста 				 = ЦветТекста;
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ЭтоКоллекция(Значение) Тогда
		Ячейка.Параметры.Содержание      = ПредставлениеДляЯчейкиСТабДокументом;
		Ячейка.Параметры.Расшифровка     = КоллекциюВТабличныйДокумент(Значение);
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Область.ЦветТекста               = ЦветТекстаЯчейкиСТабДокументом;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Ячейка.Параметры.Содержание      = ПредставлениеДляЯчейкиСТабДокументом;
		Ячейка.Параметры.Расшифровка     = СтруктуруВТабличныйДокумент(Значение);
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Область.ЦветТекста               = ЦветТекстаЯчейкиСТабДокументом;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
	ИначеЕсли ЭтоСписок(Значение) Тогда
		Ячейка.Параметры.Содержание      = ПредставлениеДляЯчейкиСТабДокументом;
		Ячейка.Параметры.Расшифровка     = СписокВТабличныйДокумент(Значение);
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Область.ЦветТекста               = ЦветТекстаЯчейкиСТабДокументом;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
	Иначе
		Ячейка.Параметры.Содержание      = Строка(Значение);
		Ячейка.Параметры.Расшифровка     = Значение;
		Область.ЦветТекста 				 = ЦветТекста;
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Лево;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
	КонецЕсли;
	
КонецПроцедуры

Функция МинимальнаяШиринаКолонки()
	Возврат 9;
КонецФункции

Функция МаксимальнаяШиринаКолонки()
	Возврат 100;
КонецФункции

Функция ШиринаКолонкиПоТипу(Тип)
	
	Ширина = МинимальнаяШиринаКолонки(); 
	
	Если Тип = Тип("Дата") Тогда
		Ширина = 15;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Ширина = 40;
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Ширина = 25;
	ИначеЕсли Тип = Тип("ТаблицаЗначений") Тогда
		Ширина = 15;
	КонецЕсли;
	
	Возврат Ширина;
	
КонецФункции

Функция ЯчейкаЗаголовка()
	Возврат МакетОформления.ПолучитьОбласть("ЯчейкаЗаголовка");
КонецФункции

Функция ЯчейкаРезультата()
	Возврат МакетОформления.ПолучитьОбласть("ЯчейкаРезультата");
КонецФункции
 
#КонецОбласти

#Область ВнешнееСоединение
Функция ПолучитьПодключениеКБазе(ПараметрыПодключения) Экспорт
	
	Шаблон = "Srvr=""%1"";Ref=""%2"";Usr=""%3"";Pwd=""%4"";";
	СтрокаПодключения = Вычислить("СтрШаблон(Шаблон
		|,ПараметрыПодключения.ИмяСервера
		|,ПараметрыПодключения.ИмяБазы
		|,ПараметрыПодключения.ИмяПользователя
		|,ПараметрыПодключения.Пароль");
	
	V82COMConnector = Новый COMОбъект("V83.COMConnector");
	
	Возврат V82COMConnector.Connect(СтрокаПодключения);
	
КонецФункции

Функция ВыполнитьЗапросВоВнешнейБазеНаСервере(Соединение, ТекстЗапроса, ПараметрыЗапроса)
	
	Запрос = Соединение.NewObject("Запрос");
	
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;

	Результат = Запрос.Выполнить();
	
	Возврат Результат;

КонецФункции

Функция ОтладкаСоединения()
	
	Результат = Неопределено;
	
	Параметры = КонтекстЗадания.Параметры;
	
	// +

	// - 
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСТипами
Функция АнализМассиваТипов(МассивТипов)

	Результат = Новый Структура("ЕстьСсылки,ЕстьМультабельныеТипы",Ложь,Ложь);

	Для Каждого Тип Из МассивТипов Цикл
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Результат.ЕстьСсылки = Истина;
		ИначеЕсли ЭтоТипКоллекция(Тип)
			Или ЭтоТипСписок(Тип) Тогда
			Результат.ЕстьМультабельныеТипы = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ЭтоПримитивыныйТип(Значение)
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("Число"));
	Массив.Добавить(Тип("Дата"));
	Массив.Добавить(Тип("Булево"));
	
	ТипЗнч = ТипЗнч(Значение);
	
	Возврат Массив.Найти(ТипЗнч) <> Неопределено;
	
КонецФункции

Функция ЭтоСсылочныйТип(Значение)
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Значение));

	Возврат ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта)
	
КонецФункции

Функция ЭтоСписок(Значение)
	
	ТипЗнч = ТипЗнч(Значение);
	
	Возврат ЭтоТипСписок(ТипЗнч);
	
КонецФункции

Функция ЭтоКоллекция(Значение)
			
	ТипЗнч = ТипЗнч(Значение);
		
	Возврат ЭтоТипКоллекция(ТипЗнч);
	
КонецФункции

Функция ЭтоТипКоллекция(Тип)
			
	Возврат (Тип = Тип("РезультатЗапроса") Или Тип = Тип("ТаблицаЗначений") Или Тип = Тип("ДеревоЗначений"));
	
КонецФункции

Функция ЭтоТипСписок(Тип)
	
	Возврат (Тип = Тип("Массив") Или Тип = Тип("ФиксированныйМассив") Или Тип = Тип("СписокЗначений"));
	
КонецФункции

#КонецОбласти

#Область РаботаСФормами
Процедура ДобавитьМассивЗначенийНаФому(Форма, ГруппаФормы, МассивЗначений, ДекорацияНетДанных = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ДекорацияНетДанных <> Неопределено Тогда
		ДекорацияНетДанных.Видимость = МассивЗначений.Количество() = 0;
	КонецЕсли;

	// Удалим предыдущие данные
	УдалитьДобавленныеРеквизитыФормы(Форма, ГруппаФормы);
	 
	// Добавляем реквизиты
	СчетчикТаблиц = 0;
	СчетчикПолей = 0;
	МассивНовыхРеквизитов = Новый Массив;
	
	МассивНеотображаемыхТипов = Новый Массив;
	МассивНеотображаемыхТипов.Добавить(Тип("МоментВремени"));
	МассивНеотображаемыхТипов.Добавить(Тип("Тип"));	
	
	МассивТиповДляРасшифровки = Новый Массив;	
	МассивТиповДляРасшифровки.Добавить(Тип("ХранилищеЗначения"));
	МассивТиповДляРасшифровки.Добавить(Тип("ТаблицаЗначений"));
	МассивТиповДляРасшифровки.Добавить(Тип("ДеревоЗначений"));
	МассивТиповДляРасшифровки.Добавить(Тип("ДвоичныеДанные"));
	МассивТиповДляРасшифровки.Добавить(Тип("Структура"));
	МассивТиповДляРасшифровки.Добавить(Тип("Массив"));
	МассивТиповДляРасшифровки.Добавить(Тип("Соответствие"));
	МассивТиповДляРасшифровки.Добавить(Тип("ФиксированнаяСтруктура"));	
	МассивТиповДляРасшифровки.Добавить(Тип("ФиксированныйМассив"));
	МассивТиповДляРасшифровки.Добавить(Тип("ФиксированноеСоответствие"));
	
	Для Каждого Элемент Из МассивЗначений Цикл	
		ДобавитьРеквизитРезультатаНаФорму(Форма,ГруппаФормы,МассивНовыхРеквизитов,Элемент,СчетчикТаблиц,СчетчикПолей);	
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивНовыхРеквизитов);

	СчетчикТаблиц = 0;
	СчетчикПолей = 0;
	
	ХранилищеНеотображаемыхЗначений = Новый Соответствие;
	
	// Загружаем таблицы и создаем элементы
	Для Каждого Значение Из МассивЗначений Цикл	
		ДобавитьЭлементРезультатаНаФорму(Форма, ГруппаФормы, МассивЗначений, Значение, СчетчикТаблиц, СчетчикПолей);	
	КонецЦикла;
	
	Форма.АдресХранилищаЗначений = ПоместитьВоВременноеХранилище(ХранилищеНеотображаемыхЗначений,Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Процедура УдалитьДобавленныеРеквизитыФормы(Форма, ГруппаФормы) Экспорт
	
	Элементы = Форма.Элементы;

	// Удалим предыдущие данные
	МассивЭлементовКУдалению = Новый Массив;
	
	Для Каждого Элемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		МассивЭлементовКУдалению.Добавить(Элемент.ПутьКДанным);
	КонецЦикла;
	
	Для Каждого Элемент Из МассивЭлементовКУдалению Цикл
		Элементы.Удалить(Элементы[Элемент]);
	КонецЦикла;

	Форма.ИзменитьРеквизиты(,МассивЭлементовКУдалению);

КонецПроцедуры

Процедура ДобавитьРеквизитРезультатаНаФорму(Форма, ГруппаФормы, МассивНовыхРеквизитов, Значение, СчетчикТаблиц, СчетчикПолей);
		
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений")
		Или ТипЗнч(Значение) = Тип("ДеревоЗначений") Тогда
		
		ИмяРеквизита = ПолучитьИмяРеквизита(ГруппаФормы,"Таблица",СчетчикТаблиц);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Значение));
		
		РеквизитТаблица = Новый РеквизитФормы(ИмяРеквизита,Новый ОписаниеТипов(МассивТипов));
		МассивНовыхРеквизитов.Добавить(РеквизитТаблица);
			
		Для Каждого Колонка Из Значение.Колонки Цикл	
			ДобавитьРеквизитНаФорму(МассивНовыхРеквизитов,Колонка.ТипЗначения.Типы(),Колонка.Имя,ИмяРеквизита);
		КонецЦикла;	
				
	ИначеЕсли ЭтоПримитивыныйТип(Значение)
		Или ЭтоСсылочныйТип(Значение)
		Или ТипЗнч(Значение) = Тип("ТабличныйДокумент")
		Или ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда 
		
		ИмяРеквизита = ПолучитьИмяРеквизита(ГруппаФормы,"Реквизит",СчетчикПолей);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Значение));
		
		ДобавитьРеквизитНаФорму(МассивНовыхРеквизитов,МассивТипов,ИмяРеквизита);

	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитНаФорму(МассивНовыхРеквизитов, ИсходныйМассивТипов, ИмяРеквизита, Родитель = "");
	
	МассивТипов = Новый Массив;
	
	Если ИсходныйМассивТипов.Количество() = 0 Тогда
		// Если внутри окажется неотображаемый тип, то не удастся передать на клиент.
		МассивТипов.Добавить(Тип("Строка"));
	КонецЕсли;
	
	Для Каждого Тип Из ИсходныйМассивТипов Цикл
		
		Если МассивТиповДляРасшифровки.Найти(Тип) <> Неопределено Тогда
			
			РеквизитПредставления = Новый РеквизитФормы(ИмяРеквизита+"Представление",Новый ОписаниеТипов("Строка"),Родитель,ИмяРеквизита);
			МассивНовыхРеквизитов.Добавить(РеквизитПредставления);
			МассивТипов.Добавить(Тип("УникальныйИдентификатор"));
							
		ИначеЕсли МассивНеотображаемыхТипов.Найти(Тип) <> Неопределено Тогда
			МассивТипов.Добавить(Тип("Строка"));			
		Иначе
			МассивТипов.Добавить(Тип);
		КонецЕсли;	
		
	КонецЦикла;
	
	Реквизит = Новый РеквизитФормы(ИмяРеквизита,Новый ОписаниеТипов(МассивТипов),Родитель,ИмяРеквизита);
	МассивНовыхРеквизитов.Добавить(Реквизит);	

КонецПроцедуры

Процедура ДобавитьЭлементРезультатаНаФорму(Форма, ГруппаФормы, МассивЗначений, ТекущееЗначение, СчетчикТаблиц, СчетчикПолей)
	
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(ТекущееЗначение) = Тип("ТаблицаЗначений")
		Или ТипЗнч(ТекущееЗначение) = Тип("ДеревоЗначений") Тогда
		
		ИмяРеквизита = ПолучитьИмяРеквизита(ГруппаФормы,"Таблица",СчетчикТаблиц);
		
		// Запомним исходные колонки и добавим колонки представлений для корректной работы метода ЗначениеВРеквизитФормы
		ОписанияКолонок = Новый Массив;
		ДобавленныеКолонки = Новый Массив; 
		КолонкиФормы = Форма.РеквизитФормыВЗначение(ИмяРеквизита).Колонки;
		
		Для Каждого Колонка Из КолонкиФормы Цикл
			
			КолонкаИсходная = ТекущееЗначение.Колонки.Найти(Колонка.Имя);
			
			Если КолонкаИсходная = Неопределено Тогда
				ДобавленныеКолонки.Добавить(Колонка);
			Иначе 
				ОписанияКолонок.Добавить(Новый Структура("Имя,Типы",КолонкаИсходная.Имя,КолонкаИсходная.ТипЗначения.Типы()));
			КонецЕсли;
			
		КонецЦикла;

		Для Каждого Колонка Из ДобавленныеКолонки Цикл 
			ТекущееЗначение.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
		КонецЦикла;
		
		// Помещаем данные на форму. 
		Форма.ЗначениеВРеквизитФормы(ТекущееЗначение, ИмяРеквизита);
		
		// Элемент таблицы
		ЭлементТаблица = Элементы.Добавить(ИмяРеквизита,Тип("ТаблицаФормы"), ГруппаФормы);
		ЭлементТаблица.ПутьКДанным = ИмяРеквизита;
		ЭлементТаблица.Отображение = ОтображениеТаблицы.Список;
		ЭлементТаблица.ИзменятьСоставСтрок = Ложь;
		ЭлементТаблица.ИзменятьПорядокСтрок = Ложь;
		ЭлементТаблица.УстановитьДействие("Выбор","Подключаемый_ВыборРезультата");
		
		// Команды таблицы
		Если Форма.Команды.Найти(ИмяРеквизита) = Неопределено Тогда
			НоваяКоманда = Форма.Команды.Добавить(ИмяРеквизита);
			НоваяКоманда.Действие = "Подключаемый_ВыборРезультатаКоманда";
		КонецЕсли;
		
		Элемент = Элементы.Добавить(ИмяРеквизита+"ПоказатьСведенияТаблицы", 
			Тип("КнопкаФормы"), 
			ЭлементТаблица.КоманднаяПанель);
		
		Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Элемент.ИмяКоманды = ИмяРеквизита;
		Элемент.Заголовок = ПредставлениеЗначения(ТекущееЗначение);
		
		// Команда ПоказатьЗначениеВОтдельномОкне
		ИмяКоманды = ИмяРеквизита+"ПоказатьЗначениеВОтдельномОкне";
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Действие = "Подключаемый_ПоказатьЗначениеВОтдельномОкне";
		КонецЕсли;
		
		Элемент = Элементы.Добавить(ИмяКоманды, 
			Тип("КнопкаФормы"), 
			ЭлементТаблица.КоманднаяПанель);
		
		Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Элемент.ИмяКоманды = ИмяКоманды;
		Элемент.Заголовок = "Показать значение в отдельном окне (F2)"; 
		Элемент.Картинка = БиблиотекаКартинок.Свойства;
		Элемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элемент.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F2);
	
		// Колонки таблицы
		Для Каждого Колонка Из ОписанияКолонок Цикл
			ДобавитьЭлементНаФорму(Форма,ЭлементТаблица,МассивЗначений,ТекущееЗначение,Колонка.Типы,Колонка.Имя,ИмяРеквизита);			
		КонецЦикла;
		
	ИначеЕсли ЭтоПримитивыныйТип(ТекущееЗначение)
		Или ЭтоСсылочныйТип(ТекущееЗначение)
		Или ТипЗнч(ТекущееЗначение) = Тип("ДвоичныеДанные") Тогда 
			
		ИмяРеквизита = ПолучитьИмяРеквизита(ГруппаФормы,"Реквизит",СчетчикПолей);
		Форма[ИмяРеквизита] = ТекущееЗначение;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТекущееЗначение));
		
		НовыйЭлемент = ДобавитьЭлементНаФорму(Форма,ГруппаФормы,МассивЗначений,ТекущееЗначение,МассивТипов,ИмяРеквизита);

	ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("ТабличныйДокумент") Тогда 
		
		ИмяРеквизита = ПолучитьИмяРеквизита(ГруппаФормы,"Реквизит",СчетчикПолей);
		Форма[ИмяРеквизита] = ТекущееЗначение;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТекущееЗначение));
		
		НовыйЭлемент = ДобавитьЭлементНаФорму(Форма,ГруппаФормы,МассивЗначений,ТекущееЗначение,МассивТипов,ИмяРеквизита);	
	    НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
		
	КонецЕсли;

КонецПроцедуры

Функция ДобавитьЭлементНаФорму(Форма,ГруппаФормы,МассивЗначений,ТекущееЗначение,МассивТипов,ИмяЭлемента,ИмяТаблицы = "")

	Элементы = Форма.Элементы;
	
	НовыйЭлемент = Элементы.Добавить(ИмяТаблицы+ИмяЭлемента,Тип("ПолеФормы"),ГруппаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	Если МассивЗначений.Количество() = 1 И ПустаяСтрока(ИмяТаблицы) Тогда
		НовыйЭлемент.Заголовок = "Результат";
	КонецЕсли;
		
	ЕстьНеотображаемые = МассивТиповСодержитНеотображаемыеТипы(МассивТипов);
		
	Если ЕстьНеотображаемые Тогда		
		// Заполним представления
		НовыйЭлемент.ТолькоПросмотр = Истина;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
				
		Если ПустаяСтрока(ИмяТаблицы) Тогда
			
			НовыйЭлемент.Гиперссылка = Истина;
			НовыйЭлемент.ПутьКДанным = ИмяЭлемента+"Представление";	
			ДобавитьНеотображаемыйЭлементФормы(Форма,ИмяЭлемента,ТекущееЗначение)
				
		Иначе
			
			НовыйЭлемент.ГиперссылкаЯчейки = Истина;
			НовыйЭлемент.ПутьКДанным = ИмяТаблицы+"."+ИмяЭлемента+"Представление";
			ДобавитьНеотображаемыеКолонкиКоллекцииФормыРекурсивно(Форма[ИмяТаблицы],ТекущееЗначение,ИмяЭлемента);
			НовыйЭлемент.УстановитьДействие("Нажатие","Подключаемый_ВыборРезультата");
		
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(ИмяТаблицы) Тогда
			НовыйЭлемент.ПутьКДанным = ИмяЭлемента;
		Иначе
			НовыйЭлемент.ПутьКДанным = ИмяТаблицы+"."+ИмяЭлемента;
		КонецЕсли;
		
	КонецЕсли;

	Возврат НовыйЭлемент;
	
КонецФункции

Процедура ДобавитьНеотображаемыеКолонкиКоллекцииФормыРекурсивно(КоллекцияФормы, ИсходноеЗначение, ИмяЭлемента)
	
	ИндексСтроки = 0;
	
	Для Каждого СтрокаФормы Из ИтераторТаблицы(КоллекцияФормы) Цикл
		
		ЗначениеПоля = ИтераторТаблицы(ИсходноеЗначение)[ИндексСтроки][ИмяЭлемента];
		
		ДобавитьНеотображаемыйЭлементФормы(СтрокаФормы,ИмяЭлемента,ЗначениеПоля);
		
		ДочерняяСтрока = ИтераторТаблицы(ИсходноеЗначение)[ИндексСтроки]; // Строка исходного дерева
		ДобавитьНеотображаемыеКолонкиКоллекцииФормыРекурсивно(СтрокаФормы, ДочерняяСтрока, ИмяЭлемента);			
		
		ИндексСтроки = ИндексСтроки+1;				
		
	КонецЦикла;

КонецПроцедуры	
	
Процедура ДобавитьНеотображаемыйЭлементФормы(ВладелецПоля,ИмяЭлемента,Значение)
	
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Или ТипЗнч(Значение) = Тип("ДеревоЗначений") Тогда
		ВладелецПоля[ИмяЭлемента+"Представление"] = "ТаблицаЗначений ("+ИтераторТаблицы(Значение).Количество()+")";	
	ИначеЕсли ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
		ВладелецПоля[ИмяЭлемента+"Представление"] = "ХранилищеЗначения ("+ТипЗнч(Значение.Получить())+")";
	ИначеЕсли ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		ВладелецПоля[ИмяЭлемента+"Представление"] = "ДвоичныеДанные";		
	КонецЕсли;
	
	ИдентификаторЗначения = Новый УникальныйИдентификатор;
	ВладелецПоля[ИмяЭлемента] = ИдентификаторЗначения;
	ХранилищеНеотображаемыхЗначений.Вставить(ИдентификаторЗначения,Значение);
		
КонецПроцедуры

Функция ПолучитьИмяРеквизита(ГруппаФормы,ВидРеквизита,Счетчик);
	
	Счетчик = Счетчик+1;
	ИмяРеквизита = ГруппаФормы.Имя + ВидРеквизита + Счетчик;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция МассивТиповСодержитНеотображаемыеТипы(МассивТипов);
	
	Для Каждого Тип Из МассивТипов Цикл
		Если МассивТиповДляРасшифровки.Найти(Тип) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПредставлениеЗначения(ТекущееЗначение)
	
	Если ЭтоКоллекция(ТекущееЗначение) Тогда 
		Возврат "Количество строк = "+ИтераторТаблицы(ТекущееЗначение).Количество();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область БСП

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция БСП_ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
КонецФункции

// Определяет принадлежность объекта метаданных к ссылочному типу.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект ссылочного типа.
//
Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Позиция = Вычислить("СтрНайти(ИмяОбъектаМетаданных, ""."")");
	Если Позиция > 0 Тогда 
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		Возврат ИмяБазовогоТипа = "Справочник"
			Или ИмяБазовогоТипа = "Документ"
			Или ИмяБазовогоТипа = "БизнесПроцесс"
			Или ИмяБазовогоТипа = "Задача"
			Или ИмяБазовогоТипа = "ПланСчетов"
			Или ИмяБазовогоТипа = "ПланОбмена"
			Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
			Или ИмяБазовогоТипа = "ПланВидовРасчета";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

УровеньГруппировки = 0;
ЦветТекстаЯчейкиСТабДокументом = WebЦвета.Синий;
ЦветТекстаЯчейкиНеопределено = WebЦвета.СеребристоСерый;
ЦветТекста = WebЦвета.Черный;
ЦветОтрицательныхЗначений = WebЦвета.Красный;
