#Область ОписаниеПеременных
&НаКлиенте
Перем ОсновнаяФорма;
&НаКлиенте
Перем КонсольОбщиеМодулиКлиент;
&НаКлиенте
Перем ЗаретРазворачиванияУзлаДерева; // Защита от бесконечного цикла изза сочетания клавиш ctrl shift + 
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НаКлиенте = Истина;

	Параметры.Свойство("Выражение", Выражение);	
	НаКлиенте = ?(Параметры.Свойство("НаКлиенте"), Параметры.НаКлиенте, Истина);	
	Параметры.Свойство("АдресХранилищаЗначений", АдресХранилищаЗначенийВладельца);	
	Параметры.Свойство("АдресРезультатаВыполнения", АдресРезультатаВыполненияВладельца);
	Параметры.Свойство("ИдентификаторЗначения", ИдентификаторЗначения);
	
	АдресХранилищаЗначений = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОсновнаяФорма = ПолучитьФорму("ВнешняяОбработка.КонсольЗапросовУправляемыеФормыSA.Форма");	
		
	ВычислитьВыражение();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыражениеПриИзменении(Элемент)	
	ВычислитьВыражение();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы
&НаКлиенте
Процедура Подключаемый_ВыборРезультата(Элемент)
	
	ОсновнаяФорма.ВыборРезультата(ЭтаФорма, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если ЗаретРазворачиванияУзлаДерева = Истина Тогда
		Отказ = Истина;
		ПодключитьОбработчикОжидания("РазрешитьРазвернутьСтрокуРезультата", 0.1, Истина);
		Возврат
	КонецЕсли;

	РезультатПередРазворачиваниемНаСервере(Элемент.Имя, Строка, Отказ);
	
	ЗаретРазворачиванияУзлаДерева = Истина;	
	ПодключитьОбработчикОжидания("РазрешитьРазвернутьСтрокуРезультата", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРазвернутьСтрокуРезультата() Экспорт
	
	ЗаретРазворачиванияУзлаДерева = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура РезультатПередРазворачиваниемНаСервере(ИмяДерева, Строка, Отказ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыводЗначенийСвойствРазвернутьЗначениеДерева(ЭтаФорма, ЭтаФорма[ИмяДерева], Строка, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ПоказатьЗначениеВОтдельномОкне(Команда)
		
	ОсновнаяФорма.ПоказатьЗначениеВОтдельномОкне(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборРезультатаКоманда(Команда)
	
	ОсновнаяФорма.ПоказатьЗначениеВОтдельномОкне(ЭтаФорма, Команда, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыражение(Команда)
	ВычислитьВыражение();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВывестиРезультат()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультатаВыполнения) Тогда
		Возврат
	КонецЕсли;
	
	Значение = ПолучитьИзВременногоХранилища(АдресРезультатаВыполнения);
	
	МассивЗначений = ОбработкаОбъект.ЗначениеВПроизвольнуюКоллекцию(Значение);  
	ОбработкаОбъект.ДобавитьМассивЗначенийНаФому(ЭтаФорма, Элементы.ГруппаРезультат, МассивЗначений, Элементы.ДекорацияНетДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьВыражение()
	
	Если НаКлиенте Тогда
		ВычислитьВыражениеНаКлиенте();
	Иначе
		ВычислитьВыражениеНаСервере();	
	КонецЕсли;
	
	Элементы.Выражение.СписокВыбора.Добавить(Выражение);

КонецПроцедуры

&НаКлиенте
Процедура ВычислитьВыражениеНаКлиенте()
	
	Попытка
		
		Значение = Вычислить(Выражение);			
		ПередатьЗначениеНаСерверИВывести(Значение);
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьВыражениеНаСервере()
		
	Попытка
		
		Значение = Вычислить(Выражение);			
		АдресРезультатаВыполнения = ПоместитьВоВременноеХранилище(Значение);
		ВывестиРезультат();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
				
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьЗначениеНаСерверИВывести(Значение);
	
	Если ТипЗнч(Значение) = Тип("ДанныеФормыЭлементКоллекции")
		Или ТипЗнч(Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		
		МассивЧастей = Вычислить("СтрРазделить(Выражение,"".["")");
		ВыражениеРодителя = МассивЧастей[0]+"."+МассивЧастей[1];
		Родитель = Вычислить(ВыражениеРодителя);
		
		ПоместитьСтрокуВСтруктуруИВывести(Родитель, Значение.ПолучитьИдентификатор());
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ДанныеФормыКоллекция")
		Или ТипЗнч(Значение) = Тип("ДанныеФормыДерево") Тогда
		
	  	ДанныеФормыВЗначениеИВывести(Значение);
		
	Иначе
		
		ПоместитьВХранилищеИВывести(Значение);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДанныеФормыВЗначениеИВывести(Значение)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Данные = ОбработкаОбъект.ДанныеФормыВЗначениеБезТипа(Значение);
	ПоместитьВХранилищеИВывести(Данные);
	
КонецФункции

&НаСервере
Функция ПоместитьВХранилищеИВывести(Значение)
	
	АдресРезультатаВыполнения = ПоместитьВоВременноеХранилище(Значение);
	ВывестиРезультат();
	
КонецФункции

&НаСервере
Функция ПоместитьСтрокуВСтруктуруИВывести(Таблица, ИдентификаторСтроки)
	
	Значение = ПолучитьСтруктуруСтроки(Таблица, ИдентификаторСтроки);
	ПоместитьВХранилищеИВывести(Значение);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСтроки(Таблица, ИдентификаторСтроки)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураВозврата = Новый Структура;
	Колонки = ОбработкаОбъект.ДанныеФормыВЗначениеБезТипа(Таблица).Колонки;
	Строка = Таблица.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Для Каждого Колонка Из Колонки Цикл
		СтруктураВозврата.Вставить(Колонка.Имя,Строка[Колонка.Имя]);
	КонецЦикла;

	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти
