#Область ОписаниеПеременных	
&НаКлиенте
Перем КонсольОбщиеМодулиКлиент;
&НаКлиенте
Перем ЗапретРазворачиванияУзлаДерева; // Защита от бесконечного цикла изза сочетания клавиш ctrl shift + 
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	  
	Если Метаданные.РежимСовместимостиИнтерфейса = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.Версия8_2 Тогда
		Элементы.ГруппаПараметры.Поведение = ПоведениеОбычнойГруппы.Обычное;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	   
	#Если ВебКлиент Тогда
		НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПослеПодключенияРасширенияРаботыСФайлами", ЭтаФорма));
	#Иначе
		ЗагрузитьНастройки();
	#КонецЕсли

	КонсольОбщиеМодулиКлиент = ПолучитьФорму("ВнешняяОбработка.КонсольЗапросовУправляемыеФормыSA.Форма.ОбщиеМодулиКлиент");

	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда		
		ЗагрузитьНастройки();	
	Иначе		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОтветНаВопросОбУстановкеРасширения", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, Нстр("ru = 'Установить расширение для работы с файлами?'"), РежимДиалогаВопрос.ДаНет);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОбУстановкеРасширения(Ответ,ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда		
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоНастроекПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрокаДеревоНастроек = Элементы.ДеревоНастроек.ТекущаяСтрока;
	ОбновитьОкноПроизвольногоКода();
	
	// Если текст текущей вкладке пустой, то перейдем на другую вкладку (если на ней не пусто)
	ИзменитьСтраницу = Ложь;
	НоваяСтраница = Неопределено;
	ТекстСтраницы = СтрокаВыполненияПоТекущейСтранице();
	ТекстПоУмолчанию = "";
	
	Если АктивнаСтраницаЗапрос() Тогда
		
		ИзменитьСтраницу = ТекстСтраницыПустой(Элементы.СтраницаТекстЗапроса);
		АльтернативнаяСтраница = Элементы.СтраницаПроизвольныйКод;
		
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		
		ИзменитьСтраницу = ТекстСтраницыПустой(Элементы.СтраницаПроизвольныйКод);
	    АльтернативнаяСтраница = Элементы.СтраницаТекстЗапроса;

	КонецЕсли;
	
	Если ИзменитьСтраницу
		И Не ТекстСтраницыПустой(АльтернативнаяСтраница) Тогда
		Элементы.ТекущиеНастройки.ТекущаяСтраница = АльтернативнаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеНастройкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущаяСтраницаДеревоНастроек = ТекущаяСтраница.Имя;
	
	ОбновитьОкноПроизвольногоКода();

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка) = Тип("ТабличныйДокумент") Тогда
		
		ОткрытьФорму("ВнешняяОбработка.КонсольЗапросовУправляемыеФормыSA.Форма.ФормаТабличногоДокумента",
			Новый Структура("ТабличныйДокумент",Расшифровка));
			
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПроизвольногоКодаПриИзменении(Элемент)
	
	ОбновитьОкноПроизвольногоКода();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыРезультатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
	Если ТекущаяСтраница = Элементы.СтраницаРезультатаПоУмолчанию Тогда
		Если Не РезультатЗагружен Тогда 
			ВывестиРезультат();	  
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент Тогда
		Если Не ТабличныйДокументЗагружен Тогда 
			ВывестиРезультат();	  
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницаТаблицаЗначений Тогда
		Если Не ТаблицаЗначенийЗагружена Тогда 
			ВывестиРезультат();	  
		КонецЕсли;
	КонецЕсли;

	Если ТекущаяСтраница = Элементы.СтраницаДеревоЗначений Тогда
		Если Не ДеревоЗначенийЗагружено Тогда 
			ВывестиРезультат();	  
		КонецЕсли;
	КонецЕсли;

	Если ТекущаяСтраница = Элементы.СтраницаЗамеры Тогда
		ВывестиРезультат();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РезультатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.РезультатыСтрокаВыполнения Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Объект.Результаты.НайтиПоИдентификатору(ВыбраннаяСтрока).СтрокаВыполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВнешняяБазаФайловаяПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборРезультата(Элемент)
	
	ВыборРезультата(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРезультата(Форма, Элемент) Экспорт
	
	Если Элемент.ТекущийЭлемент.ГиперссылкаЯчейки Тогда
		
		ИдентификаторЗначения = ИдентификаторЗначенияИзЭлемента(Элемент);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("АдресХранилищаЗначений", Форма.АдресХранилищаЗначений);
		ПараметрыФормы.Вставить("ИдентификаторЗначения", ИдентификаторЗначения);
		ПараметрыФормы.Вставить("НаКлиенте", Ложь);
		ПараметрыФормы.Вставить("Выражение", "ПолучитьИзВременногоХранилища(АдресХранилищаЗначенийВладельца).Получить(ИдентификаторЗначения)");	

		ОткрытьФорму("ВнешняяОбработка.КонсольЗапросовУправляемыеФормыSA.Форма.ФормаЗначенияВОтдельномОкне", ПараметрыФормы, Форма, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если ЗапретРазворачиванияУзлаДерева = Истина Тогда
		Отказ = Истина;
		ПодключитьОбработчикОжидания("РазрешитьРазвернутьСтрокуРезультата", 0.1, Истина);
		Возврат
	КонецЕсли;

	РезультатПередРазворачиваниемНаСервере(Элемент.Имя, Строка, Отказ);
	
	ЗапретРазворачиванияУзлаДерева = Истина;	
	ПодключитьОбработчикОжидания("РазрешитьРазвернутьСтрокуРезультата", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРазвернутьСтрокуРезультата() Экспорт
	
	ЗапретРазворачиванияУзлаДерева = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура РезультатПередРазворачиваниемНаСервере(ИмяДерева, Строка, Отказ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыводЗначенийСвойствРазвернутьЗначениеДерева(ЭтаФорма, ЭтаФорма[ИмяДерева], Строка, Отказ);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ДеревоНастроек

&НаКлиенте
Процедура ДобавитьНастройку(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;	
	
	Если ТекущиеДанные = Неопределено Тогда
		ЭлементыДерева = ДеревоНастроек.ПолучитьЭлементы();
	Иначе
		ЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
	КонецЕсли;
	
	НоваяСтрока = ДобавитьНастройкуПоУмолчанию(ЭлементыДерева);
	
	Элементы.ДеревоНастроек.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Файл = Новый Файл(АдресНастроек);

	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиПослеПроверкиСуществованияФайла", ЭтаФорма);
	
	Файл.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПоАдресуНастроек()
	
	Настройки = ПолучитьНастройкиОбработки();
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиПослеЗаписиФайла", ЭтаФорма, Новый Структура("АдресНастроек", АдресНастроек));
	Настройки.НачатьЗапись(Оповещение, АдресНастроек); 
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиКак(Команда)
	
	АдресХранилища = ПолучитьАдресНастроекОбработки();
		
	МассивПолучаемыхФайлов = Новый Массив;
	МассивПолучаемыхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла("", АдресХранилища));
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = АдресНастроек; 
	
	НачатьПолучениеФайлов(Новый ОписаниеОповещения("СохранитьНастройкиЗавершение", ЭтаФорма), МассивПолучаемыхФайлов, Диалог);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт 
    
    Если ПолученныеФайлы = Неопределено
        И Не (ТипЗнч(ПолученныеФайлы) = Тип("Массив")
            И ПолученныеФайлы.Количество()) Тогда
        Возврат;
    КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СохранитьНастройкиПослеПроверкиСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		СохранитьНастройкиПоАдресуНастроек();
	Иначе
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Фильтр = "Все файлы|*.*";
		Диалог.Показать(Новый ОписаниеОповещения("СохранитьНастройкиПослеДиалога", ЭтаФорма, Новый Структура("Диалог", Диалог)));  			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПослеЗаписиФайла(Результат) Экспорт
	
	Если Результат = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось записать файл настроек по адресу " + АдресНастроек;
		Сообщение.Сообщить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПослеДиалога(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Диалог = ДополнительныеПараметры.Диалог;	
	АдресНастроек = Диалог.ПолноеИмяФайла;
	
	СохранитьНастройкиПоАдресуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Все файлы|*.*";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = КаталогНастроек();
	Диалог.Показать(Новый ОписаниеОповещения("ОткрытьФайлЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));  	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	АдресНастроек = Диалог.ПолноеИмяФайла;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиНастроек", ЭтаФорма);
	
	НачатьЗагрузкуНастроек(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПоднятьНастройкуВверх(Команда)
	
	// TODO найти способ получше
	ТекущаяНастройка = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущаяНастройка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Родитель = ТекущаяНастройка.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Модифицированность = Истина;
	
	НовыйУзел = Родитель.ПолучитьРодителя();
	
	Если НовыйУзел = Неопределено Тогда
		НовыйУзел = ДеревоНастроек;
	КонецЕсли;
	
	ЭлементыНовогоУзла = НовыйУзел.ПолучитьЭлементы();
	НовыйПорядковыйНомер = ЭлементыНовогоУзла.Индекс(Родитель) + 1;
	НовыйЭлемент = ЭлементыНовогоУзла.Вставить(НовыйПорядковыйНомер);
	
	КопироватьДанныеФормы(ТекущаяНастройка.СписокПараметров, НовыйЭлемент.СписокПараметров);
	ЗаполнитьЗначенияСвойств(НовыйЭлемент,ТекущаяНастройка,,"СписокПараметров");
	Родитель.ПолучитьЭлементы().Удалить(ТекущаяНастройка);

	Элементы.ДеревоНастроек.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьЗапросПоЧастям(Команда)

	Отказ = Ложь;
	ТекстЗапроса = СтрокаВыполнения(Отказ, Истина);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьЗапросПоЧастямЗавершение", ЭтаФорма);
	ПараметрыФормы = Новый Структура("Текст,РежимВыбораЧастей",ТекстЗапроса);
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросовУправляемыеФормыSA.Форма.АнализЗапросов",ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьЗапросПоЧастямЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Результат.Количество() > 0 Тогда
		Модифицированность = Истина;
		РазбитьЗапросПоЧастямЗавершениеНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазбитьЗапросПоЧастямЗавершениеНаСервере(МассивЗапросов) Экспорт
	
	Для Каждого ТекстЗапроса Из МассивЗапросов Цикл
		
		НовыйУзел = ДеревоНастроек.НайтиПоИдентификатору(Элементы.ДеревоНастроек.ТекущаяСтрока).ПолучитьЭлементы().Добавить();
		НовыйУзел.ИмяНастройки = Вычислить("СтрПолучитьСтроку(ТекстЗапроса,1)");
		НовыйУзел.ТекстЗапроса = ТекстЗапроса;
		
		ПолучитьПараметрыИзЗапросаНаСервере(ТекстЗапроса, НовыйУзел.СписокПараметров, Модифицированность);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредопределенныеЗапросы(Команда)
	
	ОбновитьПредопределенныеЗапросыНаСервере(); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредопределенныеЗапросыНаСервере()
	
	УзелНастроек = Неопределено;
	ИмяУзлаНастроек = "Предопределенные запросы";
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("ПредопределенныеНастройки");
	
	Для Каждого ТекущийУзел Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Если ТекущийУзел.ИмяНастройки = ИмяУзлаНастроек Тогда
			УзелНастроек = ТекущийУзел;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелНастроек = Неопределено Тогда
		УзелНастроек = ДеревоНастроек.ПолучитьЭлементы().Добавить();
		УзелНастроек.ИмяНастройки = ИмяУзлаНастроек;
	КонецЕсли;
	
	ЭлементыУзла = УзелНастроек.ПолучитьЭлементы();
	ЭлементыУзла.Очистить();
	
	Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
		
		НоваяНастройка = ЭлементыУзла.Добавить();	
		НоваяНастройка.ИмяНастройки = ОбработкаОбъект.ТекстЯчейкиТабличногоДокумента(Макет, НомерСтроки, 1);
		НоваяНастройка.ТекстЗапроса = ОбработкаОбъект.ТекстЯчейкиТабличногоДокумента(Макет, НомерСтроки, 2);
		НоваяНастройка.ПроизвольныйКод = ОбработкаОбъект.ТекстЯчейкиТабличногоДокумента(Макет, НомерСтроки, 3);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницыТекущиеНастройки

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	
	Текст = ЭлементНастроекПоТекущейСтранице().ВыделенныйТекст;
	
	Если Текст = "" И АктивнаСтраницаЗапрос() Тогда
		Текст = СтрокаВыполнения(, Ложь);
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоСтроки(Текст, "|", Истина);
	КонецЕсли;

	ТекстЗапроса = СокрЛП(Текст);
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда // В режиме толстого клиента конструктор не принимает пустую строку
		КонструкторЗапроса = Новый КонструкторЗапроса();
	Иначе
		КонструкторЗапроса = Новый КонструкторЗапроса(ТекстЗапроса);
	КонецЕсли;	
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		КонструкторЗапроса.ОткрытьМодально();
		ПриЗакрытииКонструктораЗапроса(КонструкторЗапроса.Текст, Новый Структура());
	#Иначе
		КонструкторЗапроса.Показать(Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапроса",ЭтаФорма));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(Результат) Тогда
		Возврат;
	КонецЕсли;

	Элемент = ЭлементНастроекПоТекущейСтранице();
	ВыделенныйТекст = Элемент.ВыделенныйТекст; 
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если АктивнаСтраницаЗапрос() Тогда
		
		// Если текст не выделяли, то обновляем весь документ
		Если ПустаяСтрока(ВыделенныйТекст) Тогда
			ТекущиеДанные.ТекстЗапроса = Результат;	
		Иначе		
			Элемент.ВыделенныйТекст = Результат;
		КонецЕсли;
		
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		
		КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоСтроки(Результат, "|");
		Элемент.ВыделенныйТекст = Результат;
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	УдалитьКомандыВыводаВременныхТаблиц();
	
	Отказ = Ложь;

	ПараметрыВыполнения = ПараметрыВыполненияЗадания(Отказ, Истина);

	ВыполнитьЗадание(ПараметрыВыполнения, Отказ);	
	
	ДобавитьКомандыВыводаВременныхТаблиц(ПараметрыВыполнения.МассивВременныхТаблиц);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗапросВременнаяТаблица(Команда)
	
	Отказ = Ложь;

	ПараметрыВыполнения = ПараметрыВыполненияЗадания(Отказ, Истина, , Команда.Имя);

	ВыполнитьЗадание(ПараметрыВыполнения, Отказ);	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакет(Команда)
	
	Отказ = Ложь;
 
	ПараметрыВыполнения = ПараметрыВыполненияЗадания(Отказ, Истина, Истина);

	ВыполнитьЗадание(ПараметрыВыполнения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроизвольныйКод(Команда)
	
	Отказ = Ложь;
	
	ПараметрыВыполнения = ПараметрыВыполненияЗадания(Отказ);
		
	ВыполнитьЗадание(ПараметрыВыполнения, Отказ);		

	// Обновим таблице параметров, они могли измениться кодом.
	СписокПараметров = Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров;
	СписокПараметров.Очистить();	
	Для Каждого КлючИЗначение Из ПараметрыВыполнения.Параметры Цикл
		НовыйПараметр = СписокПараметров.Добавить();
		НовыйПараметр.Имя = КлючИЗначение.Ключ;
		НовыйПараметр.Значение = КлючИЗначение.Значение;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроизвольныйКодНаКлиенте(Команда)
	
	Отказ = Ложь;
	
	ПараметрыВыполнения = ПараметрыВыполненияЗадания(Отказ);
	
	ОчиститьРезультаты();
		
	ВыполнитьЗаданиеНаКлиенте(ЭтаФорма, ПараметрыВыполнения, Отказ); 
	
	Если ЗначениеЗаполнено(АдресРезультатаВыполнения) Тогда
		ВывестиРезультат();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Закомментировать(Команда)

	Элемент = ЭлементНастроекПоТекущейСтранице();
	КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоТекстовогоДокумента(Элемент, "//")

КонецПроцедуры

&НаКлиенте
Процедура Раскомментировать(Команда)
	
	Элемент = ЭлементНастроекПоТекущейСтранице();
	КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоТекстовогоДокумента(Элемент, "//", Истина)

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПереносСтроки(Команда)
	
	Элемент = ЭлементНастроекПоТекущейСтранице();
	КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоТекстовогоДокумента(Элемент, "|")

КонецПроцедуры

&НаКлиенте
Процедура УбратьПереносСтроки(Команда)
	
	Элемент = ЭлементНастроекПоТекущейСтранице();
	КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоТекстовогоДокумента(Элемент, "|", Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьОтступ(Команда)
	
	Элемент = ЭлементНастроекПоТекущейСтранице();
	КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоТекстовогоДокумента(Элемент, Символы.Таб, Истина)

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТекст(Команда)
	
	Текст = СтрокаВыполнения();
	ПараметрыОткрытия = Новый Структура("Текст", Текст);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьТекстЗавершение", ЭтаФорма);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросовУправляемыеФормыSA.Форма.РедакторТекста",ПараметрыОткрытия,,,,,ОписаниеОповещения, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТекстЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если АктивнаСтраницаЗапрос() Тогда	
		Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса = Результат;		
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		Элементы.ДеревоНастроек.ТекущиеДанные.ПроизвольныйКод = Результат;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АнализЗапроса(Команда)
	
	Отказ = Ложь;
	Текст = СтрокаВыполнения(Отказ, Истина);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Текст", Текст);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьТекстЗавершение", ЭтаФорма);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросовУправляемыеФормыSA.Форма.АнализЗапросов",ПараметрыОткрытия,,,,,ОписаниеОповещения, РежимОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область Результаты

&НаКлиенте
Процедура ОткрытьТабличныйДокументВОтдельномОкне(Команда)
	
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросовУправляемыеФормыSA.Форма.ФормаТабличногоДокумента",
		Новый Структура("ТабличныйДокумент",ТабличныйДокумент));

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборРезультатаКоманда(Команда)
	
	ПоказатьЗначениеВОтдельномОкне(ЭтаФорма, Команда, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьЗначениеВОтдельномОкне(Команда)
		
	ПоказатьЗначениеВОтдельномОкне(ЭтаФорма, Команда, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПолучитьПараметрыИзЗапроса(Команда)
	
	ТекстЗапроса = СтрокаВыполнения();
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаПараметров = Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров;

	ПолучитьПараметрыИзЗапросаНаСервере(ТекстЗапроса, ТаблицаПараметров, Модифицированность);
	
	Если Модифицированность Тогда // Если ничего небыло добавлено, то не будем копировать
		КопироватьДанныеФормы(ТаблицаПараметров, Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыИзДругойНастройки(Команда)
	
	Если Элементы.ДеревоНастроек.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПараметрыИзДругойНастройкиЗавершение", ЭтаФорма);
	ПараметрыФормы = Новый Структура("Дерево",ДеревоНастроек);
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросовУправляемыеФормыSA.Форма.ВыборПараметров",ПараметрыФормы,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыИзДругойНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ДополнитьПараметры(Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров, Результат, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
		
	Если ПроверитьПодключениеКБазе(ТекущиеПараметрыПодключения()) Тогда
		ПоказатьПредупреждение(,"Соединение создано");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ВыполнитьЗадание(ПараметрыВыполнения,Отказ)
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;

	СтрокаРезультата = Объект.Результаты.Добавить();
	
	ПараметрыВыполнения.Вставить("НомерСтрокиРезультата",СтрокаРезультата.НомерСтроки);
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	  
	ВыполнитьЗаданиеНаСервере(ПараметрыВыполнения);	
	
	// При выводе в ТЗ переменная СтрокаРезультата теряется
	СтрокаРезультата = Объект.Результаты[ПараметрыВыполнения.НомерСтрокиРезультата-1];
	СтрокаРезультата.ВремяОбщее = ПредставлениеЗамераВСекундах(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьЗаданиеНаКлиенте(ЭтотОбъект, ПараметрыВыполнения, Отказ)
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;

	Параметры = ПараметрыВыполнения.Параметры;
	Результат = Неопределено;
	
	// TODO Добавить замеры
	СтрокаРезультата = ЭтотОбъект.Объект.Результаты.Добавить();

	Выполнить ПараметрыВыполнения.ТекстКода;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ЭтотОбъект.АдресРезультатаВыполнения = ПоместитьВоВременноеХранилище(Результат, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;

	ПараметрыВыполнения.Параметры = Параметры;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаданиеНаСервере(ПараметрыВыполнения)
	
	ОчиститьРезультаты();
	
	ПараметрыВыполнения.Вставить("Форма",ЭтаФорма); // Для операций с элементами формы.
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	ОбработкаОбъект.ТекущееЗадание = ПараметрыВыполнения;
		
	Результат = ОбработкаОбъект.ВыполнитьЗадание();	
	АдресРезультатаВыполнения = ПоместитьВоВременноеХранилище(Результат, ЭтаФорма);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект,"Объект");
	
	Попытка	
		ВывестиРезультат();		
	Исключение
		Сообщить(ОписаниеОшибки()); // Исключения роняют клиента	
	КонецПопытки;

	ПараметрыВыполнения.Форма = Неопределено; // На клиент не верунть.
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеПараметры()

	ПроверитьДеревоНастроек();
	
	ТекущиеПараметры = Новый Структура();
	
	Для Каждого СтрокаПараметра Из Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров Цикл
		ТекущиеПараметры.Вставить(СтрокаПараметра.Имя, СтрокаПараметра.Значение);	
	КонецЦикла;
	
	Возврат ТекущиеПараметры;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДеревоНастроек()

	ЭлементыДерева = ДеревоНастроек.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		ДобавитьНастройкуПоУмолчанию(ЭлементыДерева);
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции

&НаКлиенте
Функция ДобавитьНастройкуПоУмолчанию(ЭлементыДерева = Неопределено);
	
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = ДеревоНастроек.ПолучитьЭлементы();
	КонецЕсли;
	
	НоваяНастройка = ЭлементыДерева.Добавить();
	НоваяНастройка.ИмяНастройки = "НоваяНастройка";
	НоваяНастройка.ТекстЗапроса = ТекстЗапросаПоУмолчанию();
	НоваяНастройка.ПроизвольныйКод = ПроизвольныйКодПоУмолчанию();
	Элементы.ДеревоНастроек.ТекущаяСтрока = 0;
	
	Возврат НоваяНастройка;
	
КонецФункции

&НаСервере
Процедура ОчиститьРезультаты();
	
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокументЗагружен = Ложь;
	РезультатЗагружен = Ложь;
	ТаблицаЗначенийЗагружена = Ложь;	
	ДеревоЗначенийЗагружено = Ложь;
	
	Элементы.СтраницаЗамеры.Заголовок = "Замеры";
	
	// Очистить диаграмму 
	ДиаграммаЗамеров.КоличествоТочек = 0;
	ДиаграммаЗамеров.КоличествоСерий = 0;
	
	АдресРезультатаВыполнения = "";
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультат()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультатаВыполнения) Тогда
		Возврат
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультатаВыполнения);
	
	ТекущаяСтраница = Элементы.СтраницыРезультата.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаРезультатаПоУмолчанию Тогда
		
		МассивТаблиц = ОбработкаОбъект.ЗначениеВПроизвольнуюКоллекцию(Результат);  
		ОбработкаОбъект.ДобавитьМассивЗначенийНаФому(ЭтаФорма, Элементы.ГруппаРезультат, МассивТаблиц, Элементы.ДекорацияНетДанных);

		РезультатЗагружен = Истина;
			
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент Тогда
		
		ТабличныйДокумент = ОбработкаОбъект.ЗначениеВТабличныйДокумент(Результат);
		
		ТабличныйДокументЗагружен = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаТаблицаЗначений Тогда
		
		МассивТаблиц = ОбработкаОбъект.ЗначениеВТаблицуЗначений(Результат);
		ОбработкаОбъект.ДобавитьМассивЗначенийНаФому(ЭтаФорма, Элементы.ГруппаТаблицыЗначений, МассивТаблиц, Элементы.ДекорацияНетДанныхСтраницаТаблицаЗначений);
		
		ТаблицаЗначенийЗагружена = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДеревоЗначений Тогда
		
		МассивТаблиц = ОбработкаОбъект.ЗначениеВДеревоЗначений(Результат);
		ОбработкаОбъект.ДобавитьМассивЗначенийНаФому(ЭтаФорма, Элементы.ГруппаДереваЗначений, МассивТаблиц, Элементы.ДекорацияНетДанныхСтраницаДеревоЗначений);
		
		ДеревоЗначенийЗагружено = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗамеры Тогда
		
		ОбработкаОбъект.ЗаполнитьДиаграммуЗамеров(ДиаграммаЗамеров);
		
	КонецЕсли;
	
	// Обновим заголовок страницы замеров
	ПоследнийЗамер = Объект.Результаты[Объект.Результаты.Количество()-1];
	ПредставлениеВремениЗамера = ПредставлениеЗамераВСекундах(ПоследнийЗамер.ВремяВыполнения);
	Элементы.СтраницаЗамеры.Заголовок = "Замеры (последний "+ПредставлениеВремениЗамера+" с.)";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиОбработки()
	
	Настройки = Новый Структура();
	
	Настройки.Вставить("ДеревоНастроек",ДанныеФормыВЗначение(ДеревоНастроек,Тип("ДеревоЗначений")));
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ИмяВременногоФайла,Настройки);
	
	Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресНастроекОбработки()
	
	Настройки = Новый Структура();
	
	Настройки.Вставить("ДеревоНастроек",ДанныеФормыВЗначение(ДеревоНастроек,Тип("ДеревоЗначений")));
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ИмяВременногоФайла,Настройки);
	
	Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(Данные,УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНастройки();
	Если ПустаяСтрока(АдресНастроек) Тогда
		ДобавитьНастройкуПоУмолчанию();
	Иначе	
		НачатьЗагрузкуНастроек(Новый ОписаниеОповещения("ПослеЗагрузкиНастроек", ЭтаФорма));	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуНастроек(Знач Оповещение) Экспорт
	
	Файл = Новый Файл(АдресНастроек);	
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ЗагрузитьНастройкиПослеПроверкиСуществованияФайла", ЭтаФорма, Оповещение));

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиПослеПроверкиСуществованияФайла(Существует, ОповещениеПослеЗагрузкиНастроек) Экспорт
		
	Если Существует Тогда  
		
		ОбработкаОкончанияПомещения = Новый ОписаниеОповещения("ОбработчикОкончанияПомещенияНастроекНаСервер", ЭтаФорма, ОповещениеПослеЗагрузкиНастроек);
		
		#Если ВебКлиент Тогда                                                
			НачатьПомещениеФайла(ОбработкаОкончанияПомещения, , АдресНастроек, Истина); // В веб клиентне доступен только интерактивный режим
		#Иначе
			НачатьПомещениеФайла(ОбработкаОкончанияПомещения, , АдресНастроек, Ложь);
		#КонецЕсли
		
	Иначе
		
		ДобавитьНастройкуПоУмолчанию();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОкончанияПомещенияНастроекНаСервер(Результат, Адрес, ВыбранноеИмяФайла, ОповещениеПослеЗагрузкиНастроек) Экспорт
	
	Если Результат Тогда
		
		ЗагрузитьНастройкиИзФайла(Адрес);
		
		ВыполнитьОбработкуОповещения(ОповещениеПослеЗагрузкиНастроек);
		
	Иначе
		
		ПоказатьПредупреждение(,"Не удалось поместить файл настроек во временное хранилище");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиИзФайла(АдресВоВременномХранилище)

	АдресВременногоФайла = ПолучитьИмяВременногоФайла();
		
	Файл = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Файл.Записать(АдресВременногоФайла); 
	
	Попытка
		
		Настройки = ЗначениеИзФайла(АдресВременногоФайла);
		
		// + Совместимость
		// В таблице СписокПараметров колонка ИмяПараметра переименована в Имя 
		Дерево = Настройки.ДеревоНастроек; 
		Если Дерево.Строки.Количество() > 0 Тогда
			Если Дерево.Строки[0].СписокПараметров.Колонки.Найти("ИмяПараметра") <> Неопределено Тогда
				Совместимость_КопироватьКолонкуТаблицыСписокПараметров(Дерево.Строки,"ИмяПараметра","Имя");
			КонецЕсли;	
		КонецЕсли;	
		// - Совместимость
			
		ЗначениеВДанныеФормы(Настройки.ДеревоНастроек,ДеревоНастроек);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось загрузить настройки. Описание ошибки: "+ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
	УдалитьФайлы(АдресВременногоФайла);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьДеревоНастроек();
	
	Для Каждого ЭлементДерева Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		
		Элементы.ДеревоНастроек.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		
	КонецЦикла;

	Если ЗначениеЗаполнено(ТекущаяСтрокаДеревоНастроек) Тогда
		
		Элементы.ДеревоНастроек.ТекущаяСтрока = ТекущаяСтрокаДеревоНастроек;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтраницаДеревоНастроек) Тогда
		
		Попытка 
			Элементы.ТекущиеНастройки.ТекущаяСтраница = Элементы[ТекущаяСтраницаДеревоНастроек];
		Исключение
			// Такой страницы больше нет
		КонецПопытки;
		
		ОбновитьОкноПроизвольногоКода();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторЗначенияИзЭлемента(Элемент) Экспорт
	
	Возврат Элемент.ТекущиеДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "")];
			
КонецФункции

#КонецОбласти

#Область Запросы

&НаСервереБезКонтекста
Процедура ПолучитьПараметрыИзЗапросаНаСервере(ТекстЗапроса,ТаблицаПараметров,Модифицированность = Ложь)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	
	ДополнитьПараметры(ТаблицаПараметров,ПараметрыЗапроса,Модифицированность);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьПараметры(Приемник,Источник,Модифицированность)
	
	ЕстьИзменения = Ложь;
	
	Для Каждого ПараметрЗапроса Из Источник Цикл
		
		ИмяПараметра = ПараметрЗапроса.Имя;
		СтрокаПараметров = Приемник.НайтиСтроки(Новый Структура("Имя",ИмяПараметра));
		
		Если СтрокаПараметров.Количество() = 0 Тогда		
			СтрокаПараметров = Приемник.Добавить();
			СтрокаПараметров.Имя = ИмяПараметра;
			ЕстьИзменения = Истина;
		Иначе
			СтрокаПараметров = СтрокаПараметров[0];	
		КонецЕсли; 
		
		Если ТипЗнч(ПараметрЗапроса) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			Если СтрокаПараметров.Значение <> ПараметрЗапроса.Значение Тогда
				ЕстьИзменения = Истина;
				СтрокаПараметров.Значение = ПараметрЗапроса.Значение;	
	        КонецЕсли;
		Иначе
			СтрокаПараметров.Значение = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(СтрокаПараметров.Значение);
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция	УдалитьКомандыВыводаВременныхТаблиц();
	
	Для Каждого Элемент Из Элементы.ГруппаКнопокВременныеТаблицы.ПодчиненныеЭлементы Цикл
		
		Команды.Удалить(Команды.Найти(Элемент.Имя));

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция	ДобавитьКомандыВыводаВременныхТаблиц(МассивВременныхТаблиц);
	
	Для Каждого ИмяТаблицы Из МассивВременныхТаблиц Цикл
		
		ИмяКоманды = ИмяТаблицы;
		НоваяКоманда = Команды.Добавить(ИмяКоманды);
		НоваяКоманда.Действие = "Подключаемый_ВыполнитьЗапросВременнаяТаблица";
		
		Элемент = Элементы.Добавить(ИмяКоманды, 
		Тип("КнопкаФормы"), 
		Элементы.ГруппаКнопокВременныеТаблицы);
		
		Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Элемент.ИмяКоманды = ИмяКоманды;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗапросаПоУмолчанию()
	
	Возврат "ВЫБРАТЬ ПЕРВЫЕ 1000 * ИЗ Справочник.Имя";
	
КонецФункции

#КонецОбласти

#Область ПроизвольныйКод

Функция ПроизвольныйКодПоУмолчанию()

	Возврат 
	"Результат = ВыполнитьЗапрос().Выгрузить();
	|
	|Для Каждого ТекущаяСтрока Из Результат Цикл
	|	
	|КонецЦикла";

КонецФункции

&НаКлиенте
Процедура ОбновитьОкноПроизвольногоКода()

	Если Элементы.ТекущиеНастройки.ТекущаяСтраница <> Элементы.СтраницаПроизвольныйКод Тогда
		Возврат;
	КонецЕсли;

	Элементы.ДеревоНастроекПроизвольныйКод.Видимость = Не РежимПросмотраПроизвольногоКода;
	Элементы.ПанельНастроекПроизвольныйКодКомандыКомпактно.Доступность = Не РежимПросмотраПроизвольногоКода; 
	Элементы.ПроизвольныйКодВебДокумент.Видимость = РежимПросмотраПроизвольногоКода;
	
	Если РежимПросмотраПроизвольногоКода Тогда
		ПроизвольныйКодВебДокумент = ПолучитьHTMLПредставлениеКода(Элементы.ДеревоНастроек.ТекущиеДанные.ПроизвольныйКод); 
	КонецЕсли;   
	
КонецПроцедуры

&НаСервере
Функция ПолучитьHTMLПредставлениеКода(Знач ИсходныйТекст) Экспорт

	ТекстКода = СокрП(ИсходныйТекст);

	//при переносе данных в строке могут появится 13-тые символы Юникода
	ТекстКода = СтрЗаменить(ТекстКода, Символ(13), "");
 
	ТекстКода = СтрЗаменить(ТекстКода, Символы.ПС, "\n");
	ТекстКода = СтрЗаменить(ТекстКода, """", "\""");
	ТекстКода = СтрЗаменить(ТекстКода, "'", "’");

	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СкриптРаскрашивания");

	ТекстHTML = Макет.ПолучитьТекст();

	Стиль = "
		|.comment, .comment span, .comment span span, .comment span span span {color:green}
		|body {color:blue; font-family: \'Courier New\', Courier; font-size: 80%;}
		|p {padding: 0; margin: 2px 0px 2px 0px;}
		|.attribute {color:brown}
		|.number {color:black}
		|.string, .string span {color:black}
		|.datestring, .datestring span {color:magenta}
		|.sign {color:red}
		|.semicolon {color:red}
		|.macro {color:brown}
		|.operator {color:red}
		
		|.numberline {color:gray}
		
		|.key {color:red}";

	ТекстHTML = СтрЗаменить(ТекстHTML, "#%&styles#%&", Стиль);
	ТекстHTML = СтрЗаменить(ТекстHTML, "#%&text#%&", "'" + ТекстКода + "'");

	Возврат ТекстHTML;
 
КонецФункции

#КонецОбласти

#Область ВнешнееСоединение
&НаКлиенте
Функция ТекущиеПараметрыПодключения()

	ПроверитьДеревоНастроек();
	
	ТекущиеПараметры = Новый Структура();

	ТекущиеПараметры.Вставить("ВнешняяБазаФайловая"	,ВнешняяБазаФайловая);
	ТекущиеПараметры.Вставить("ПутьКБазе"			,ПутьКБазе);
	ТекущиеПараметры.Вставить("ИмяСервера"			,ИмяСервера);
	ТекущиеПараметры.Вставить("ИмяБазы"				,ИмяБазы);
	ТекущиеПараметры.Вставить("ИмяПользователя"		,ИмяПользователя);
	ТекущиеПараметры.Вставить("Пароль"				,Пароль);
		
	Возврат ТекущиеПараметры;
	
КонецФункции

Функция ПроверитьПодключениеКБазе(ПараметрыПодключения)
	
	РеквизитФормыВЗначение("Объект").ПолучитьПодключениеКБазе(ПараметрыПодключения);	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ПараметрыВыполненияЗадания(Отказ, ЭтоЗапрос = Ложь, Пакет = Ложь, ИмяВременнойТаблицы = "");
	
	ПараметрыВыполнения = Новый Структура();	
	
	Если ЭтоЗапрос Тогда
		ПараметрыВыполнения.Вставить("ИмяМетода","ВыполнитьЗапрос");
		ПараметрыВыполнения.Вставить("ТекстКода",Элементы.ДеревоНастроек.ТекущиеДанные.ПроизвольныйКод);
		ПараметрыВыполнения.Вставить("ТекстЗапроса", СтрокаВыполнения(Отказ,Истина));
	Иначе
		ПараметрыВыполнения.Вставить("ИмяМетода","ВыполнитьКод");
		ПараметрыВыполнения.Вставить("ТекстКода",СтрокаВыполнения(Отказ,Истина));
		ПараметрыВыполнения.Вставить("ТекстЗапроса",Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса);
	КонецЕсли;
		
	ПараметрыВыполнения.Вставить("Параметры",ТекущиеПараметры());
	ПараметрыВыполнения.Вставить("ПараметрыПодключенияКВнешнейБазе",ТекущиеПараметрыПодключения());
	ПараметрыВыполнения.Вставить("Пакет",Пакет);
	ПараметрыВыполнения.Вставить("ИмяВременнойТаблицы",ИмяВременнойТаблицы);
	ПараметрыВыполнения.Вставить("МассивВременныхТаблиц", Новый Массив);
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

&НаКлиенте
Функция СтрокаВыполнения(Отказ = Ложь, ВыводитьПредупреждение = Истина)

	ПроверитьДеревоНастроек();
	
	СтрокаВыполнения = СтрокаВыполненияПоТекущейСтранице();
	Предупреждение = "";
	
	Если СтрокаВыполнения = ТекстЗапросаПоУмолчанию() Тогда
		Отказ = Истина;
		Предупреждение = "Измените текст запроса";
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(СтрокаВыполнения)) Тогда
		Отказ = Истина;
		Предупреждение = "Не заполнен текстовый документ";			
	КонецЕсли;
	
	Если Отказ Тогда
		
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(,Предупреждение);
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли;

	Возврат СтрокаВыполнения;
	
КонецФункции

&НаКлиенте
Функция ЭлементНастроекПоТекущейСтранице()
	
	Если АктивнаСтраницаЗапрос() Тогда
		Возврат Элементы.ДеревоНастроекТекстЗапроса;
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		Возврат Элементы.ДеревоНастроекПроизвольныйКод;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Функция СтрокаВыполненияПоТекущейСтранице()
	
	Если Элементы.ДеревоНастроек.ТекущиеДанные = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если АктивнаСтраницаЗапрос() Тогда
		Возврат Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса;
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		Возврат Элементы.ДеревоНастроек.ТекущиеДанные.ПроизвольныйКод;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Функция АктивнаСтраницаЗапрос()
	
	Возврат (Элементы.ТекущиеНастройки.ТекущаяСтраница = Элементы.СтраницаТекстЗапроса);
	
КонецФункции

&НаКлиенте
Функция АктивнаСтраницаПроизвольныйКод()
	
	Возврат (Элементы.ТекущиеНастройки.ТекущаяСтраница = Элементы.СтраницаПроизвольныйКод);
	
КонецФункции

&НаКлиенте
Функция ТекстСтраницыПустой(Страница)
	
	ТекстПоУмолчанию = "";
	
	Если Элементы.ДеревоНастроек.ТекущиеДанные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Страница = Элементы.СтраницаТекстЗапроса Тогда
		ТекстСтраницы = Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса;
		ТекстПоУмолчанию = ТекстЗапросаПоУмолчанию();
	ИначеЕсли Страница = Элементы.СтраницаПроизвольныйКод Тогда
		ТекстСтраницы = Элементы.ДеревоНастроек.ТекущиеДанные.ПроизвольныйКод;
		ТекстПоУмолчанию = ПроизвольныйКодПоУмолчанию();
	КонецЕсли;
	
	Если ТекстСтраницы = ТекстПоУмолчанию
		Или СокрЛП(ТекстСтраницы) = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПредставлениеЗамераВСекундах(Милисекунды)
	Возврат Строка(Милисекунды/1000)
КонецФункции

Функция КаталогНастроек()

	МассивЧастейПути = Вычислить("СтрРазделить(АдресНастроек,""\"")");	

	Если МассивЧастейПути.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивЧастейПути.Удалить(МассивЧастейПути.Количество()-1);
	
	Возврат Вычислить("СтрСоединить(МассивЧастейПути,""\"")");
		
КонецФункции

&НаКлиенте
Процедура ПоказатьЗначениеВОтдельномОкне(Форма, Команда, ТолькоСтроку = Истина) Экспорт
	
	ВерсияПлатформы = ВерсияПлатформы();
	
	Если ВерсияПлатформы.Редакция = 83
		И ВерсияПлатформы.Версия > 11 Тогда 
		Таблица = Команда.ИспользуемаяТаблица; 
	Иначе
		ПоказатьПредупреждение(, "Показ значения в отдельном окне доступен начиная с платформы 8.3.12");
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	
	Если Не ТолькоСтроку Тогда
		
		ПараметрыФормы.Вставить("НаКлиенте", Ложь);
		ПараметрыФормы.Вставить("АдресРезультатаВыполнения", АдресРезультатаВыполнения);
		ПараметрыФормы.Вставить("Выражение", "ПолучитьИзВременногоХранилища(АдресРезультатаВыполненияВладельца)");
			
	ИначеЕсли Таблица.Отображение = ОтображениеТаблицы.Список Тогда
		
		ПараметрыФормы.Вставить("Выражение", "ВладелецФормы."+Таблица.Имя+"["+Таблица.ТекущаяСтрока+"]");
		
	Иначе

		ПараметрыФормы.Вставить("Выражение", ПутьКСтрокеДерева(Форма, Таблица.Имя, Таблица.ТекущиеДанные));
		
	КонецЕсли;
			                                                                                               
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросовУправляемыеФормыSA.Форма.ФормаЗначенияВОтдельномОкне", ПараметрыФормы, Форма, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПутьКСтрокеДерева(Форма, ИмяТаблицы, ТекущиеДанные) Экспорт
	
	Таблица = Форма[ИмяТаблицы];
	
	МассивИндексов = Новый Массив;
	ЗаполнитьИндексыПутиКТекущейСтрокеДерева(Таблица, ТекущиеДанные, МассивИндексов);
	
	Выражение = "ВладелецФормы." + ИмяТаблицы;
	Счетчик = МассивИндексов.Количество();
	Пока Счетчик <> 0 Цикл
		
		Счетчик = Счетчик - 1;
		Индекс = МассивИндексов[Счетчик];
		Выражение = Выражение + ".ПолучитьЭлементы()[" + Индекс + "]"
		
	КонецЦикла;
	
	Возврат Выражение;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИндексыПутиКТекущейСтрокеДерева(Дерево, ТекущиеДанные, МассивИндексов)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		
		Индекс = Дерево.ПолучитьЭлементы().Индекс(ТекущиеДанные);
		МассивИндексов.Добавить(Индекс);
		Возврат;
		
	КонецЕсли;
	
	Индекс = Родитель.ПолучитьЭлементы().Индекс(ТекущиеДанные);	
	МассивИндексов.Добавить(Индекс);	
	ЗаполнитьИндексыПутиКТекущейСтрокеДерева(Дерево, Родитель, МассивИндексов);

КонецПроцедуры

&НаСервере
Процедура Совместимость_КопироватьКолонкуТаблицыСписокПараметров(Строки, ИмяКолонки, ИмяНовойКолонки);
	
	Для Каждого Строка Из Строки Цикл
		
		Строка.СписокПараметров.Колонки.Добавить(ИмяНовойКолонки);
		
		Для Каждого СтрокаПараметра Из Строка.СписокПараметров Цикл
			СтрокаПараметра[ИмяНовойКолонки] = СтрокаПараметра[ИмяКолонки];		
		КонецЦикла;
		
		Совместимость_КопироватьКолонкуТаблицыСписокПараметров(Строка.Строки,ИмяКолонки,ИмяНовойКолонки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияПлатформы() Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	ВерсияМассив = РазложитьСтрокуВМассивПодстрок(ВерсияПлатформы,".");
	Описание = Новый ОписаниеТипов("Число");
	
	ВерсияСтруктура = Новый Структура();
	ВерсияСтруктура.Вставить("Редакция", Описание.ПривестиЗначение(ВерсияМассив[0] + ВерсияМассив[1])); 
	ВерсияСтруктура.Вставить("Версия", Описание.ПривестиЗначение(ВерсияМассив[2]));
	ВерсияСтруктура.Вставить("Сборка", Описание.ПривестиЗначение(ВерсияМассив[3]));
	
	Возврат ВерсияСтруктура;

КонецФункции // ВерсияПлатформы()

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
    Знач ПропускатьПустыеСтроки = Неопределено)
 
    Результат = Новый Массив;
 
    // для обеспечения обратной совместимости
    Если ПропускатьПустыеСтроки = Неопределено Тогда
        ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
        Если ПустаяСтрока(Строка) Тогда 
            Если Разделитель = " " Тогда
                Результат.Добавить("");
            КонецЕсли;
            Возврат Результат;
        КонецЕсли;
    КонецЕсли;
    //
 
    Позиция = Найти(Строка, Разделитель);
    Пока Позиция > 0 Цикл
        Подстрока = Лев(Строка, Позиция - 1);
        Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
            Результат.Добавить(Подстрока);
        КонецЕсли;
        Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
        Позиция = Найти(Строка, Разделитель);
    КонецЦикла;
 
    Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
        Результат.Добавить(Строка);
    КонецЕсли;
 
    Возврат Результат;
 
КонецФункции

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Элементы.ПутьКБазе.Видимость = ВнешняяБазаФайловая;
	Элементы.ИмяСервера.Видимость = Не ВнешняяБазаФайловая;
	Элементы.ИмяБазы.Видимость = Не ВнешняяБазаФайловая;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
