#Область ОписаниеПеременных	
&НаКлиенте
Перем КонсольОбщиеМодулиКлиент;
&НаКлиенте
Перем ЗапретРазворачиванияУзлаДерева; // Защита от бесконечного цикла из-за сочетания клавиш ctrl shift + 
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Метаданные.РежимСовместимостиИнтерфейса = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.Версия8_2 Тогда
		Элементы.ГруппаПараметры.Поведение = ПоведениеОбычнойГруппы.Обычное;	
	КонецЕсли;
	
	Если Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		ВерсияПлатформы = ВерсияПлатформы();
		РежимСовместимостиЧисло = Число("" + ВерсияПлатформы.Редакция + ВерсияПлатформы.Версия);
	Иначе
		РежимСовместимостиЧисло = Число(СтрЗаменить(СтрЗаменить(Метаданные.РежимСовместимости, "Версия", ""), "_", ""));
	КонецЕсли;

	Если РежимСовместимостиЧисло < 836 Тогда
		
		Элементы.КонструкторЗапроса.Доступность = Ложь;	
		Элементы.ПроизвольныйКодКонструкторЗапроса.Доступность = Ложь;
		Команды.Найти("КонструкторЗапроса").Подсказка = "Конструктор не доступен в режиме совместимости 8.3.5 и ниже";
		
	КонецЕсли; 
	
	ЗаполнитьСписокВыбораТиповПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	#Если ВебКлиент Тогда
		НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПослеПодключенияРасширенияРаботыСФайлами", ЭтаФорма));
	#Иначе
		ЗагрузитьНастройки();
	#КонецЕсли

	КонсольОбщиеМодулиКлиент = ПолучитьФорму(ИмяОбработки() + ".Форма.ОбщиеМодулиКлиент");

	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если АвтоматическиСохранятьПриЗакрытии
		И Не ПустаяСтрока(АдресНастроек) Тогда
		Файл = Новый Файл(АдресНастроек);
		Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиПослеПроверкиСуществованияФайла", ЭтаФорма);	
		Файл.НачатьПроверкуСуществования(Оповещение);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда		
		ЗагрузитьНастройки();	
	Иначе		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОтветНаВопросОбУстановкеРасширения", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, Нстр("ru = 'Установить расширение для работы с файлами?'"), РежимДиалогаВопрос.ДаНет);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОбУстановкеРасширения(Ответ,ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда		
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ДеревоНастроек

&НаКлиенте
Процедура ДеревоНастроекПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоНастроек.ТекущаяСтрока <> Неопределено Тогда
		
		Если ТекущаяСтрокаДеревоНастроек = Элементы.ДеревоНастроек.ТекущаяСтрока Тогда
			Возврат; // Строка не изменилась, событие произошло не при смене строк.
		КонецЕсли;
		
		ТекущаяСтрокаДеревоНастроек = Элементы.ДеревоНастроек.ТекущаяСтрока;
		
	КонецЕсли;

	ОбновитьОкноПроизвольногоКода();
	
	// Если текст текущей вкладке пустой, то перейдем на другую вкладку (если на ней не пусто)
	ИзменитьСтраницу = Ложь;
	НоваяСтраница = Неопределено;
	ТекстСтраницы = СтрокаВыполненияПоТекущейСтранице();
	ТекстПоУмолчанию = "";
	
	Если АктивнаСтраницаЗапрос() Тогда
		
		ИзменитьСтраницу = ТекстСтраницыПустой(Элементы.СтраницаТекстЗапроса);
		АльтернативнаяСтраница = Элементы.СтраницаПроизвольныйКод;
		
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		
		ИзменитьСтраницу = ТекстСтраницыПустой(Элементы.СтраницаПроизвольныйКод);
	    АльтернативнаяСтраница = Элементы.СтраницаТекстЗапроса;

	КонецЕсли;
	
	Если ИзменитьСтраницу
		И Не ТекстСтраницыПустой(АльтернативнаяСтраница) Тогда
		Элементы.ТекущиеНастройки.ТекущаяСтраница = АльтернативнаяСтраница;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		Приемник = ДеревоНастроек; // Перемещаем в корень
	Иначе
		Приемник = ДеревоНастроек.НайтиПоИдентификатору(Строка);
	КонецЕсли;
		
	Для Каждого ЭлементДерева Из ПараметрыПеретаскивания.Значение Цикл
		
		ПереместитьСтрокиДереваНастроек(ДеревоНастроек.НайтиПоИдентификатору(ЭлементДерева), Приемник);	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Копирование Тогда
		
		Отказ = Истина;
		
		Родитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда
			ЭлементыРодителя = ДеревоНастроек.ПолучитьЭлементы();	
		Иначе
			ЭлементыРодителя = Родитель.ПолучитьЭлементы()
		КонецЕсли;
		
		НоваяСтрока = ЭлементыРодителя.Вставить(ЭлементыРодителя.Индекс(Элемент.ТекущиеДанные) + 1);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.ТекущиеДанные,, "СписокПараметров");
		КопироватьДанныеФормы(Элемент.ТекущиеДанные.СписокПараметров, НоваяСтрока.СписокПараметров);

		Элемент.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор(); 
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекСписокПараметровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент = Элементы.ДеревоНастроекСписокПараметровЗначение Тогда 
		Если ТекущиеДанные.ТипПараметра <> 0 Тогда 
			
			СтандартнаяОбработка = Ложь;
			
			Если ПустаяСтрока(ТекущиеДанные.АдресЗначения) Тогда  
				ТекущиеДанные.АдресЗначения = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоНастроекСписокПараметровВыборЗавершение"
				, ЭтаФорма, Новый Структура("ТекущиеДанные, АдресЗначения"
				, ТекущиеДанные
				, ТекущиеДанные.АдресЗначения));
				
			ПараметрыФормы = Новый Структура("АдресЗначения", ТекущиеДанные.АдресЗначения);	
			ОткрытьФорму(ИмяОбработки() + ".Форма.ФормаЗаполненияТаблицыЗначений", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекСписокПараметровВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Модифицированность = Истина;
	ДополнительныеПараметры.ТекущиеДанные.Значение = ПредставлениеЗначения(ДополнительныеПараметры.ТекущиеДанные.АдресЗначения);    
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеНастройки
&НаКлиенте
Процедура ТекущиеНастройкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущаяСтраницаДеревоНастроек = ТекущаяСтраница.Имя;
	
	Если ТекущаяСтраница = Элементы.СтраницаВнешнееСоединение Тогда
		
		Если ЗначениеЗаполнено(ВариантСоединения) Тогда
			Элементы.СтраницыВнешнееСоединение.ТекущаяСтраница = Элементы.СтраницаВнешнееСоединениеВыполнение;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьОкноПроизвольногоКода();

КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПроизвольногоКодаПриИзменении(Элемент)
	
	ОбновитьОкноПроизвольногоКода();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСоединенияПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяБазаФайловаяПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекТекстЗапросаПриИзменении(Элемент)
	
	УправлениеВидимостью();
	
КонецПроцедуры

#КонецОбласти

#Область Результат

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка) = Тип("ТабличныйДокумент") Тогда
		
		ОткрытьФорму(ИмяОбработки() + ".Форма.ФормаТабличногоДокумента",
			Новый Структура("ТабличныйДокумент", Расшифровка));
			
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтраницыРезультатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
	//Если ТекущаяСтраница = Элементы.СтраницаРезультатаПоУмолчанию Тогда
	//	Если Не РезультатЗагружен Тогда 
	//		ВывестиРезультат();	  
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницаТаблицаЗначений Тогда
		Если Не РезультатТаблицаЗначенийЗагружена Тогда 
			ВывестиРезультат();	  
		КонецЕсли;
	КонецЕсли;

	Если ТекущаяСтраница = Элементы.СтраницаДеревоЗначений Тогда
		Если Не РезудьтатДеревоЗначенийЗагружено Тогда 
			ВывестиРезультат();	  
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент Тогда
		Если Не ТабличныйДокументЗагружен Тогда 
			ВывестиРезультат();	  
		КонецЕсли;
	КонецЕсли;

	Если ТекущаяСтраница = Элементы.СтраницаЗамеры Тогда
		ВывестиРезультат();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РезультатыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Результаты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	//АктивнаяТочка = ДиаграммаЗамеров.Точки.Получить(Объект.Результаты.Индекс(ТекущиеДанные));
	//ДиаграммаЗамеров.АктивнаяТочка = АктивнаяТочка;
	
	//Для Каждого Серия Из ДиаграммаЗамеров.Серии Цикл
	//	
	//	Если Серия.Значение = ТекущиеДанные.СтрокаВыполнения Тогда
	//		
	//		ДиаграммаЗамеров.АктивнаяСерия = Серия;
	//		Прервать;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.РезультатыСтрокаВыполнения Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Объект.Результаты.НайтиПоИдентификатору(ВыбраннаяСтрока).СтрокаВыполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборРезультата(Элемент)
	
	ВыборРезультата(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРезультата(Форма, Элемент) Экспорт
	
	Если Элемент.ТекущийЭлемент.ГиперссылкаЯчейки Тогда
		
		ИдентификаторЗначения = ИдентификаторЗначенияИзЭлемента(Элемент);
		
		ЕстьСвойствоТип = Элемент.ТекущиеДанные.Свойство("Тип");
		СпособВывода = "ОткрытьФормуОбработки";
		Значение = Неопределено;
		ПолучитьЗначение = Ложь;
		
		Если ЕстьСвойствоТип Тогда
			
			Если ЭтоПредставлениеСсылочногоТипа(Элемент.ТекущиеДанные.Тип) Тогда
				СпособВывода = "ПоказатьЗначение";
				Значение = ПолучитьЗначениеИзВременногоХранилищаНаСервере(Форма.АдресХранилищаЗначений, ИдентификаторЗначения);
			ИначеЕсли Найти(Элемент.ТекущиеДанные.Тип, "Перечисление.") = 1 Тогда
				Значение = Элемент.ТекущиеДанные.Тип + "." +
					ПолучитьЗначениеИзВременногоХранилищаНаСервере(Форма.АдресХранилищаЗначений, ИдентификаторЗначения, Истина);	
				СпособВывода = "ПоказатьВводЗначения";
			ИначеЕсли Найти(Элемент.ТекущиеДанные.Тип, "Строка") = 1
				Или Найти(Элемент.ТекущиеДанные.Тип, "Дата") = 1 
				Или Найти(Элемент.ТекущиеДанные.Тип, "Число") = 1
				Или Найти(Элемент.ТекущиеДанные.Тип, "Булево") = 1 Тогда 
				Значение = ПолучитьЗначениеИзВременногоХранилищаНаСервере(Форма.АдресХранилищаЗначений, ИдентификаторЗначения);
				СпособВывода = "ПоказатьВводЗначения";	
			ИначеЕсли Найти(Элемент.ТекущиеДанные.Тип, "Уникальный идентификатор") = 1 Тогда
				Значение = Строка(ИдентификаторЗначения);
				СпособВывода = "ПоказатьВводЗначения";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
	Если СпособВывода = "ОткрытьФормуОбработки" Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("АдресХранилищаЗначений", Форма.АдресХранилищаЗначений);
		ПараметрыФормы.Вставить("ИдентификаторЗначения", ИдентификаторЗначения);
		ПараметрыФормы.Вставить("НаКлиенте", Ложь);
		ПараметрыФормы.Вставить("Выражение", "ПолучитьИзВременногоХранилища(АдресХранилищаЗначенийВладельца).Получить(ИдентификаторЗначения)");			
		ОткрытьФорму(ИмяОбработки() + ".Форма.ФормаЗначенияВОтдельномОкне", ПараметрыФормы, Форма, Истина);
		    
	ИначеЕсли СпособВывода = "ПоказатьЗначение" Тогда 
		
		ПоказатьЗначение(,Значение);
		
	ИначеЕсли СпособВывода = "ПоказатьВводЗначения" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВводЗначенияЯчейкиЗавершение", ЭтаФорма);
		ПоказатьВводЗначения(Оповещение, Значение, Элемент.ТекущиеДанные.Свойство);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводЗначенияЯчейкиЗавершение(Значение, ДополнительныеПараметры) Экспорт
	// Обработчик добавлен потому что это обязательный параметр метода ПоказатьВводЗначения.	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииСтроки(Элемент)
	
	ПриАктивизацииСтроки(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтроки(Форма, Элемент) Экспорт
	
	ЭлементУстановитьНовоеЗначение = Форма.Элементы.Найти(Элемент.Имя + "УстановитьНовоеЗначение");
	
	Если ЭлементУстановитьНовоеЗначение = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ЭлементУстановитьНовоеЗначение.Доступность = Ложь;
	
	Если Элемент.Отображение = ОтображениеТаблицы.Дерево
		И Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Родитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
		
		Если Родитель <> Неопределено 
			И Родитель.Свойство("Свойство") Тогда
			
			ЭлементУстановитьНовоеЗначение.Доступность = 
				ЭтоПредставлениеСсылочногоТипа(Родитель.Тип)
				И ЗначениеЗаполнено(Родитель.ЗначениеПредставление);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область РазворачиваниеРезультата
&НаКлиенте
Процедура Подключаемый_РезультатПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если ЗапретРазворачиванияУзлаДерева = Истина Тогда
		Отказ = Истина;
		ПодключитьОбработчикОжидания("РазрешитьРазвернутьСтрокуРезультата", 0.1, Истина);
		Возврат
	КонецЕсли;

	РезультатПередРазворачиваниемНаСервере(Элемент.Имя, Строка, Отказ);
	
	ЗапретРазворачиванияУзлаДерева = Истина;	
	ПодключитьОбработчикОжидания("РазрешитьРазвернутьСтрокуРезультата", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРазвернутьСтрокуРезультата() Экспорт
	
	ЗапретРазворачиванияУзлаДерева = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура РезультатПередРазворачиваниемНаСервере(ИмяДерева, Строка, Отказ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыводЗначенийСвойствРазвернутьЗначениеДерева(ЭтаФорма, ЭтаФорма[ИмяДерева], Строка, Отказ);

КонецПроцедуры
#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ДеревоНастроек

&НаКлиенте
Процедура ДобавитьНастройку(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;	
	
	Если ТекущиеДанные = Неопределено Тогда
		ЭлементыДерева = ДеревоНастроек.ПолучитьЭлементы();
	Иначе
		ЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
	КонецЕсли;
	
	НоваяСтрока = ДобавитьНастройкуПоУмолчанию(ЭлементыДерева);
	
	Элементы.ДеревоНастроек.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Файл = Новый Файл(АдресНастроек);
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиПослеПроверкиСуществованияФайла", ЭтаФорма);	
	Файл.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПоАдресуНастроек()
	
	Настройки = ПолучитьНастройкиОбработки();
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиПослеЗаписиФайла", ЭтаФорма, Новый Структура("АдресНастроек", АдресНастроек));
	Настройки.НачатьЗапись(Оповещение, АдресНастроек); 
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиКак(Команда)
	
	АдресХранилища = ПоместитьНастройкиВоВременноеХранилище();
		
	МассивПолучаемыхФайлов = Новый Массив;
	МассивПолучаемыхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла("", АдресХранилища));
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = АдресНастроек; 
	Диалог.Фильтр = "Настройки консоли запросов (*.qcs)|*.qcs|Все файлы (*.*)|*.*";
	Диалог.Расширение = "qcs"; 

	НачатьПолучениеФайлов(Новый ОписаниеОповещения("СохранитьНастройкиЗавершение", ЭтаФорма), МассивПолучаемыхФайлов, Диалог);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт 
    
    Если ПолученныеФайлы = Неопределено
        И Не (ТипЗнч(ПолученныеФайлы) = Тип("Массив")
            И ПолученныеФайлы.Количество()) Тогда
        Возврат;
    КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура СохранитьНастройкиПослеПроверкиСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		СохранитьНастройкиПоАдресуНастроек();
	Иначе
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Фильтр = "Файлы запросов (*.qcs)|*.qcs|Все файлы (*.*)|*.*";
		Диалог.Расширение = "qcs";
		Диалог.Показать(Новый ОписаниеОповещения("СохранитьНастройкиПослеДиалога", ЭтаФорма, Новый Структура("Диалог", Диалог)));  			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПослеЗаписиФайла(Результат) Экспорт
	
	Если Результат = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось записать файл настроек по адресу " + АдресНастроек;
		Сообщение.Сообщить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПослеДиалога(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Диалог = ДополнительныеПараметры.Диалог;	
	АдресНастроек = Диалог.ПолноеИмяФайла;
	
	СохранитьНастройкиПоАдресуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Все файлы|*.*";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = КаталогНастроек();
	Диалог.Показать(Новый ОписаниеОповещения("ОткрытьФайлЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));  	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	АдресНастроек = Диалог.ПолноеИмяФайла;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиНастроек", ЭтаФорма);
	
	НачатьЗагрузкуНастроек(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПоднятьНастройкуВыше(Команда)
	
	ТекущаяНастройка = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущаяНастройка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Родитель = ТекущаяНастройка.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	НовыйУзел = Родитель.ПолучитьРодителя();
	
	Если НовыйУзел = Неопределено Тогда
		НовыйУзел = ДеревоНастроек;
	КонецЕсли;
	
	ПереместитьСтрокиДереваНастроек(ТекущаяНастройка, НовыйУзел);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьЗапросПоЧастям(Команда)

	Отказ = Ложь;
	ТекстЗапроса = СтрокаВыполнения(Отказ, Истина);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьЗапросПоЧастямЗавершение", ЭтаФорма);
	ПараметрыФормы = Новый Структура("Текст,РежимВыбораЧастей",ТекстЗапроса);
	ОткрытьФорму(ИмяОбработки() + ".Форма.АнализЗапросов",ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьЗапросПоЧастямЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Результат.Количество() > 0 Тогда
		Модифицированность = Истина;
		РазбитьЗапросПоЧастямЗавершениеНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазбитьЗапросПоЧастямЗавершениеНаСервере(МассивЗапросов) Экспорт
	
	Для Каждого ТекстЗапроса Из МассивЗапросов Цикл
		
		НовыйУзел = ДеревоНастроек.НайтиПоИдентификатору(Элементы.ДеревоНастроек.ТекущаяСтрока).ПолучитьЭлементы().Добавить();
		НовыйУзел.ИмяНастройки = Вычислить("СтрПолучитьСтроку(ТекстЗапроса, 1)");
		НовыйУзел.ТекстЗапроса = ТекстЗапроса;
		
		ПолучитьПараметрыИзЗапросаНаСервере(ТекстЗапроса, НовыйУзел.СписокПараметров);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредопределенныеЗапросы(Команда)
	
	ОбновитьПредопределенныеЗапросыНаСервере(); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредопределенныеЗапросыНаСервере()
	
	УзелНастроек = Неопределено;
	ИмяУзлаНастроек = "Предопределенные запросы";
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("ПредопределенныеНастройки");
	
	Для Каждого ТекущийУзел Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Если ТекущийУзел.ИмяНастройки = ИмяУзлаНастроек Тогда
			УзелНастроек = ТекущийУзел;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелНастроек = Неопределено Тогда
		УзелНастроек = ДеревоНастроек.ПолучитьЭлементы().Добавить();
		УзелНастроек.ИмяНастройки = ИмяУзлаНастроек;
	КонецЕсли;
	
	ЭлементыУзла = УзелНастроек.ПолучитьЭлементы();
	ЭлементыУзла.Очистить();
	
	Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
		
		НоваяНастройка = ЭлементыУзла.Добавить();	
		НоваяНастройка.ИмяНастройки = Макет.Область(НомерСтроки, 1).Текст;
		НоваяНастройка.ТекстЗапроса = Макет.Область(НомерСтроки, 2).Текст;
		НоваяНастройка.ПроизвольныйКод = Макет.Область(НомерСтроки, 3).Текст;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасположениеНастроек(Команда)
	
	Если Не ПустаяСтрока(АдресНастроек) Тогда	
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОткрытьРасположениеНастроекЗавершение", ЭтаФорма), КаталогНастроек());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасположениеНастроекЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиСохранятьПриЗакрытии(Команда)
	
	АвтоматическиСохранятьПриЗакрытии = Не АвтоматическиСохранятьПриЗакрытии;
	Элементы.ДеревоНастроекАвтоматическиСохранять.Пометка = АвтоматическиСохранятьПриЗакрытии;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураХраненияБазыДанных(Команда)  
	ОткрытьФорму(ИмяОбработки() + ".Форма.СтруктураХраненияБазыДанных");
КонецПроцедуры

&НаКлиенте
Процедура ОбОбработке(Команда)
	
	ОткрытьФорму(ИмяОбработки() + ".Форма.ОбОбработке",,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницыТекущиеНастройки

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	Текст = ЭлементНастроекПоТекущейСтранице().ВыделенныйТекст;
	
	Если Текст = "" И АктивнаСтраницаЗапрос() Тогда
		Текст = СтрокаВыполнения(, Ложь);
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоСтроки(Текст, "|", Истина);
	КонецЕсли;

	ТекстЗапроса = СокрЛП(Текст);
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда // В режиме толстого клиента конструктор не принимает пустую строку
		КонструкторЗапроса = Новый КонструкторЗапроса();
	Иначе
		КонструкторЗапроса = Новый КонструкторЗапроса(ТекстЗапроса);
	КонецЕсли;	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИдентификаторТекущейНастройки", Элементы.ДеревоНастроек.ТекущаяСтрока);
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		КонструкторЗапроса.ОткрытьМодально();
		КонструкторЗапросаПриЗакрытии(КонструкторЗапроса.Текст, СтруктураПараметров);
	#Иначе	
		КонструкторЗапроса.Показать(Новый ОписаниеОповещения("КонструкторЗапросаПриЗакрытии", ЭтаФорма, СтруктураПараметров));
	#КонецЕсли
	
КонецПроцедуры
	
&НаКлиенте
Процедура БыстрыйКонструктор(Команда)
	
	СтрокаВыполнения = СтрокаВыполненияПоТекущейСтранице();
	
	Если Не (ПустаяСтрока(СтрокаВыполнения) Или СтрокаВыполнения = ТекстЗапросаПоУмолчанию()) Тогда
		Оповещение = Новый ОписаниеОповещения("БыстрыйКонструкторПослеОтветаНаВопрос", ЭтаФорма);	
		ПоказатьВопрос(Оповещение, "Текст запроса будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат
	КонецЕсли;
 
	БыстрыйКонструкторОткрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	УдалитьКомандыВыводаВременныхТаблиц();
	
	Задание = НовоеЗадание("ВыполнитьЗапрос", Истина);
	ВыполнитьЗадание(Задание);	
	
	ДобавитьКомандыВыводаВременныхТаблиц(Задание.МассивВременныхТаблиц);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗапросВременнаяТаблица(Команда)

	Задание = НовоеЗадание("ВыполнитьЗапрос", Истина, , Команда.Имя);
	ВыполнитьЗадание(Задание);	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакет(Команда)
	
	Задание = НовоеЗадание("ВыполнитьЗапрос", Истина, Истина);
	ВыполнитьЗадание(Задание);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроизвольныйКод(Команда)
	
	Задание = НовоеЗадание("ВыполнитьКод");		
	ВыполнитьЗадание(Задание);		

	// Обновим таблицу параметров, они могли измениться выполненым кодом.
	СписокПараметров = Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров;
	СписокПараметров.Очистить();	
	Для Каждого КлючИЗначение Из Задание.Параметры Цикл
		НовыйПараметр = СписокПараметров.Добавить();
		НовыйПараметр.Имя = КлючИЗначение.Ключ; 
		НовыйПараметр.Значение = КлючИЗначение.Значение;
		Если ЭтоАдресВременногоХранилища(НовыйПараметр.Значение) Тогда
			НовыйПараметр.ТипПараметра = 1;   
			НовыйПараметр.Значение = ПредставлениеЗначения(НовыйПараметр.Значение);
			НовыйПараметр.АдресЗначения = КлючИЗначение.Значение;
		КонецЕсли; 		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроизвольныйКодНаКлиенте(Команда)
	
	Задание = НовоеЗадание("ВыполнитьКод");	
	ОчиститьРезультаты();		
	ВыполнитьЗаданиеНаКлиенте(ЭтаФорма, Задание); 
	
	Если ЗначениеЗаполнено(АдресРезультатаВыполнения) Тогда
		ВывестиРезультат();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВнешнееСоединение(Команда)
	
	Задание = НовоеЗадание(МетодВнешнееСоединениеЗапрос(), Истина);
	ВыполнитьЗадание(Задание);		

КонецПроцедуры

&НаКлиенте
Процедура Закомментировать(Команда)

	Элемент = ЭлементНастроекПоТекущейСтранице();
	СимволыКомментария = СимволыДобавитьКомментарийТекущейСтраницы();
	КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоТекстовогоДокумента(Элемент, СимволыКомментария)

КонецПроцедуры

&НаКлиенте
Процедура Раскомментировать(Команда)
	
	Элемент = ЭлементНастроекПоТекущейСтранице();
	СимволыКомментария = СимволыДобавитьКомментарийТекущейСтраницы();
	КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоТекстовогоДокумента(Элемент, СимволыКомментария, Истина)

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПереносСтроки(Команда)
	
	Элемент = ЭлементНастроекПоТекущейСтранице();
	КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоТекстовогоДокумента(Элемент, "|")

КонецПроцедуры

&НаКлиенте
Процедура УбратьПереносСтроки(Команда)
	
	Элемент = ЭлементНастроекПоТекущейСтранице();
	КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоТекстовогоДокумента(Элемент, "|", Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьОтступ(Команда)
	
	Элемент = ЭлементНастроекПоТекущейСтранице();
	КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоТекстовогоДокумента(Элемент, Символы.Таб, Истина)

КонецПроцедуры

&НаКлиенте
Процедура РедакторТекста(Команда)
	
	Текст = СтрокаВыполнения(, Ложь);
	ПараметрыОткрытия = Новый Структура("Текст", Текст);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедакторТекстаЗавершение", ЭтаФорма);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ИмяОбработки() + ".Форма.РедакторТекста"
		, ПараметрыОткрытия,,,,
		, ОписаниеОповещения
		, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура АнализЗапроса(Команда)
	
	Отказ = Ложь;
	Текст = СтрокаВыполнения(Отказ, Истина);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Текст", Текст);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедакторТекстаЗавершение", ЭтаФорма);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;

	ОткрытьФорму(ИмяОбработки() + ".Форма.АнализЗапросов"
		, ПараметрыОткрытия,,,,
		, ОписаниеОповещения
		, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗапроса(Команда)  
	
	Отказ = Ложь;
	ТекстЗапроса = СтрокаВыполнения(Отказ, Истина);
	
	Если Не Отказ Тогда
		ПроверкаЗапросаНаСервере(ТекстЗапроса);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Результаты

&НаКлиенте
Процедура ОткрытьТабличныйДокументВОтдельномОкне(Команда)
	
	ОткрытьФорму(ИмяОбработки() + ".Форма.ФормаТабличногоДокумента",
		Новый Структура("ТабличныйДокумент",ТабличныйДокумент));

КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСумму(Команда)
	КонсольОбщиеМодулиКлиент.ПоказатьРасчетЯчеек(ЭтаФорма, ТабличныйДокумент);  // СтандартныеПодсистемыКлиент
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборРезультатаКоманда(Команда)
	
	ПоказатьЗначениеВОтдельномОкне(ЭтаФорма, Команда, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьЗначениеВОтдельномОкне(Команда)
		
	ПоказатьЗначениеВОтдельномОкне(ЭтаФорма, Команда, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПолучитьПараметрыИзЗапроса(Команда)
	
	СтрокаВыполнения = СтрокаВыполнения();
	
	Если ПустаяСтрока(СтрокаВыполнения) Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаПараметров = Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров;
    ЕстьИзменения = Ложь;
	
	Если АктивнаСтраницаЗапрос() Тогда
		ЕстьИзменения = ПолучитьПараметрыИзЗапросаНаСервере(СтрокаВыполнения, ТаблицаПараметров);
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		ЕстьИзменения = ПолучитьПараметрыИзПроизвольногоКодаНаСервере(СтрокаВыполнения, ТаблицаПараметров);
	КонецЕсли;

	Если ЕстьИзменения Тогда 
		КопироватьДанныеФормы(ТаблицаПараметров, Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыИзДругойНастройки(Команда)
	
	Если Элементы.ДеревоНастроек.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПараметрыИзДругойНастройкиЗавершение", ЭтаФорма);
	ПараметрыФормы = Новый Структура("Дерево", ДеревоНастроек);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 0); // TODO вычислить путь к текущей строке и передать
	ОткрытьФорму(ИмяОбработки() + ".Форма.ВыборПараметров", ПараметрыФормы,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыИзДругойНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ДополнитьПараметры(ЭтаФорма, Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
		
	Если ПроверитьПодключениеКВнешнемуИсточнику(ТекущиеПараметрыПодключения()) Тогда
		ПоказатьПредупреждение(,"Соединение создано");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Задания

#Область ВыполнениеЗаданий
&НаКлиенте
Функция НовоеЗадание(ИмяМетода, ЭтоЗапрос = Ложь, Пакет = Ложь, ИмяВременнойТаблицы = "");

	НовоеЗадание = Новый Структура("ЕстьОшибки", Ложь);	
	
	Если Элементы.ДеревоНастроек.ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Пожалуйста, выбирите настройку в дереве настроек";
		Сообщение.Поле = "ДеревоНастроек";
		Сообщение.Сообщить();
		НовоеЗадание.ЕстьОшибки = Истина;
		Возврат НовоеЗадание;
	КонецЕсли;
	
	Если ЭтоЗапрос Тогда		
		НовоеЗадание.Вставить("ТекстКода", Элементы.ДеревоНастроек.ТекущиеДанные.ПроизвольныйКод);
		НовоеЗадание.Вставить("ТекстЗапроса", СтрокаВыполнения(НовоеЗадание.ЕстьОшибки, Истина));
	Иначе
		НовоеЗадание.Вставить("ТекстКода", СтрокаВыполнения(НовоеЗадание.ЕстьОшибки, Истина));
		НовоеЗадание.Вставить("ТекстЗапроса", Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса);
	КонецЕсли;
	
	НовоеЗадание.Вставить("ИмяМетода", ИмяМетода);
	НовоеЗадание.Вставить("Параметры", ТекущиеПараметры(НовоеЗадание.ЕстьОшибки));
	НовоеЗадание.Вставить("ПараметрыПодключенияКВнешнейБазе", ТекущиеПараметрыПодключения());
	НовоеЗадание.Вставить("Пакет", Пакет);
	НовоеЗадание.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	НовоеЗадание.Вставить("МассивВременныхТаблиц", Новый Массив);
	
	// Проверка заполнения обязательных параметров
	Если ИмяМетода = МетодВнешнееСоединениеЗапрос() Тогда
		
		МассивРеквизитовДляПроверки = Новый Массив;
		
		Если ВариантСоединения = ВариантСоединенияV83COMConnector() 
			И ВнешняяБазаФайловая Тогда
			МассивРеквизитовДляПроверки.Добавить("Путь к базе");
		Иначе 
			МассивРеквизитовДляПроверки.Добавить("Имя сервера");
			МассивРеквизитовДляПроверки.Добавить("Имя базы");		
		КонецЕсли;
		
		МассивРеквизитовДляПроверки.Добавить("Пользователь");
		
		Для Каждого ИмяРеквизита Из МассивРеквизитовДляПроверки Цикл
			Если ПустаяСтрока(ЭтаФорма[СтрЗаменить(ИмяРеквизита, " ", "")]) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнено значение параметра " + ИмяРеквизита;
				Сообщение.Поле = ИмяРеквизита;
				Сообщение.Сообщить();
				НовоеЗадание.ЕстьОшибки = Истина;
				Элементы.СтраницыВнешнееСоединение.ТекущаяСтраница = Элементы.СтраницаВнешнееСоединениеНастройки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗадание(Задание)
	
	Если Задание.ЕстьОшибки Тогда
		Возврат
	КонецЕсли;

	СтрокаРезультата = Объект.Результаты.Вставить(0);
	
	Задание.Вставить("НомерСтрокиРезультата", СтрокаРезультата.НомерСтроки);
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	  
	ВыполнитьЗаданиеНаСервере(Задание);	
	
	// При выводе в ТЗ переменная СтрокаРезультата теряется
	СтрокаРезультата = Объект.Результаты[Задание.НомерСтрокиРезультата - 1];
	СтрокаРезультата.ВремяОбщее = ПредставлениеЗамераВСекундах(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьЗаданиеНаКлиенте(Форма, Задание)
	
	Если Задание.ЕстьОшибки Тогда
		Возврат
	КонецЕсли;

	Параметры = Задание.Параметры;
	Результат = Неопределено;
	
	// TODO Добавить замеры
	СтрокаРезультата = Форма.Объект.Результаты.Вставить(0);

	Выполнить Задание.ТекстКода;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Форма.АдресРезультатаВыполнения = ПоместитьВоВременноеХранилище(Результат, Форма.УникальныйИдентификатор);
	КонецЕсли;

	Задание.Параметры = Параметры;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаданиеНаСервере(Задание)
	
	ОчиститьРезультаты();
	
	Задание.Вставить("Форма", ЭтаФорма); // Для операций с элементами формы.
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	ОбработкаОбъект.ТекущееЗадание = Задание;
		
	Результат = ОбработкаОбъект.ВыполнитьЗадание();	
	АдресРезультатаВыполнения = ПоместитьВоВременноеХранилище(Результат, ЭтаФорма);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Попытка	
		ВывестиРезультат();		
	Исключение
		Сообщить(ОписаниеОшибки()); // Если не обернуть, то исключение может положить клиента.	
	КонецПопытки;

	Задание.Форма = Неопределено; // На клиент не верунть.
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеПараметры(Отказ)

	ПроверитьДеревоНастроек();
	
	ТекущиеПараметры = Новый Структура();
	
	Для Каждого СтрокаПараметра Из Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров Цикл
		Попытка     
			 
			Если СтрокаПараметра.ТипПараметра <> 0 Тогда  
				ТекущиеПараметры.Вставить(СтрокаПараметра.Имя, СтрокаПараметра.АдресЗначения);	
			Иначе
				ТекущиеПараметры.Вставить(СтрокаПараметра.Имя, СтрокаПараметра.Значение); 	
			КонецЕсли;			
				
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Задано неправильное имя параметра """ + СтрокаПараметра.Имя + """";
			Сообщение.Сообщить();
			Отказ = Истина;
			Элементы.ГруппаПараметры.Показать();
		КонецПопытки;			
	КонецЦикла;
	
	Возврат ТекущиеПараметры;
	
КонецФункции

#КонецОбласти

#Область Результаты

&НаСервере
Процедура ОчиститьРезультаты();
	
	ТабличныйДокумент.Очистить();
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	ТабличныйДокументЗагружен = Ложь;
	РезультатТаблицаЗначенийЗагружена = Ложь;	
	РезудьтатДеревоЗначенийЗагружено = Ложь;
	
	// Очистить диаграмму 
	ДиаграммаЗамеров.КоличествоТочек = 0;
	ДиаграммаЗамеров.КоличествоСерий = 0;
	
	АдресРезультатаВыполнения = "";
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультат()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультатаВыполнения) Тогда
		Возврат
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультатаВыполнения);
	
	ТекущаяСтраница = Элементы.СтраницыРезультата.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаТаблицаЗначений Тогда
		
		МассивТаблиц = ОбработкаОбъект.ЗначениеВТаблицуЗначений(Результат);
		ОбработкаОбъект.ДобавитьМассивЗначенийНаФому(ЭтаФорма, Элементы.ГруппаТаблицыЗначений, МассивТаблиц, Элементы.ДекорацияНетДанныхСтраницаТаблицаЗначений);
		
		РезультатТаблицаЗначенийЗагружена = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДеревоЗначений Тогда
		
		МассивТаблиц = ОбработкаОбъект.ЗначениеВДеревоЗначений(Результат);
		ОбработкаОбъект.ДобавитьМассивЗначенийНаФому(ЭтаФорма, Элементы.ГруппаДереваЗначений, МассивТаблиц, Элементы.ДекорацияНетДанныхСтраницаДеревоЗначений);
		
		РезудьтатДеревоЗначенийЗагружено = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент Тогда
		
		ТабличныйДокумент = ОбработкаОбъект.ЗначениеВТабличныйДокумент(Результат);
		
		ТабличныйДокументЗагружен = Истина;
			
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗамеры Тогда
		
		ОбработкаОбъект.ЗаполнитьДиаграммуЗамеров(ДиаграммаЗамеров);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция МетодВнешнееСоединениеЗапрос();
	Возврат "ВнешнееСоединениеВыполнитьЗапрос";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантСоединенияV83COMConnector();
	Возврат "V83COMConnector";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантСоединенияADODB();
	Возврат "ADODB";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Настройки

#Область ЗагрузкаИСохранение

Функция КаталогНастроек()

	Если ПустаяСтрока(АдресНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Найдем имя файла настроек и вырежем его из полного пути
	ПоложениеФайла = СтрДлина(АдресНастроек);
	
	Пока ПоложениеФайла <> 0 Цикл
		
		ПоложениеФайла = ПоложениеФайла - 1;
		Если Сред(АдресНастроек, ПоложениеФайла, 1) = "\" Тогда
			Прервать;
		КонецЕсли;
				
	КонецЦикла;
		
	Возврат Лев(АдресНастроек, ПоложениеФайла);
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиОбработки()
	
	Настройки = Новый Структура();
	
	Дерево = ДанныеФормыВЗначение(ДеревоНастроек, Тип("ДеревоЗначений"));
	ОбработатьНеотображаемыеЗначенияТаблицыПараметров(Дерево, "ИзьятьИзВременногоХранилища");
	
	Настройки.Вставить("ДеревоНастроек", Дерево);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ИмяВременногоФайла, Настройки);
	
	Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Данные;
	
КонецФункции  

Процедура ОбработатьНеотображаемыеЗначенияТаблицыПараметров(УзелДерева, Режим)
	
	Для Каждого Строка Из УзелДерева.Строки Цикл
		
		Для Каждого Параметр Из Строка.СписокПараметров Цикл
			
			Если Параметр.ТипПараметра = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Режим = "ИзьятьИзВременногоХранилища" Тогда 
				Если ЭтоАдресВременногоХранилища(Параметр.АдресЗначения) Тогда
					Параметр.Значение = ПолучитьИзВременногоХранилища(Параметр.АдресЗначения);
				КонецЕсли;
			Иначе
				Параметр.АдресЗначения = ПоместитьВоВременноеХранилище(Параметр.Значение, УникальныйИдентификатор);	 
				Параметр.Значение = ПредставлениеЗначения(Параметр.Значение); 
			КонецЕсли;
			
		КонецЦикла;

		ОбработатьНеотображаемыеЗначенияТаблицыПараметров(Строка, Режим);
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция ПоместитьНастройкиВоВременноеХранилище()
	
	Настройки = Новый Структура();	
	Настройки.Вставить("ДеревоНастроек", ДанныеФормыВЗначение(ДеревоНастроек, Тип("ДеревоЗначений")));
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ИмяВременногоФайла, Настройки);
	Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНастройки();
	
	Если ПустаяСтрока(АдресНастроек) Тогда
		ДобавитьНастройкуПоУмолчанию();
	Иначе	
		НачатьЗагрузкуНастроек(Новый ОписаниеОповещения("ПослеЗагрузкиНастроек", ЭтаФорма));	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуНастроек(Знач Оповещение) Экспорт
	
	Файл = Новый Файл(АдресНастроек);	
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ЗагрузитьНастройкиПослеПроверкиСуществованияФайла", ЭтаФорма, Оповещение));

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиПослеПроверкиСуществованияФайла(Существует, ОповещениеПослеЗагрузкиНастроек) Экспорт
		
	Если Существует Тогда  
		
		ОбработкаОкончанияПомещения = Новый ОписаниеОповещения("ОбработчикОкончанияПомещенияНастроекНаСервер", ЭтаФорма, ОповещениеПослеЗагрузкиНастроек);
		
		#Если ВебКлиент Тогда                                                
			НачатьПомещениеФайла(ОбработкаОкончанияПомещения, , АдресНастроек, Истина); // В веб клиентне доступен только интерактивный режим
		#Иначе
			НачатьПомещениеФайла(ОбработкаОкончанияПомещения, , АдресНастроек, Ложь);
		#КонецЕсли
		
	Иначе
		
		ДобавитьНастройкуПоУмолчанию();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОкончанияПомещенияНастроекНаСервер(Результат, Адрес, ВыбранноеИмяФайла, ОповещениеПослеЗагрузкиНастроек) Экспорт
	
	Если Результат Тогда
		
		ЗагрузитьНастройкиИзФайла(Адрес);
		
		ВыполнитьОбработкуОповещения(ОповещениеПослеЗагрузкиНастроек);
		
	Иначе
		
		ПоказатьПредупреждение(,"Не удалось поместить файл настроек во временное хранилище");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиИзФайла(АдресВоВременномХранилище)

	АдресВременногоФайла = ПолучитьИмяВременногоФайла();
		
	Файл = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Файл.Записать(АдресВременногоФайла); 
	
	Попытка
		
		Настройки = ЗначениеИзФайла(АдресВременногоФайла);
		Дерево = Настройки.ДеревоНастроек;
		
		// + Совместимость			 
		Если Дерево.Строки.Количество() > 0 Тогда
			// В таблице СписокПараметров колонка ИмяПараметра переименована в Имя 
			Если Дерево.Строки[0].СписокПараметров.Колонки.Найти("ИмяПараметра") <> Неопределено Тогда
				Совместимость_КопироватьКолонкуТаблицыСписокПараметров(Дерево.Строки, "ИмяПараметра", "Имя");
			КонецЕсли;	
			// 1.0.4 Добавлено ТекстВнешнегоСоединения 
			Если Дерево.Колонки.Найти("ТекстВнешнегоСоединения") = Неопределено Тогда
				Дерево.Колонки.Добавить("ТекстВнешнегоСоединения", Новый ОписаниеТипов("Строка"));
			КонецЕсли; 
			// 1.2.13
			Если Дерево.Строки[0].СписокПараметров.Колонки.Найти("НеотображаемыйТип") = Неопределено
				И Дерево.Строки[0].СписокПараметров.Колонки.Найти("ТипПараметра") = Неопределено Тогда
				Совместимость_ДобавитьКолонкуВТаблицуПараметров(Дерево.Строки, "ТипПараметра", Новый ОписаниеТипов("Число"));
				Совместимость_ДобавитьКолонкуВТаблицуПараметров(Дерево.Строки, "АдресЗначения", Новый ОписаниеТипов("Строка"));
			КонецЕсли;          
			// 1.2.16
			Если Дерево.Строки[0].СписокПараметров.Колонки.Найти("НеотображаемыйТип") <> Неопределено Тогда
				Совместимость_ДобавитьКолонкуВТаблицуПараметров(Дерево.Строки, "ТипПараметра", Новый ОписаниеТипов("Число"), "НеотображаемыйТип", "ТипПараметра");
			КонецЕсли;
		КонецЕсли; 		
		// - Совместимость
		
		ОбработатьНеотображаемыеЗначенияТаблицыПараметров(Дерево, "ПоместитьВоВрменноеХранилище");
		
		ЗначениеВДанныеФормы(Дерево, ДеревоНастроек); 
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось загрузить настройки. Описание ошибки: "+ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
	УдалитьФайлы(АдресВременногоФайла);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьДеревоНастроек();

	Элементы.ДеревоНастроек.ТекущаяСтрока = ТекущаяСтрокаДеревоНастроек;
	
	Если ЗначениеЗаполнено(ТекущаяСтраницаДеревоНастроек) Тогда
		
		Попытка 
			Элементы.ТекущиеНастройки.ТекущаяСтраница = Элементы[ТекущаяСтраницаДеревоНастроек];
			ТекущиеНастройкиПриСменеСтраницы(Элементы.ТекущиеНастройки, Элементы[ТекущаяСтраницаДеревоНастроек]);
		Исключение
			// Такой страницы больше нет
		КонецПопытки;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭлементамиФормыТекущиеНастройки

&НаКлиенте
Функция СтрокаВыполнения(Отказ = Ложь, ВыводитьПредупреждение = Истина)

	ПроверитьДеревоНастроек();
	
	СтрокаВыполнения = СтрокаВыполненияПоТекущейСтранице();
	Предупреждение = "";
	
	Если СтрокаВыполнения = ТекстЗапросаПоУмолчанию() Тогда
		Отказ = Истина;
		Предупреждение = "Измените текст запроса";
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(СтрокаВыполнения)) Тогда
		Отказ = Истина;
		Предупреждение = "Не заполнен текстовый документ";			
	КонецЕсли;
	
	Если Отказ Тогда
		
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(,Предупреждение);
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли;

	Возврат СтрокаВыполнения;
	
КонецФункции

&НаКлиенте
Функция ЭлементНастроекПоТекущейСтранице()
	
	Если АктивнаСтраницаЗапрос() Тогда
		Возврат Элементы.ДеревоНастроекТекстЗапроса;
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		Возврат Элементы.ДеревоНастроекПроизвольныйКод;
	ИначеЕсли АктивнаСтраницаВнешнееСоединение() Тогда
		Возврат Элементы.ДеревоНастроекТекстВнешнегоСоединения;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Функция СтрокаВыполненияПоТекущейСтранице()
	
	Если Элементы.ДеревоНастроек.ТекущиеДанные = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если АктивнаСтраницаЗапрос() Тогда
		Возврат Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса;
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		Возврат Элементы.ДеревоНастроек.ТекущиеДанные.ПроизвольныйКод;
	ИначеЕсли АктивнаСтраницаВнешнееСоединение() Тогда
		Возврат Элементы.ДеревоНастроек.ТекущиеДанные.ТекстВнешнегоСоединения;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Функция СимволыДобавитьКомментарийТекущейСтраницы()
	
	Если АктивнаСтраницаЗапрос()
		Или АктивнаСтраницаПроизвольныйКод() Тогда
		
		Возврат "//";	
		
	ИначеЕсли АктивнаСтраницаВнешнееСоединение() Тогда
		
		Если ВариантСоединения = ВариантСоединенияV83COMConnector() Тогда
			Возврат "//";
		Иначе
			Возврат "--";
		КонецЕсли;
		
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Функция АктивнаСтраницаЗапрос()
	
	Возврат (Элементы.ТекущиеНастройки.ТекущаяСтраница = Элементы.СтраницаТекстЗапроса);
	
КонецФункции

&НаКлиенте
Функция АктивнаСтраницаПроизвольныйКод()
	
	Возврат (Элементы.ТекущиеНастройки.ТекущаяСтраница = Элементы.СтраницаПроизвольныйКод);
	
КонецФункции

&НаКлиенте
Функция АктивнаСтраницаВнешнееСоединение()
	
	Возврат (Элементы.ТекущиеНастройки.ТекущаяСтраница = Элементы.СтраницаВнешнееСоединение);
	
КонецФункции

&НаКлиенте
Функция ТекстСтраницыПустой(Страница)
	
	ТекстПоУмолчанию = "";
	
	Если Элементы.ДеревоНастроек.ТекущиеДанные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Страница = Элементы.СтраницаТекстЗапроса Тогда
		ТекстСтраницы = Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса;
		ТекстПоУмолчанию = ТекстЗапросаПоУмолчанию();
	ИначеЕсли Страница = Элементы.СтраницаПроизвольныйКод Тогда
		ТекстСтраницы = Элементы.ДеревоНастроек.ТекущиеДанные.ПроизвольныйКод;
		ТекстПоУмолчанию = ПроизвольныйКодПоУмолчанию();
	КонецЕсли;
	
	Если ТекстСтраницы = ТекстПоУмолчанию
		Или СокрЛП(ТекстСтраницы) = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораТиповПараметров(); 

	ДобавитьЭлементСписокВыбораТиповПараметров(0, "&", "Параметр запроса", БиблиотекаКартинок.КонструкторЗапросаПараметрыТаблицы);
	ДобавитьЭлементСписокВыбораТиповПараметров(1, "ТЗ", "Таблица значений", БиблиотекаКартинок.КонструкторЗапросаВременнаяТаблица);
	ДобавитьЭлементСписокВыбораТиповПараметров(2, "ВТ", "Временная таблица", БиблиотекаКартинок.КонструкторЗапросаОписаниеВременнойТаблицы);
	
	//Поле = Новый РеквизитФормы("КартинкаПараметров", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1,0)), "ДеревоНастроек.СписокПараметров", "Картинка");
	//Массив = Новый Массив;   
	//Массив.Добавить(Поле);
	//ИзменитьРеквизиты(Массив);
	//
	//Элемент = Элементы.Добавить("ДеревоНастроекСписокПараметровКартинка", Тип("ПолеФормы"), Элементы.ДеревоНастроекСписокПараметровГруппаНеотображаемыйТип);	
	//Элемент.ПутьКДанным = "Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров.КартинкаПараметров"; 
	//Элемент.Вид = ВидПоляФормы.ПолеКартинки;
	//Элемент.КартинкаЗначений = БиблиотекаКартинок.КонструкторЗапросаВременнаяТаблица; 
	//Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	//Элементы.Переместить(Элемент, Элементы.ДеревоНастроекСписокПараметровГруппаНеотображаемыйТип, Элементы.ДеревоНастроекСписокПараметровНеотображаемыйТип); 
	//
	//ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
	//// Условие	
	//ЭлементУсловия  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров.ТипПараметра");
	//ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	//ЭлементУсловия.ПравоеЗначение = 0;	
	//// Поле
	//ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();	
	//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементСписокВыбораТиповПараметров(Значение, Представление, ПредставлениеВыбора, Картинка); 
	
	Элементы.ДеревоНастроекСписокПараметровНеотображаемыйТип.СписокВыбора.Добавить(Значение, ПредставлениеВыбора,, Картинка); 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Представление);	
	// Условие	
	ЭлементУсловия  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Элементы.ДеревоНастроек.ТекущиеДанные.СписокПараметров.ТипПараметра");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	ЭлементУсловия.ПравоеЗначение = Значение;	
	// Поле
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНастроекСписокПараметровНеотображаемыйТип.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее
&НаКлиенте
Функция ПроверитьДеревоНастроек()

	ЭлементыДерева = ДеревоНастроек.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		ДобавитьНастройкуПоУмолчанию(ЭлементыДерева);
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции

&НаКлиенте
Функция ДобавитьНастройкуПоУмолчанию(ЭлементыДерева = Неопределено)
	
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = ДеревоНастроек.ПолучитьЭлементы();
	КонецЕсли;
	
	НоваяНастройка = ЭлементыДерева.Добавить();
	НоваяНастройка.ИмяНастройки = "НоваяНастройка";
	НоваяНастройка.ТекстЗапроса = ТекстЗапросаПоУмолчанию();
	НоваяНастройка.ПроизвольныйКод = ПроизвольныйКодПоУмолчанию();
	Если Элементы.ДеревоНастроек.ТекущаяСтрока = Неопределено Тогда
		Элементы.ДеревоНастроек.ТекущаяСтрока = 0;
	КонецЕсли;
	
	Возврат НоваяНастройка;
	
КонецФункции

&НаКлиенте
Процедура ПереместитьСтрокиДереваНастроек(Источник, Приемник)
		
	Если ТипЗнч(Приемник) <> Тип("ДанныеФормыДерево")
		И Приемник.ПолучитьРодителя() = Источник Тогда
		Возврат // Если не вернуться, то клиент упадет.	
	КонецЕсли;
	
	Родитель = Источник.ПолучитьРодителя();
	
	Если Родитель = Приемник Тогда
		Возврат; // Ничего не изменилось.
	ИначеЕсли Родитель = Неопределено Тогда
		Родитель = ДеревоНастроек;
	КонецЕсли;

	Модифицированность = Истина;
	
	ЭлементыНовогоУзла = Приемник.ПолучитьЭлементы();
	НовыйПорядковыйНомер = ЭлементыНовогоУзла.Индекс(Родитель) + 1;  // Вставим под крайним элементом
	НовыйЭлемент = ЭлементыНовогоУзла.Вставить(НовыйПорядковыйНомер);
	
	КопироватьДанныеФормы(Источник.СписокПараметров, НовыйЭлемент.СписокПараметров);
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, Источник,, "СписокПараметров");

	Для Каждого ПодСтрока Из Источник.ПолучитьЭлементы() Цикл 
		ПереместитьСтрокиДереваНастроек(Подстрока, НовыйЭлемент);
	КонецЦикла;
	
	Родитель.ПолучитьЭлементы().Удалить(Источник);
	
	Элементы.ДеревоНастроек.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Запросы

&НаСервере
Функция ПолучитьПараметрыИзЗапросаНаСервере(ТекстЗапроса, ТаблицаПараметров)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	НайденныеПараметры = Новый Массив;	
	
	Для Каждого Параметр Из Запрос.НайтиПараметры() Цикл      
		
		Если Параметр.ТипЗначения = Новый ОписаниеТипов("ТаблицаЗначений") Тогда 
			Продолжить; // Далее найдем его в тексте запроса для определения колонок.
		Иначе
			НайденныеПараметры.Добавить(Новый Структура("Имя, ТипЗначения, Значение, ТипПараметра, АдресЗначения", Параметр.Имя, Параметр.ТипЗначения));  
		КонецЕсли;
		
	КонецЦикла;
	
	// Поиск параметра - таблицы значений
	СхемаЗапроса = Новый СхемаЗапроса();  
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса); 
	
	МассивДоступныхТиповДляТЗ = Новый Массив; // TODO дополнить
	ОписаниеТипов = Новый ОписаниеТипов(); 
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, "Дата");
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, "Число");
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, "Булево");
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, "Строка",,, Новый КвалификаторыСтроки(1024));
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, Справочники.ТипВсеСсылки().Типы());
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, Документы.ТипВсеСсылки().Типы());
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, Перечисления.ТипВсеСсылки().Типы());
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ПланыСчетов.ТипВсеСсылки().Типы());
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, Задачи.ТипВсеСсылки().Типы());
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	//ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ПланыОбмена.ТипВсеСсылки().Типы());   
	
	Для Каждого ПакетЗапросов Из СхемаЗапроса.ПакетЗапросов Цикл  
		
		Если ТипЗнч(ПакетЗапросов) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Оператор Из ПакетЗапросов.Операторы Цикл 
			Для Каждого Истончник Из Оператор.Источники Цикл 
				
				Истончник = Истончник.Источник;
				
				Если Не ТипЗнч(Истончник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
					Продолжить;
				КонецЕсли;   
				
				Если Найти(Истончник.ИмяТаблицы, "&") = 1 Тогда
					
					НоваяТаблица = Новый ТаблицаЗначений;
					Для Каждого Поле Из Истончник.ДоступныеПоля Цикл  
						НоваяТаблица.Колонки.Добавить(Поле.Имя, ОписаниеТипов);	
					КонецЦикла;  
					
					НайденныеПараметры.Добавить(Новый Структура("Имя, ТипЗначения, Значение, ТипПараметра, АдресЗначения"
						, Сред(Истончник.ИмяТаблицы, 2)
						, Новый ОписаниеТипов("Строка")
						, ПредставлениеЗначения(НоваяТаблица)
						, 1
						, ПоместитьВоВременноеХранилище(НоваяТаблица, УникальныйИдентификатор)));
					
				КонецЕсли;
						
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
			
	Возврат ДополнитьПараметры(ЭтаФорма, ТаблицаПараметров, НайденныеПараметры);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьПараметры(Форма, Приемник, Источник)
	
	ЕстьИзменения = Ложь;
	
	Для Каждого Параметр Из Источник Цикл
		
		ИмяПараметра = Параметр.Имя;
		СтрокаПараметров = Приемник.НайтиСтроки(Новый Структура("Имя", ИмяПараметра));
		
		Если СтрокаПараметров.Количество() = 0 Тогда		
			СтрокаПараметров = Приемник.Добавить();
			СтрокаПараметров.Имя = ИмяПараметра;
			ЕстьИзменения = Истина;
		Иначе
			СтрокаПараметров = СтрокаПараметров[0];	
		КонецЕсли; 
		
		Если ТипЗнч(Параметр) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			Если СтрокаПараметров.Значение <> Параметр.Значение Тогда
				ЕстьИзменения = Истина;
				СтрокаПараметров.Значение = Параметр.Значение;	
	        КонецЕсли;
		Иначе            
			Если Параметр.ТипПараметра <> 0
				И Не ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда    
				СтрокаПараметров.Значение = Параметр.Значение;
				// Представление сформировано в функции ПолучитьПараметрыИзЗапросаНаСервере 	
			Иначе 
				СтрокаПараметров.Значение = Параметр.ТипЗначения.ПривестиЗначение(СтрокаПараметров.Значение);  
			КонецЕсли;
		КонецЕсли;  
		
		ЗаполнитьЗначенияСвойств(СтрокаПараметров, Параметр, "ТипПараметра, АдресЗначения"); 
					
	КонецЦикла;	
	
	Если ЕстьИзменения Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;  
		
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция	УдалитьКомандыВыводаВременныхТаблиц()
	
	Для Каждого Элемент Из Элементы.ГруппаКнопокВременныеТаблицы.ПодчиненныеЭлементы Цикл
		
		Команды.Удалить(Команды.Найти(Элемент.Имя));

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция	ДобавитьКомандыВыводаВременныхТаблиц(МассивВременныхТаблиц);
	
	Для Каждого ИмяТаблицы Из МассивВременныхТаблиц Цикл
		
		ИмяКоманды = ИмяТаблицы;
		НоваяКоманда = Команды.Добавить(ИмяКоманды);
		НоваяКоманда.Действие = "Подключаемый_ВыполнитьЗапросВременнаяТаблица";
		
		Элемент = Элементы.Добавить(ИмяКоманды, 
		Тип("КнопкаФормы"), 
		Элементы.ГруппаКнопокВременныеТаблицы);
		
		Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Элемент.ИмяКоманды = ИмяКоманды;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗапросаПоУмолчанию()
	
	Возврат "ВЫБРАТЬ ПЕРВЫЕ 1000 * ИЗ Справочник.Имя";
	
КонецФункции

&НаСервере
Процедура ПроверкаЗапросаНаСервере(ТекстЗапроса)
	
	Элементы.ПроверкаЗапроса.ЦветФона = Новый Цвет();

	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;  
		// Пользователь получит исключение, если есть ошибка.
		ПараметрыЗапроса = Запрос.НайтиПараметры();   
	Исключение 
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());		
		// Найдем строку в запросе и выделим её.
		МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки, ":");  
		
		Если МассивПодстрок.Количество() = 2 Тогда 
			
			ПутьКСтроке = МассивПодстрок[0]; // {(11, 8)}
			ПутьКСтроке = Сред(ПутьКСтроке, 3, Найти(ПутьКСтроке, ")") - 3);
			
			ЧастиСтроки = РазложитьСтрокуВМассивПодстрок(ПутьКСтроке, ",");  
			Если ЧастиСтроки.Количество() = 2 Тогда     
				СтрокиЗапроса = РазложитьСтрокуВМассивПодстрок(ТекстЗапроса, Символы.ПС);
				ОписаниеЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0)); 
				НомерСтроки = ОписаниеЧисло.ПривестиЗначение(ЧастиСтроки[0]); 
				НачалоОшибки = ОписаниеЧисло.ПривестиЗначение(ЧастиСтроки[1]);
				ДлинаСтроки = СтрДлина(СтрокиЗапроса[НомерСтроки - 1]);	 
				// Фокусируемся на строке с ошибкой.
				ТекущийЭлемент = Элементы.ДеревоНастроекТекстЗапроса;
				Элементы.ДеревоНастроекТекстЗапроса.УстановитьГраницыВыделения(НомерСтроки, НачалоОшибки, НомерСтроки, ДлинаСтроки);
			КонецЕсли;  
			
		КонецЕсли;	  
		
        ВызватьИсключение ОписаниеОшибки;  
		
	КонецПопытки;
			
КонецПроцедуры

#КонецОбласти

#Область ПроизвольныйКод

Функция ПроизвольныйКодПоУмолчанию()

	Возврат
	"Результат = ВыполнитьЗапрос().Выгрузить();
	|
	|Для Каждого ТекущаяСтрока Из Результат Цикл
	|	
	|КонецЦикла";

КонецФункции

&НаСервере
Функция ПолучитьПараметрыИзПроизвольногоКодаНаСервере(ПроизвольныйКод, ТаблицаПараметров);
	
	НайденныеПараметры = Новый Массив;
	
	КодыСимволов = Новый Массив;
	Для Сч = 48 По 57 Цикл  // Цифры
		КодыСимволов.Добавить(Сч);
	КонецЦикла;
	Для Сч = 65 По 90 Цикл  // Латинский алфавит, заглавные
		КодыСимволов.Добавить(Сч);
	КонецЦикла;
	Для Сч = 97 По 122 Цикл  // Латинский алфавит, строчные
		КодыСимволов.Добавить(Сч);
	КонецЦикла;
	Для Сч = 1040 По 1103 Цикл  // Русский Алфавит
		КодыСимволов.Добавить(Сч);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из РазложитьСтрокуВМассивПодстрок(ПроизвольныйКод, Символы.ПС) Цикл
		
		Строка = ВРег(ТекущаяСтрока);
		// TODO вернуть параметр в исходном виде, сейчас вернется в верхнем регистре.
		Если Найти(Строка, "ПАРАМЕТРЫ.") > 0 Тогда 
			
			ИсследуемаяЧасть = РазложитьСтрокуВМассивПодстрок(Строка, "ПАРАМЕТРЫ.")[1];
			ИмяПараметра = "";
			
			Для Сч = 1 По СтрДлина(ИсследуемаяЧасть) Цикл			
				Символ = Сред(ИсследуемаяЧасть,Сч,1);
				Если КодыСимволов.Найти(КодСимвола(Символ)) <> Неопределено Тогда
					ИмяПараметра = ИмяПараметра + Символ; 
				Иначе
					Прервать;	
				КонецЕсли;			             		
			КонецЦикла;
			
			Если Не ПустаяСтрока(ИмяПараметра) Тогда
				НайденныеПараметры.Добавить(Новый Структура("Имя, ТипЗначения, Значение, ТипПараметра, АдресЗначения", ИмяПараметра, Новый ОписаниеТипов(Неопределено)));
			КонецЕсли;		
			
		КонецЕсли;	

	КонецЦикла;
	
	Возврат ДополнитьПараметры(ЭтаФорма, ТаблицаПараметров, НайденныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОкноПроизвольногоКода()

	Если Элементы.ТекущиеНастройки.ТекущаяСтраница <> Элементы.СтраницаПроизвольныйКод Тогда
		Возврат;
	КонецЕсли;

	Элементы.ДеревоНастроекПроизвольныйКод.Видимость = Не РежимПросмотраПроизвольногоКода;
	Элементы.ПанельНастроекПроизвольныйКодКомандыКомпактно.Доступность = Не РежимПросмотраПроизвольногоКода; 
	Элементы.ПроизвольныйКодВебДокумент.Видимость = РежимПросмотраПроизвольногоКода;
	
	Если РежимПросмотраПроизвольногоКода Тогда
		ПроизвольныйКодВебДокумент = ПолучитьHTMLПредставлениеКода(Элементы.ДеревоНастроек.ТекущиеДанные.ПроизвольныйКод); 
	КонецЕсли;   
	
КонецПроцедуры

&НаСервере
Функция ПолучитьHTMLПредставлениеКода(Знач ИсходныйТекст) Экспорт

	ТекстКода = СокрП(ИсходныйТекст);

	//при переносе данных в строке могут появится 13-тые символы Юникода
	ТекстКода = СтрЗаменить(ТекстКода, Символ(13), "");
 
	ТекстКода = СтрЗаменить(ТекстКода, Символы.ПС, "\n");
	ТекстКода = СтрЗаменить(ТекстКода, """", "\""");
	ТекстКода = СтрЗаменить(ТекстКода, "'", "’");

	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СкриптРаскрашивания");

	ТекстHTML = Макет.ПолучитьТекст();

	Стиль = "
		|.comment, .comment span, .comment span span, .comment span span span {color:green}
		|body {color:blue; font-family: \'Courier New\', Courier; font-size: 100%;}
		|p {padding: 0; margin: 2px 0px 2px 0px;}
		|.attribute {color:brown}
		|.number {color:black}
		|.string, .string span {color:black}
		|.datestring, .datestring span {color:magenta}
		|.sign {color:red}
		|.semicolon {color:red}
		|.macro {color:brown}
		|.operator {color:red}
		
		|.numberline {color:gray}
		
		|.key {color:red}";

	ТекстHTML = СтрЗаменить(ТекстHTML, "#%&styles#%&", Стиль);
	ТекстHTML = СтрЗаменить(ТекстHTML, "#%&text#%&", "'" + ТекстКода + "'");

	Возврат ТекстHTML;
 
КонецФункции

#КонецОбласти

#Область СобытияФормы

#Область КонструкторЗапроса

&НаКлиенте
Процедура КонструкторЗапросаПриЗакрытии(Результат, ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(Результат) Тогда
		Возврат;
	КонецЕсли;

	Элемент = ЭлементНастроекПоТекущейСтранице();
	ВыделенныйТекст = Элемент.ВыделенныйТекст; 
	СтрокаНастроек = ДеревоНастроек.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейНастройки);
	
	Если АктивнаСтраницаЗапрос() Тогда
		
		// Если текст не выделяли, то обновляем весь документ
		Если ПустаяСтрока(ВыделенныйТекст) Тогда
			СтрокаНастроек.ТекстЗапроса = Результат;	
		Иначе		
			Элемент.ВыделенныйТекст = Результат;
		КонецЕсли;
		
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		
		КонсольОбщиеМодулиКлиент.ДобавитьУбратьСимволыВНачалоСтроки(Результат, "|");
		Элемент.ВыделенныйТекст = Результат;
		
	КонецЕсли;
				
КонецПроцедуры

#КонецОбласти

#Область БыстрыйКонструктор

&НаКлиенте
Процедура БыстрыйКонструкторПослеОтветаНаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат
	КонецЕсли;
	
	БыстрыйКонструкторОткрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйКонструкторОткрыть()
	
	Оповещение = Новый ОписаниеОповещения("БыстрыйКонструкторЗакрытие", ЭтаФорма);
	
	ОткрытьФорму(ИмяОбработки() + ".Форма.БыстрыйКонструктор"
		,,,,,, Оповещение
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйКонструкторЗакрытие(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат
	КонецЕсли;
	
	Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса = Результат;
	
КонецПроцедуры

#КонецОбласти

#Область РедакторТекста

&НаКлиенте
Процедура РедакторТекстаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если АктивнаСтраницаЗапрос() Тогда	
		Элементы.ДеревоНастроек.ТекущиеДанные.ТекстЗапроса = Результат;		
	ИначеЕсли АктивнаСтраницаПроизвольныйКод() Тогда
		Элементы.ДеревоНастроек.ТекущиеДанные.ПроизвольныйКод = Результат;
	ИначеЕсли АктивнаСтраницаВнешнееСоединение() Тогда
		Элементы.ДеревоНастроек.ТекущиеДанные.ТекстВнешнегоСоединения = Результат;
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область ВнешнееСоединение
&НаКлиенте
Функция ТекущиеПараметрыПодключения()

	ПроверитьДеревоНастроек();
	
	ТекущиеПараметры = Новый Структура();
	
	ТекущиеПараметры.Вставить("ВариантСоединения"	, ВариантСоединения);
	ТекущиеПараметры.Вставить("ВнешняяБазаФайловая"	, ВнешняяБазаФайловая);
	ТекущиеПараметры.Вставить("ПутьКБазе"			, ПутьКБазе);
	ТекущиеПараметры.Вставить("ИмяСервера"			, ИмяСервера);
	ТекущиеПараметры.Вставить("ИмяБазы"				, ИмяБазы);
	ТекущиеПараметры.Вставить("Пользователь"		, Пользователь);
	ТекущиеПараметры.Вставить("Пароль"				, Пароль);
		
	Возврат ТекущиеПараметры;
	
КонецФункции

Функция ПроверитьПодключениеКВнешнемуИсточнику(ПараметрыПодключения)
	
	Соединение = РеквизитФормыВЗначение("Объект").ПолучитьПодключениеКВнешнемуИсточнику(ПараметрыПодключения);
	
	Если ВариантСоединения = "ADODB" Тогда
		Соединение.Open();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЗамераВСекундах(Милисекунды)
	Возврат Строка(Милисекунды/1000)
КонецФункции

&НаСервере
Функция ПредставлениеЗначения(Знач Значение) 
	
	Если ЭтоАдресВременногоХранилища(Значение) Тогда  
		Значение = ПолучитьИзВременногоХранилища(Значение);
	КонецЕсли; 
	
	Возврат РеквизитФормыВЗначение("Объект").ПредставлениеЗначения(Значение);

КонецФункции

&НаКлиенте
Процедура ПоказатьЗначениеВОтдельномОкне(Форма, Команда, ВыводРезультатаЦеликом = Ложь) Экспорт
	
	ВерсияПлатформы = ВерсияПлатформы();
	
	Если ВерсияПлатформы.Редакция = 83
		И ВерсияПлатформы.Версия > 11 Тогда 
		Таблица = Команда.ИспользуемаяТаблица; 
	Иначе
		ПоказатьПредупреждение(, "Показ значения в отдельном окне доступен начиная с платформы 8.3.12");
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресРезультатаВыполнения", АдресРезультатаВыполнения);
	ПараметрыФормы.Вставить("АдресХранилищаЗначений", АдресХранилищаЗначений);
		
	Если ВыводРезультатаЦеликом Тогда
		
		ПараметрыФормы.Вставить("НаКлиенте", Ложь);
		ПараметрыФормы.Вставить("Выражение", "ПолучитьИзВременногоХранилища(АдресРезультатаВыполненияВладельца)");
			
	ИначеЕсли Таблица.Отображение = ОтображениеТаблицы.Список Тогда
		
		Индекс = Формат(Форма[Таблица.Имя].Индекс(Таблица.ТекущиеДанные),"ЧН=; ЧГ=0");
		ПараметрыФормы.Вставить("Выражение", "ВладелецФормы."+Таблица.Имя+"["+Индекс+"]");	
	
	Иначе

		ПараметрыФормы.Вставить("Выражение", ПутьКСтрокеДерева(Форма, Таблица.Имя, Таблица.ТекущиеДанные));

	КонецЕсли;
			                                                                                               
	ОткрытьФорму(ИмяОбработки() + ".Форма.ФормаЗначенияВОтдельномОкне", ПараметрыФормы, Форма, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПутьКСтрокеДерева(Форма, ИмяТаблицы, ТекущиеДанные) Экспорт
	
	Таблица = Форма[ИмяТаблицы];
	
	МассивИндексов = Новый Массив;
	ЗаполнитьИндексыПутиКТекущейСтрокеДерева(Таблица, ТекущиеДанные, МассивИндексов);
	
	Выражение = "ВладелецФормы." + ИмяТаблицы;
	Счетчик = МассивИндексов.Количество();
	Пока Счетчик <> 0 Цикл
		
		Счетчик = Счетчик - 1;
		Индекс = МассивИндексов[Счетчик];
		Выражение = Выражение + ".ПолучитьЭлементы()[" + Индекс + "]"
		
	КонецЦикла;
	
	Возврат Выражение;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИндексыПутиКТекущейСтрокеДерева(Дерево, ТекущиеДанные, МассивИндексов)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		
		Индекс = Дерево.ПолучитьЭлементы().Индекс(ТекущиеДанные);
		МассивИндексов.Добавить(Индекс);
		Возврат;
		
	КонецЕсли;
	
	Индекс = Родитель.ПолучитьЭлементы().Индекс(ТекущиеДанные);	
	МассивИндексов.Добавить(Индекс);	
	ЗаполнитьИндексыПутиКТекущейСтрокеДерева(Дерево, Родитель, МассивИндексов);

КонецПроцедуры

&НаСервере
Процедура Совместимость_КопироватьКолонкуТаблицыСписокПараметров(Строки, ИмяКолонки, ИмяНовойКолонки);
	
	Для Каждого Строка Из Строки Цикл
		
		Строка.СписокПараметров.Колонки.Добавить(ИмяНовойКолонки);
		
		Для Каждого СтрокаПараметра Из Строка.СписокПараметров Цикл
			СтрокаПараметра[ИмяНовойКолонки] = СтрокаПараметра[ИмяКолонки];		
		КонецЦикла;
		
		Совместимость_КопироватьКолонкуТаблицыСписокПараметров(Строка.Строки, ИмяКолонки, ИмяНовойКолонки);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура Совместимость_ДобавитьКолонкуВТаблицуПараметров(Строки, ИмяКолонки, Тип, ЗаполнитьИз = "", ЗаполнитьВ = "");
	
	Для Каждого Строка Из Строки Цикл		
		
		Строка.СписокПараметров.Колонки.Добавить(ИмяКолонки, Тип);
		Если Не ПустаяСтрока(ЗаполнитьИз) Тогда
			Для Каждого ТекущаяСтрока Из Строка.СписокПараметров Цикл 
				ТекущаяСтрока[ЗаполнитьВ] = ТекущаяСтрока[ЗаполнитьИз]; 
			КонецЦикла;
		КонецЕсли;
		
		Совместимость_ДобавитьКолонкуВТаблицуПараметров(Строка.Строки, ИмяКолонки, Тип, ЗаполнитьИз, ЗаполнитьВ);	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияПлатформы() Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	ВерсияМассив = РазложитьСтрокуВМассивПодстрок(ВерсияПлатформы,".");
	Описание = Новый ОписаниеТипов("Число");
	
	ВерсияСтруктура = Новый Структура();
	ВерсияСтруктура.Вставить("Редакция", Описание.ПривестиЗначение(ВерсияМассив[0] + ВерсияМассив[1])); 
	ВерсияСтруктура.Вставить("Версия", Описание.ПривестиЗначение(ВерсияМассив[2]));
	ВерсияСтруктура.Вставить("Сборка", Описание.ПривестиЗначение(ВерсияМассив[3]));
	
	Возврат ВерсияСтруктура;

КонецФункции // ВерсияПлатформы()

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
    Знач ПропускатьПустыеСтроки = Неопределено)
 
    Результат = Новый Массив;
 
    // для обеспечения обратной совместимости
    Если ПропускатьПустыеСтроки = Неопределено Тогда
        ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
        Если ПустаяСтрока(Строка) Тогда 
            Если Разделитель = " " Тогда
                Результат.Добавить("");
            КонецЕсли;
            Возврат Результат;
        КонецЕсли;
    КонецЕсли;
    //
 
    Позиция = Найти(Строка, Разделитель);
    Пока Позиция > 0 Цикл
        Подстрока = Лев(Строка, Позиция - 1);
        Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
            Результат.Добавить(Подстрока);
        КонецЕсли;
        Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
        Позиция = Найти(Строка, Разделитель);
    КонецЦикла;
 
    Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
        Результат.Добавить(Строка);
    КонецЕсли;
 
    Возврат Результат;
 
КонецФункции

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Элементы.ГруппаПараметрыПодключения.Видимость = Истина;
	Элементы.ДеревоНастроекАвтоматическиСохранять.Пометка = АвтоматическиСохранятьПриЗакрытии;
	
	Если ВариантСоединения = ВариантСоединенияV83COMConnector() Тогда
		
		Элементы.ВнешняяБазаФайловая.Видимость = Истина;
		
		Элементы.ПутьКБазе.Видимость = ВнешняяБазаФайловая;
		Элементы.ИмяСервера.Видимость = Не ВнешняяБазаФайловая;
		Элементы.ИмяБазы.Видимость = Не ВнешняяБазаФайловая;
		Элементы.ВнешнееСоединениеЗакомментировать.Заголовок = "//";
		Элементы.ВнешнееСоединениеРаскомментировать.Заголовок = "//х";
		
	ИначеЕсли ВариантСоединения = ВариантСоединенияADODB() Тогда
		
		Элементы.ВнешняяБазаФайловая.Видимость = Ложь;
		Элементы.ПутьКБазе.Видимость = Ложь;
		Элементы.ВнешнееСоединениеЗакомментировать.Заголовок = "— —";
		Элементы.ВнешнееСоединениеРаскомментировать.Заголовок = "— —Х";

	Иначе
		
		Элементы.ВнешняяБазаФайловая.Видимость = Ложь;
		Элементы.ГруппаПараметрыПодключения.Видимость = Ложь;
	
	КонецЕсли;     
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеИзВременногоХранилищаНаСервере(Адрес, ИдентификаторЗначения, XMLСтрока = Ложь) Экспорт 
	
	Значение = ПолучитьИзВременногоХранилища(Адрес).Получить(ИдентификаторЗначения);
	
	Если XMLСтрока Тогда // Например, вместо ссылки вернуть гуид.
		Значение = XMLСтрока(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Функция ЭтоПредставлениеСсылочногоТипа(ПредставлениеТипа)
	
	Если Найти(ПредставлениеТипа, "Документ.") = 1
		Или Найти(ПредставлениеТипа, "Справочник.") = 1
		Или Найти(ПредставлениеТипа, "БизнесПроцесс.") = 1
		Или Найти(ПредставлениеТипа, "Задача.") = 1 
		Или Найти(ПредставлениеТипа, "ПланСчетов.") = 1
		Или Найти(ПредставлениеТипа, "ПланОбмена.") = 1
		Или Найти(ПредставлениеТипа, "ПланВидовХарактеристик.") = 1
		Или Найти(ПредставлениеТипа, "ПланВидовРасчета.") = 1 Тогда
		Возврат Истина
	Иначе
		Возврат	Ложь
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ИдентификаторЗначенияИзЭлемента(Элемент) Экспорт
	
	Возврат Элемент.ТекущиеДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "")];
			
КонецФункции

&НаКлиенте
Функция ИмяОбработки() Экспорт
	
	Позиция1 = Найти(ИмяФормы, ".");
	Позиция2 = Найти(Сред(ИмяФормы, Позиция1 + 1), ".");
	
	Возврат Лев(ИмяФормы, Позиция1 + Позиция2 - 1); 
	
КонецФункции

#КонецОбласти

#КонецОбласти
